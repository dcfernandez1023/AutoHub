[{"C:\\Users\\domin\\autohub\\src\\index.js":"1","C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js":"2","C:\\Users\\domin\\autohub\\src\\components\\Home.js":"3","C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js":"4","C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js":"5","C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js":"6","C:\\Users\\domin\\autohub\\src\\components\\Login.js":"7","C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js":"8","C:\\Users\\domin\\autohub\\src\\models\\car.js":"9","C:\\Users\\domin\\autohub\\src\\controllers\\storage.js":"10","C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js":"11","C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js":"12","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js":"13","C:\\Users\\domin\\autohub\\src\\controllers\\auth.js":"14","C:\\Users\\domin\\autohub\\src\\controllers\\db.js":"15","C:\\Users\\domin\\autohub\\src\\App.js":"16","C:\\Users\\domin\\autohub\\src\\components\\CarModal.js":"17","C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js":"18","C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js":"19","C:\\Users\\domin\\autohub\\src\\models\\logOptions.js":"20","C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js":"21","C:\\Users\\domin\\autohub\\src\\models\\repairService.js":"22","C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js":"23"},{"size":338,"mtime":1606338417443,"results":"24","hashOfConfig":"25"},{"size":7995,"mtime":1608345883915,"results":"26","hashOfConfig":"25"},{"size":8139,"mtime":1608345144912,"results":"27","hashOfConfig":"25"},{"size":10311,"mtime":1608756657600,"results":"28","hashOfConfig":"25"},{"size":539,"mtime":1606122737011,"results":"29","hashOfConfig":"25"},{"size":9062,"mtime":1608247640385,"results":"30","hashOfConfig":"25"},{"size":2397,"mtime":1606206533045,"results":"31","hashOfConfig":"25"},{"size":21095,"mtime":1608193033398,"results":"32","hashOfConfig":"25"},{"size":1966,"mtime":1608537732799,"results":"33","hashOfConfig":"25"},{"size":1576,"mtime":1608343564477,"results":"34","hashOfConfig":"25"},{"size":867,"mtime":1608752122438,"results":"35","hashOfConfig":"25"},{"size":2186,"mtime":1608367481330,"results":"36","hashOfConfig":"25"},{"size":1587,"mtime":1608754365838,"results":"37","hashOfConfig":"25"},{"size":855,"mtime":1606124166902,"results":"38","hashOfConfig":"25"},{"size":1715,"mtime":1608533024978,"results":"39","hashOfConfig":"25"},{"size":3099,"mtime":1608354571205,"results":"40","hashOfConfig":"25"},{"size":9938,"mtime":1608538604001,"results":"41","hashOfConfig":"25"},{"size":2629,"mtime":1608718512468,"results":"42","hashOfConfig":"25"},{"size":15404,"mtime":1608758054375,"results":"43","hashOfConfig":"25"},{"size":764,"mtime":1608366006596,"results":"44","hashOfConfig":"25"},{"size":11394,"mtime":1608718001636,"results":"45","hashOfConfig":"25"},{"size":1678,"mtime":1608718518802,"results":"46","hashOfConfig":"25"},{"size":127,"mtime":1608533923889,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"8mgafs",{"filePath":"51","messages":"52","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\domin\\autohub\\src\\index.js",[],["107","108"],"C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js",["109","110","111","112","113","114","115","116","117","118","119","120","121","122","123"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport CarModal from './CarModal.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction HomeMobile(props) {\r\n\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[isListView, setIsListView] = useState(true); //flag to toggle the mode of displaying cars (list vs. grid)\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      console.log(cars);\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {showCarModal}\r\n        setShow = {setShowCarModal}\r\n        title = \"Add Car\"\r\n        car = {CARMODEL.car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Row style = {{marginTop: \"5%\"}}>\r\n        <Col>\r\n          <Row>\r\n            <Button variant = \"outline-dark\" style = {{marginRight: \"3%\"}}\r\n              onClick = {() => {setShowCarModal(true)}}\r\n            >\r\n              +\r\n            </Button>\r\n            <h4 style = {{marginTop: \"0.5%\"}}> Your Cars </h4>\r\n          </Row>\r\n          {cars.length === 0 ?\r\n            <div></div>\r\n          :\r\n            <div>\r\n              <br/>\r\n              <Row style = {{textAlign: \"center\"}}>\r\n                <Col>\r\n                  <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                    onClick = {() => {setIsListView(true)}}\r\n                  >\r\n                    <i class = \"fa fa-bars\"> </i> List\r\n                  </Button>\r\n                </Col>\r\n                <Col>\r\n                  <Button variant = \"light\"\r\n                    onClick = {() => {setIsListView(false)}}\r\n                  >\r\n                    <i class = \"fa fa-th-large\"> </i> Grid\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          }\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any cars. Click the + button to add a car 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col xs = {5}>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Image src = \"car-holder.png\" style = {{width: \"100%\", height: \"100px\"}} />\r\n                              :\r\n                              <Image src = {car.imageUrl} style = {{width: \"100%\", height: \"100px\"}} />\r\n                            }\r\n                          </Col>\r\n                          <Col xs = {7} style = {{float: \"right\"}}>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <b> {car.name} </b> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col md = {3} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img style = {{width: \"100%\", height: \"175px\"}}id = {car.carId} variant = \"top\" src = \"car-holder.png\" />\r\n                          :\r\n                          <Card.Img style = {{width: \"100%\", height: \"175px\"}} id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <Card.Header>\r\n                  Upcoming Maintenance 🛠️\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  You have nothing scheduled for your cars.\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HomeMobile;\r\n","C:\\Users\\domin\\autohub\\src\\components\\Home.js",["124","125","126","127","128","129","130","131","132","133","134","135","136","137"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport CarModal from './CarModal.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction Home(props) {\r\n\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[isListView, setIsListView] = useState(false); //flag to toggle the mode of displaying cars (list vs. grid)\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {showCarModal}\r\n        setShow = {setShowCarModal}\r\n        title = \"Add Car\"\r\n        car = {CARMODEL.car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Row style = {{marginTop: \"2%\"}}>\r\n        <Col lg = {7}>\r\n          <Row>\r\n            <Col xs = {6}>\r\n              <Button variant = \"outline-dark\" style = {{float: \"left\", marginRight: \"3%\"}}\r\n                onClick = {() => {setShowCarModal(true)}}\r\n              >\r\n                +\r\n              </Button>\r\n              <h4 style = {{marginTop: \"0.5%\"}}> Your Cars </h4>\r\n            </Col>\r\n            {cars.length === 0 ?\r\n              <div></div>\r\n              :\r\n              <Col xs = {6} style = {{textAlign: \"right\"}}>\r\n                <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                  onClick = {() => {setIsListView(true)}}\r\n                >\r\n                  <i class = \"fa fa-bars\"> </i> List\r\n                </Button>\r\n                <Button variant = \"light\"\r\n                  onClick = {() => {setIsListView(false)}}\r\n                >\r\n                  <i class = \"fa fa-th-large\"> </i> Grid\r\n                </Button>\r\n              </Col>\r\n            }\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any cars. Click the + button to add a car 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col xs = {3}>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Image src = \"car-holder.png\" style = {{width: \"100%\", height: \"125px\"}} />\r\n                              :\r\n                              <Image src = {car.imageUrl} style = {{width: \"100%\", height: \"125px\"}} />\r\n                            }\r\n                          </Col>\r\n                          <Col xs = {9}>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <b> {car.name} </b> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col md = {3} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img style = {{width: \"100%\", height: \"125px\"}}id = {car.carId} variant = \"top\" src = \"car-holder.png\" />\r\n                          :\r\n                          <Card.Img style = {{width: \"100%\", height: \"125px\"}} id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <Card.Header>\r\n                  Upcoming Maintenance 🛠️\r\n                  {/*\r\n                  <Button\r\n                    variant = \"outline-dark\"\r\n                    style = {{float: \"right\"}}\r\n                    size = \"sm\"\r\n                    disabled = {cars.length === 0}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                  */}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  You have nothing scheduled for your cars.\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n",["138","139"],"C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js",["140"],"C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js",[],["141","142"],"C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js",["143"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport SSTModal from '../components/SSTModal.js';\r\n\r\nconst SSTModel = require('../models/scheduledServiceType.js');\r\n\r\nconst DB = require('../controllers/db.js');\r\n\r\nfunction ScheduledServiceTypes(props) {\r\n\r\n  const[ssts, setSsts] = useState();\r\n  const[addShow, setAddShow] = useState(false);\r\n  const[editShow, setEditShow] = useState(false);\r\n  const[deleteShow, setDeleteShow] = useState(false);\r\n  const[sstToEdit, setSstToEdit] = useState();\r\n  const[sstToDelete, setSstToDelete] = useState();\r\n  const[cars, setCars] = useState();\r\n  const[carLookup, setCarLookup] = useState();\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n    getSsts();\r\n  }, [props.userInfo])\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n      initializeCarLookup(cars);\r\n    });\r\n  }\r\n\r\n  function initializeCarLookup(cars) {\r\n    var lookup = {};\r\n    for(var i = 0; i < cars.length; i++) {\r\n      var car = cars[i];\r\n      lookup[car.carId] = car.name;\r\n    }\r\n    setCarLookup(lookup);\r\n  }\r\n\r\n  function getSsts() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"scheduledServiceTypes\").onSnapshot(quereySnapshot => {\r\n      var ssts = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        ssts.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setSsts(ssts);\r\n    });\r\n  }\r\n\r\n  if(props.userInfo === undefined || ssts === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  function deleteSst() {\r\n    if(sstToDelete !== undefined) {\r\n      DB.deleteOne(sstToDelete.typeId, \"scheduledServiceTypes\",\r\n        function() {\r\n          handleDeleteModalClose();\r\n        },\r\n        function(error) {\r\n          alert(error);\r\n        }\r\n      )\r\n    }\r\n    else {\r\n      alert(\"Internal error. Could not delete scheduled service type\");\r\n    }\r\n  }\r\n\r\n  function handleDeleteModalClose() {\r\n    setDeleteShow(false);\r\n    setSstToDelete();\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <SSTModal\r\n        userCreated = {props.userInfo.email}\r\n        cars = {cars}\r\n        show = {addShow ? addShow : editShow ? editShow : false}\r\n        sst = {addShow ? SSTModel.scheduledServiceType : editShow ? sstToEdit : undefined}\r\n        setShow = {addShow ? setAddShow : editShow ? setEditShow : function() {setAddShow(false); setEditShow(false)}}\r\n        title = {addShow ? \"Add Scheduled Service Type\" : editShow ? \"Edit Scheduled Service Type\" : \"\"}\r\n      />\r\n      <Modal\r\n        show = {deleteShow}\r\n        onHide = {handleDeleteModalClose}\r\n        backdrop = \"static\"\r\n        keyboard = {false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> Delete Scheduled Service Type </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to delete <strong>{sstToDelete !== undefined ? \"'\" + sstToDelete.serviceName + \"'\" : \"\"}</strong>?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {deleteSst()}}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {handleDeleteModalClose()}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <br/>\r\n      <Row>\r\n        <Col>\r\n          <h4 style = {{marginTop: \"1%\"}}>\r\n            <Button variant = \"outline-dark\" style = {{marginRight: \"1%\"}}\r\n                onClick = {() => {\r\n                  setAddShow(true);\r\n                }}\r\n              >\r\n                +\r\n            </Button>\r\n            Scheduled Service Types\r\n          </h4>\r\n        </Col>\r\n      </Row>\r\n      <br/>\r\n      <Row>\r\n        <Col>\r\n        {ssts.length === 0 ?\r\n          <h6> You do not have any scheduled service types. 🛎️ </h6>\r\n          :\r\n          <Accordion>\r\n          {ssts.map((service) => {\r\n            return (\r\n              <Card>\r\n                <Card.Header>\r\n                  <Accordion.Toggle as = {Button} variant = \"light\" eventKey = {service.typeId}>\r\n                    {service.serviceName}\r\n                  </Accordion.Toggle>\r\n                  <Button size = \"sm\" variant = \"outline-dark\" style = {{float: \"right\"}}\r\n                    onClick = {() => {\r\n                      setDeleteShow(true);\r\n                      setSstToDelete(service);\r\n                    }}\r\n                  >\r\n                    🗑️\r\n                  </Button>\r\n                  <Button size = \"sm\" variant = \"outline-dark\" style = {{float: \"right\", marginRight: \"1%\"}}\r\n                    onClick = {() => {\r\n                      setEditShow(true);\r\n                      setSstToEdit(service);\r\n                    }}\r\n                  >\r\n                    ✏️\r\n                  </Button>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey = {service.typeId}>\r\n                  <Card.Body>\r\n                    {Object.keys(service.carsScheduled).map((key) => {\r\n                      var mileValue;\r\n                      var timeValue;\r\n                      if(Number(service.carsScheduled[key].miles) > 0) {\r\n                        mileValue = \"Every \" + service.carsScheduled[key].miles;\r\n                      }\r\n                      else {\r\n                        mileValue = \"None\";\r\n                      }\r\n                      if(Number(service.carsScheduled[key].time.quantity) > 1) {\r\n                        timeValue = \"Every \" + service.carsScheduled[key].time.quantity + \" \" + service.carsScheduled[key].time.units + \"s\";\r\n                      }\r\n                      else if(Number(service.carsScheduled[key].time.quantity) === 1) {\r\n                        timeValue = \"Every \" + service.carsScheduled[key].time.quantity + \" \" + service.carsScheduled[key].time.units;\r\n                      }\r\n                      else {\r\n                        timeValue = \"None\"\r\n                      }\r\n                      return (\r\n                        <Row>\r\n                          <Col>\r\n                            <Row>\r\n                              <Col>\r\n                                <Row style = {{marginBottom: \"1%\"}}>\r\n                                  <Col md = {3}>\r\n                                    <h5> {carLookup[key]} </h5>\r\n                                  </Col>\r\n                                  <Col md = {4} style = {{marginBottom: \"1%\"}}>\r\n                                    <Form.Label> 💨 Mile Interval </Form.Label>\r\n                                    <Form.Control\r\n                                      size = \"sm\"\r\n                                      as = \"input\"\r\n                                      value = {mileValue}\r\n                                      readOnly\r\n                                    />\r\n                                  </Col>\r\n                                  <Col md = {5}>\r\n                                    <Form.Label> 🕒 Time Interval </Form.Label>\r\n                                      <Form.Control\r\n                                        size = \"sm\"\r\n                                        value = {timeValue}\r\n                                        as = \"input\"\r\n                                        readOnly\r\n                                      />\r\n                                  </Col>\r\n                                </Row>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <hr style = {{border: \"1px solid lightGray\"}} />\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      );\r\n                    })}\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            );\r\n          })}\r\n          </Accordion>\r\n        }\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ScheduledServiceTypes;\r\n","C:\\Users\\domin\\autohub\\src\\components\\Login.js",["144","145","146"],"C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js",["147","148","149","150"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\n\r\nconst SSTModel = require('../models/scheduledServiceType.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\nconst DB = require('../controllers/db.js');\r\n\r\nfunction SSTModal(props) {\r\n\r\n  const[cars, setCars] = useState();\r\n  const[sst, setSst] = useState();\r\n  const[show, setShow] = useState(false);\r\n  const[title, setTitle] = useState(\"\");\r\n  const[validated, setValidated] = useState(false);\r\n  const[toggleApply, setToggleApply] = useState(false);\r\n  const[selectedCars, setSelectedCars] = useState({});\r\n  const[globalInterval, setGlobalInterval] = useState()\r\n\r\n  useEffect(() => {\r\n    setShow(props.show);\r\n    setTitle(props.title);\r\n    setGlobalInterval(SSTModel.interval);\r\n    initialize(props.sst, props.cars);\r\n  }, [props.sst, props.show, props.title, props.userInfo, props.cars])\r\n\r\n  function initialize(initSst, initCars) {\r\n    if(initSst === undefined || initCars === undefined) {\r\n      return;\r\n    }\r\n    var len = Object.keys(initSst.carsScheduled).length;\r\n    var selected = {};\r\n    for(var i = 0; i < initCars.length; i++) {\r\n      var car = initCars[i];\r\n      selected[car.carId] = false;\r\n      if(initSst.carsScheduled[car.carId] === undefined) {\r\n        initSst.carsScheduled[car.carId] = SSTModel.interval;\r\n      }\r\n    }\r\n    setSelectedCars(selected);\r\n    setSst(initSst);\r\n    setCars(initCars);\r\n  }\r\n\r\n  function handleModalClose() {\r\n    props.setShow(false);\r\n    setToggleApply(false);\r\n    setValidated(false);\r\n    setSst();\r\n    setTitle(\"\");\r\n  }\r\n\r\n  function onChangeInterval(e, id, option) {\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    var copy = JSON.parse(JSON.stringify(sst));\r\n    if(name === \"time\") {\r\n      if(option === \"quantity\" && isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.carsScheduled[id].time[option] = value;\r\n    }\r\n    else {\r\n      if(isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.carsScheduled[id].miles = value;\r\n    }\r\n    setSst(copy);\r\n    setValidated(false);\r\n  }\r\n\r\n  function onChangeGlobalInterval(e, option) {\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    var copy = JSON.parse(JSON.stringify(globalInterval));\r\n    if(name === \"time\") {\r\n      if(option === \"quantity\" && isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.time[option] = value;\r\n    }\r\n    else {\r\n      if(isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.miles = value;\r\n    }\r\n    setGlobalInterval(copy);\r\n  }\r\n\r\n  function getNumSelected() {\r\n    var count = 0;\r\n    for(var key in selectedCars) {\r\n      if(selectedCars[key] === true) {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function selectAll() {\r\n    var len = Object.keys(selectedCars).length;\r\n    var selected = {};\r\n    for(var i = 0; i < cars.length; i++) {\r\n      var car = cars[i];\r\n      selected[car.carId] = true;\r\n    }\r\n    setSelectedCars(selected);\r\n  }\r\n\r\n  function unselectAll() {\r\n    var len = Object.keys(selectedCars).length;\r\n    var selected = {};\r\n    for(var i = 0; i < cars.length; i++) {\r\n      var car = cars[i];\r\n      selected[car.carId] = false;\r\n    }\r\n    setSelectedCars(selected);\r\n  }\r\n\r\n  function selectCar(id) {\r\n    var copy = JSON.parse(JSON.stringify(selectedCars));\r\n    copy[id] = !copy[id];\r\n    setSelectedCars(copy);\r\n  }\r\n\r\n  function applyGlobalInterval() {\r\n    var copy = JSON.parse(JSON.stringify(sst));\r\n    for(var key in copy.carsScheduled) {\r\n      if(selectedCars[key]) {\r\n        copy.carsScheduled[key] = globalInterval;\r\n      }\r\n    }\r\n    setSst(copy);\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    setValidated(true);\r\n    var isValid = checkSubmitFields();\r\n    if(isValid) {\r\n      if(props.userCreated !== undefined) {\r\n        sst.userCreated = props.userCreated;\r\n        if(sst.typeId.trim().length === 0) {\r\n          sst.typeId = GENERICFUNCTIONS.generateId();\r\n        }\r\n        saveSst();\r\n      }\r\n      else {\r\n        alert(\"Internal error. Could not add scheduled service type\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function saveSst() {\r\n    massageSst();\r\n    DB.writeOne(sst.typeId, sst, \"scheduledServiceTypes\",\r\n      function() {\r\n        handleModalClose();\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  function massageSst() {\r\n    for(var key in sst.carsScheduled) {\r\n      var entry = sst.carsScheduled[key];\r\n      if(entry.miles === 0 && entry.time.quantity === 0 && entry.time.units === \"none\") {\r\n        delete sst.carsScheduled[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkSubmitFields() {\r\n    var isValid = true;\r\n    if(sst.serviceName.trim().length === 0) {\r\n      sst.serviceName = \"\";\r\n      isValid = false;\r\n    }\r\n    for(var key in sst.carsScheduled) {\r\n      var entry = sst.carsScheduled[key];\r\n      if(entry.miles.toString().trim().length === 0) {\r\n        sst.carsScheduled[key].miles = 0;\r\n      }\r\n      if(entry.time.quantity.toString().trim().length === 0) {\r\n        sst.carsScheduled[key].time.quantity = 0;\r\n      }\r\n      if(Number(entry.time.quantity.toString().trim()) > 0 && entry.time.units.trim() === \"none\") {\r\n        isValid = false;\r\n      }\r\n      if(entry.time.units.length !== 0 && entry.time.units !== \"none\" && entry.time.quantity === 0) {\r\n        isValid = false;\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  if(sst === undefined || cars === undefined || sst.carsScheduled === undefined) {\r\n    return <div></div>;\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show = {show}\r\n      onHide = {handleModalClose}\r\n      backdrop = \"static\"\r\n      keyboard = {false}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title> {title} </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label> Service Name </Form.Label>\r\n              <Form.Control\r\n                isInvalid = {validated ? sst.serviceName.trim().length === 0 : undefined}\r\n                size = \"sm\"\r\n                as = \"input\"\r\n                name = \"serviceName\"\r\n                value = {sst.serviceName}\r\n                onChange = {(e) => {\r\n                  var copy = JSON.parse(JSON.stringify(sst));\r\n                  var name = [e.target.name][0];\r\n                  var value = e.target.value;\r\n                  copy[name] = value;\r\n                  setSst(copy);\r\n                  setValidated(false);\r\n                }}\r\n              />\r\n              <Form.Control.Feedback type = \"invalid\">\r\n                Required\r\n              </Form.Control.Feedback>\r\n            </Col>\r\n          </Row>\r\n          <hr style = {{border: \"1px solid lightGray\"}} />\r\n          <Row>\r\n            <Col xs = {9}>\r\n              <h5> Cars </h5>\r\n            </Col>\r\n            <Col xs = {3} style = {{textAlign: \"right\"}}>\r\n              {!toggleApply ?\r\n                <Button variant = \"outline-dark\" size = \"sm\"\r\n                  onClick = {() => {\r\n                    setToggleApply(true);\r\n                  }}\r\n                >\r\n                  ✏️\r\n                </Button>\r\n                :\r\n                <Button variant = \"outline-dark\" size = \"sm\"\r\n                  onClick = {() => {\r\n                    setToggleApply(false);\r\n                  }}\r\n                >\r\n                  ✔️\r\n                </Button>\r\n              }\r\n            </Col>\r\n          </Row>\r\n          <br/>\r\n          {!toggleApply ?\r\n            <div>\r\n              {cars.map((car) => {\r\n                return (\r\n                  <Row>\r\n                    <Col>\r\n                      <ListGroup horizontal>\r\n                        <ListGroup.Item style = {{width: \"100%\"}}>\r\n                          <Row style = {{marginBottom: \"3%\"}}>\r\n                            <Col>\r\n                              <p> <strong> {car.name} </strong> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col sm = {5} style = {{marginBottom: \"3%\"}}>\r\n                              <Form.Label> 💨 Mile Interval </Form.Label>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = \"input\"\r\n                                name = \"miles\"\r\n                                value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                          sst.carsScheduled[car.carId].miles\r\n                                          :\r\n                                          SSTModel.interval.miles\r\n                                        }\r\n                                onChange = {(e) => {\r\n                                  onChangeInterval(e, car.carId);\r\n                                }}\r\n                              />\r\n                            </Col>\r\n                            <Col sm = {7}>\r\n                              <Form.Label> 🕒 Time Interval </Form.Label>\r\n                              <InputGroup size = \"sm\">\r\n                                <Form.Control\r\n                                  as = \"input\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.quantity\r\n                                            :\r\n                                            SSTModel.interval.time.quantity\r\n                                          }\r\n                                  isInvalid = {validated && sst.carsScheduled[car.carId] !== undefined ? sst.carsScheduled[car.carId].time.units.length !== 0 && sst.carsScheduled[car.carId].time.units !== \"none\" && sst.carsScheduled[car.carId].time.quantity === 0 : undefined}\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"quantity\");\r\n                                  }}\r\n                                  style = {{marginRight: \"2%\"}}\r\n                                />\r\n                                <Form.Control\r\n                                  as = \"select\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.units\r\n                                            :\r\n                                            SSTModel.interval.time.units\r\n                                          }\r\n                                  isInvalid = {validated&&  sst.carsScheduled[car.carId] !== undefined ? Number(sst.carsScheduled[car.carId].time.quantity.toString().trim()) > 0 && sst.carsScheduled[car.carId].time.units === \"none\"\r\n                                              :\r\n                                              undefined\r\n                                              }\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"units\");\r\n                                  }}\r\n                                >\r\n                                  <option value = \"none\" selected> Select </option>\r\n                                  {SSTModel.timeUnits.map((unit) => {\r\n                                    return (\r\n                                      <option value = {unit.value}> {unit.displayName} </option>\r\n                                    );\r\n                                  })}\r\n                                </Form.Control>\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </ListGroup.Item>\r\n                      </ListGroup>\r\n                    </Col>\r\n                  </Row>\r\n                );\r\n              })}\r\n            </div>\r\n            :\r\n            <div>\r\n              <Row style = {{marginBottom: \"3%\"}}>\r\n                <Col>\r\n                  <InputGroup size = \"sm\">\r\n                    <div style = {{marginRight: \"1%\"}}>\r\n                      Every\r\n                    </div>\r\n                    <div style = {{width: \"15%\", marginRight: \"1%\"}}>\r\n                      <Form.Control\r\n                        size = \"sm\"\r\n                        as = \"input\"\r\n                        name = \"miles\"\r\n                        value = {globalInterval !== undefined ?\r\n                                  globalInterval.miles\r\n                                  :\r\n                                  SSTModel.interval.miles\r\n                                }\r\n                        onChange = {(e) => {\r\n                          onChangeGlobalInterval(e);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div style = {{marginRight: \"1%\"}}>\r\n                      miles or\r\n                    </div>\r\n                    <div style = {{width: \"12%\", marginRight: \"1%\"}}>\r\n                      <Form.Control\r\n                        size = \"sm\"\r\n                        as = \"input\"\r\n                        name = \"time\"\r\n                        value = {globalInterval !== undefined ?\r\n                                  globalInterval.time.quantity\r\n                                  :\r\n                                  SSTModel.interval.time.quantity\r\n                                }\r\n                        onChange = {(e) => {\r\n                          onChangeGlobalInterval(e, \"quantity\");\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <Form.Control\r\n                      as = \"select\"\r\n                      name = \"time\"\r\n                      value = {globalInterval !== undefined ?\r\n                                globalInterval.time.units\r\n                                :\r\n                                SSTModel.interval.time.units\r\n                              }\r\n                      onChange = {(e) => {\r\n                        onChangeGlobalInterval(e, \"units\");\r\n                      }}\r\n                    >\r\n                      <option value = \"\" selected> Select </option>\r\n                      {SSTModel.timeUnits.map((unit) => {\r\n                        return (\r\n                          <option value = {unit.value}> {unit.displayName} </option>\r\n                        );\r\n                      })}\r\n                    </Form.Control>\r\n                  </InputGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row style = {{marginBottom: \"3%\"}}>\r\n                <Col style = {{textAlign: \"right\"}}>\r\n                  <Button size = \"sm\" variant = \"success\" style = {{marginRight: \"2%\"}}\r\n                    onClick = {() => {applyGlobalInterval()}}\r\n                  >\r\n                    Apply\r\n                  </Button>\r\n                  <OverlayTrigger\r\n                    key = \"apply-info\"\r\n                    placement = \"bottom\"\r\n                    overlay = {\r\n                      <Tooltip id = \"apply-info-tooltip\">\r\n                        Enter the desired <strong> mile </strong> and/or <strong> time </strong> interval and click the 'Apply' button\r\n                        to apply it to the selected cars.\r\n                      </Tooltip>\r\n                    }\r\n                  >\r\n                    <Button size = \"sm\" variant = \"light\">\r\n                      🛈\r\n                    </Button>\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n              <hr style = {{border: \"1px solid lightGray\"}} />\r\n              <Row style = {{marginBottom: \"2%\"}}>\r\n                <Col>\r\n                  {getNumSelected() !== 0 ?\r\n                    <Button variant = \"secondary\" size = \"sm\"\r\n                      onClick = {() => {unselectAll()}}\r\n                    >\r\n                      Unselect All\r\n                    </Button>\r\n                    :\r\n                    <Button variant = \"secondary\" size = \"sm\"\r\n                      onClick = {() => {selectAll()}}\r\n                    >\r\n                      Select All\r\n                    </Button>\r\n                  }\r\n                </Col>\r\n              </Row>\r\n              {cars.map((car, index) => {\r\n                return (\r\n                  <Row>\r\n                    <Col>\r\n                      <ListGroup horizontal>\r\n                        <ListGroup.Item>\r\n                          <Row style = {{marginBottom: \"3%\"}}>\r\n                            <Col>\r\n                              <Form.Check\r\n                                type = \"checkbox\"\r\n                                checked = {selectedCars[car.carId]}\r\n                                id = {car.carId + index}\r\n                                label = {<p> <strong> {car.name} </strong> </p>}\r\n                                onChange = {() => {selectCar(car.carId)}}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col sm = {5} style = {{marginBottom: \"3%\"}}>\r\n                              <Form.Label> 💨 Mile Interval </Form.Label>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = \"input\"\r\n                                name = \"miles\"\r\n                                value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                          sst.carsScheduled[car.carId].miles\r\n                                          :\r\n                                          SSTModel.interval.miles\r\n                                        }\r\n                                onChange = {(e) => {\r\n                                  onChangeInterval(e, car.carId);\r\n                                }}\r\n                              />\r\n                            </Col>\r\n                            <Col sm = {7}>\r\n                              <Form.Label> 🕒 Time Interval </Form.Label>\r\n                              <InputGroup size = \"sm\">\r\n                                <Form.Control\r\n                                  as = \"input\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.quantity\r\n                                            :\r\n                                            SSTModel.interval.time.quantity\r\n                                          }\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"quantity\");\r\n                                  }}\r\n                                  style = {{marginRight: \"2%\"}}\r\n                                />\r\n                                <Form.Control\r\n                                  as = \"select\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.units\r\n                                            :\r\n                                            SSTModel.interval.time.units\r\n                                          }\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"units\");\r\n                                  }}\r\n                                >\r\n                                  <option value = \"none\" selected> Select </option>\r\n                                  {SSTModel.timeUnits.map((unit) => {\r\n                                    return (\r\n                                      <option value = {unit.value}> {unit.displayName} </option>\r\n                                    );\r\n                                  })}\r\n                                </Form.Control>\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </ListGroup.Item>\r\n                      </ListGroup>\r\n                    </Col>\r\n                  </Row>\r\n                );\r\n              })}\r\n            </div>\r\n          }\r\n      </Modal.Body>\r\n      {!toggleApply ?\r\n        <Modal.Footer>\r\n          <Button onClick = {() => {onSubmit()}}>\r\n            Save\r\n          </Button>\r\n        </Modal.Footer>\r\n        :\r\n        <div></div>\r\n      }\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default SSTModal;\r\n",["151","152"],"C:\\Users\\domin\\autohub\\src\\models\\car.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\storage.js",[],["153","154"],"C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js",[],"C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js",["155","156","157"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\nfunction AppNavbar() {\r\n  return (\r\n    <Navbar fluid style = {{backgroundColor: \"#A9CCE3\"}}>\r\n      <Navbar.Brand href = \"/\">\r\n        <Row>\r\n          <Col>\r\n            <h4> AutoHub </h4>\r\n          </Col>\r\n        </Row>\r\n      </Navbar.Brand>\r\n      <Nav className = \"mr-auto\">\r\n      </Nav>\r\n      <Nav className = \"justify-content-end\">\r\n        <OverlayTrigger\r\n          key = \"scheduled-service-types\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"scheduled-service-type\">\r\n              Scheduled Service Types\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}\r\n            onClick = {() => {\r\n              window.location.pathname = \"/scheduledServiceTypes\";\r\n            }}\r\n          >\r\n            🛎️\r\n          </Button>\r\n        </OverlayTrigger>\r\n        <OverlayTrigger\r\n          key = \"messages\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"message\">\r\n              Messages\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}>\r\n            ✉️\r\n          </Button>\r\n        </OverlayTrigger>\r\n        <OverlayTrigger\r\n          key = \"profile\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"my-profile\">\r\n              Profile\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}>\r\n            👤\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default AppNavbar;\r\n","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\auth.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\db.js",[],"C:\\Users\\domin\\autohub\\src\\App.js",["158","159","160"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport Login from './components/Login.js';\r\nimport AppNavbar from './components/AppNavbar.js';\r\nimport Home from './components/Home.js';\r\nimport HomeMobile from './components/HomeMobile.js';\r\nimport ScheduledServiceTypes from './pages/ScheduledServiceTypes.js';\r\nimport CarInfo from './pages/CarInfo.js';\r\n\r\nconst AUTH = require('./controllers/auth.js');\r\nconst MOBILEBREAKPOINT = 500;\r\n\r\nfunction App() {\r\n\r\n  const[userInfo, setUserInfo] = useState();\r\n  //const[screenWidth, setScreenWidth] = useState(window.innerWidth); //pixel size of screen, used to determine when to render components for smaller devices\r\n  const[isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    isUserSignedin();\r\n    detectMobile();\r\n  }, []);\r\n\r\n  //sets userInfo state object\r\n  //passes a call back to AUTH controller to set state object of this component\r\n  function isUserSignedin() {\r\n    const callback = (user) => {\r\n      setUserInfo(user);\r\n    }\r\n    AUTH.isUserSignedin(callback);\r\n  }\r\n\r\n  //detects smaller device (mobile)\r\n  function detectMobile() {\r\n    //window.addEventListener(\"resize\", setScreenWidth(window.innerWidth));\r\n    if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(window.navigator.userAgent)) {\r\n      setIsMobile(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path = \"/\">\r\n          {userInfo === null\r\n            ?\r\n              <body style = {{backgroundImage: \"url('tools.gif')\"}}>\r\n                <Login\r\n                  googleSignin = {AUTH.googleSignin}\r\n                />\r\n              </body>\r\n            :\r\n              <Container fluid>\r\n                <AppNavbar />\r\n                {isMobile ?\r\n                  <div>\r\n                    <HomeMobile\r\n                      userInfo = {userInfo}\r\n                    />\r\n                  </div>\r\n                :\r\n                  <div>\r\n                    <Home\r\n                      userInfo = {userInfo}\r\n                    />\r\n                  </div>\r\n                }\r\n              </Container>\r\n          }\r\n        </Route>\r\n        <Route exact path = \"/scheduledServiceTypes\">\r\n          <Container fluid>\r\n            <AppNavbar />\r\n            <ScheduledServiceTypes\r\n              userInfo = {userInfo}\r\n            />\r\n          </Container>\r\n        </Route>\r\n        <Route\r\n          path = \"/carInfo/:carId\"\r\n          render = {(props) =>\r\n            <Container fluid>\r\n              <AppNavbar />\r\n              <CarInfo\r\n                {...props}\r\n                userInfo = {userInfo}\r\n                {...props}\r\n              />\r\n            </Container>\r\n          }\r\n        >\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["161","162"],"C:\\Users\\domin\\autohub\\src\\components\\CarModal.js",["163","164","165"],"C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js",[],"C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js",["166","167","168","169","170"],"C:\\Users\\domin\\autohub\\src\\models\\logOptions.js",[],["171","172"],"C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js",["173","174","175","176","177"],"C:\\Users\\domin\\autohub\\src\\models\\repairService.js",[],"C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":6,"column":8,"nodeType":"184","messageId":"185","endLine":6,"endColumn":12},{"ruleId":"182","severity":1,"message":"186","line":11,"column":8,"nodeType":"184","messageId":"185","endLine":11,"endColumn":22},{"ruleId":"182","severity":1,"message":"187","line":12,"column":8,"nodeType":"184","messageId":"185","endLine":12,"endColumn":16},{"ruleId":"182","severity":1,"message":"188","line":13,"column":8,"nodeType":"184","messageId":"185","endLine":13,"endColumn":13},{"ruleId":"182","severity":1,"message":"189","line":17,"column":8,"nodeType":"184","messageId":"185","endLine":17,"endColumn":14},{"ruleId":"182","severity":1,"message":"190","line":19,"column":16,"nodeType":"184","messageId":"185","endLine":19,"endColumn":22},{"ruleId":"182","severity":1,"message":"191","line":25,"column":7,"nodeType":"184","messageId":"185","endLine":25,"endColumn":14},{"ruleId":"182","severity":1,"message":"192","line":26,"column":7,"nodeType":"184","messageId":"185","endLine":26,"endColumn":23},{"ruleId":"193","severity":1,"message":"194","line":36,"column":6,"nodeType":"195","endLine":36,"endColumn":22,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":120,"column":21,"nodeType":"184","messageId":"199","endLine":120,"endColumn":26},{"ruleId":"200","severity":1,"message":"201","line":128,"column":65,"nodeType":"202","messageId":"203","endLine":128,"endColumn":66},{"ruleId":"200","severity":1,"message":"201","line":147,"column":53,"nodeType":"202","messageId":"203","endLine":147,"endColumn":54},{"ruleId":"204","severity":1,"message":"205","line":165,"column":21,"nodeType":"206","endLine":169,"endColumn":22},{"ruleId":"200","severity":1,"message":"201","line":167,"column":63,"nodeType":"202","messageId":"203","endLine":167,"endColumn":64},{"ruleId":"200","severity":1,"message":"201","line":184,"column":51,"nodeType":"202","messageId":"203","endLine":184,"endColumn":52},{"ruleId":"182","severity":1,"message":"183","line":6,"column":8,"nodeType":"184","messageId":"185","endLine":6,"endColumn":12},{"ruleId":"182","severity":1,"message":"186","line":11,"column":8,"nodeType":"184","messageId":"185","endLine":11,"endColumn":22},{"ruleId":"182","severity":1,"message":"187","line":12,"column":8,"nodeType":"184","messageId":"185","endLine":12,"endColumn":16},{"ruleId":"182","severity":1,"message":"188","line":13,"column":8,"nodeType":"184","messageId":"185","endLine":13,"endColumn":13},{"ruleId":"182","severity":1,"message":"190","line":18,"column":16,"nodeType":"184","messageId":"185","endLine":18,"endColumn":22},{"ruleId":"182","severity":1,"message":"191","line":23,"column":7,"nodeType":"184","messageId":"185","endLine":23,"endColumn":14},{"ruleId":"182","severity":1,"message":"192","line":25,"column":7,"nodeType":"184","messageId":"185","endLine":25,"endColumn":23},{"ruleId":"193","severity":1,"message":"194","line":35,"column":6,"nodeType":"195","endLine":35,"endColumn":22,"suggestions":"207"},{"ruleId":"197","severity":1,"message":"198","line":113,"column":21,"nodeType":"184","messageId":"199","endLine":113,"endColumn":26},{"ruleId":"200","severity":1,"message":"201","line":121,"column":65,"nodeType":"202","messageId":"203","endLine":121,"endColumn":66},{"ruleId":"200","severity":1,"message":"201","line":140,"column":53,"nodeType":"202","messageId":"203","endLine":140,"endColumn":54},{"ruleId":"204","severity":1,"message":"205","line":158,"column":21,"nodeType":"206","endLine":162,"endColumn":22},{"ruleId":"200","severity":1,"message":"201","line":160,"column":63,"nodeType":"202","messageId":"203","endLine":160,"endColumn":64},{"ruleId":"200","severity":1,"message":"201","line":177,"column":51,"nodeType":"202","messageId":"203","endLine":177,"endColumn":52},{"ruleId":"178","replacedBy":"208"},{"ruleId":"180","replacedBy":"209"},{"ruleId":"193","severity":1,"message":"210","line":36,"column":6,"nodeType":"195","endLine":36,"endColumn":48,"suggestions":"211"},{"ruleId":"178","replacedBy":"212"},{"ruleId":"180","replacedBy":"213"},{"ruleId":"193","severity":1,"message":"214","line":33,"column":6,"nodeType":"195","endLine":33,"endColumn":22,"suggestions":"215"},{"ruleId":"182","severity":1,"message":"216","line":1,"column":27,"nodeType":"184","messageId":"185","endLine":1,"endColumn":36},{"ruleId":"182","severity":1,"message":"217","line":11,"column":7,"nodeType":"184","messageId":"185","endLine":11,"endColumn":11},{"ruleId":"182","severity":1,"message":"218","line":15,"column":22,"nodeType":"184","messageId":"185","endLine":15,"endColumn":39},{"ruleId":"182","severity":1,"message":"219","line":5,"column":8,"nodeType":"184","messageId":"185","endLine":5,"endColumn":17},{"ruleId":"182","severity":1,"message":"220","line":40,"column":9,"nodeType":"184","messageId":"185","endLine":40,"endColumn":12},{"ruleId":"182","severity":1,"message":"220","line":112,"column":9,"nodeType":"184","messageId":"185","endLine":112,"endColumn":12},{"ruleId":"182","severity":1,"message":"220","line":122,"column":9,"nodeType":"184","messageId":"185","endLine":122,"endColumn":12},{"ruleId":"178","replacedBy":"221"},{"ruleId":"180","replacedBy":"222"},{"ruleId":"178","replacedBy":"223"},{"ruleId":"180","replacedBy":"224"},{"ruleId":"182","severity":1,"message":"225","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":25},{"ruleId":"182","severity":1,"message":"216","line":1,"column":27,"nodeType":"184","messageId":"185","endLine":1,"endColumn":36},{"ruleId":"182","severity":1,"message":"226","line":6,"column":8,"nodeType":"184","messageId":"185","endLine":6,"endColumn":13},{"ruleId":"182","severity":1,"message":"227","line":7,"column":8,"nodeType":"184","messageId":"185","endLine":7,"endColumn":11},{"ruleId":"182","severity":1,"message":"228","line":8,"column":8,"nodeType":"184","messageId":"185","endLine":8,"endColumn":11},{"ruleId":"182","severity":1,"message":"229","line":19,"column":7,"nodeType":"184","messageId":"185","endLine":19,"endColumn":23},{"ruleId":"178","replacedBy":"230"},{"ruleId":"180","replacedBy":"231"},{"ruleId":"182","severity":1,"message":"219","line":5,"column":8,"nodeType":"184","messageId":"185","endLine":5,"endColumn":17},{"ruleId":"182","severity":1,"message":"190","line":9,"column":16,"nodeType":"184","messageId":"185","endLine":9,"endColumn":22},{"ruleId":"182","severity":1,"message":"232","line":139,"column":11,"nodeType":"184","messageId":"185","endLine":139,"endColumn":15},{"ruleId":"182","severity":1,"message":"187","line":12,"column":8,"nodeType":"184","messageId":"185","endLine":12,"endColumn":16},{"ruleId":"182","severity":1,"message":"190","line":14,"column":16,"nodeType":"184","messageId":"185","endLine":14,"endColumn":22},{"ruleId":"193","severity":1,"message":"194","line":38,"column":6,"nodeType":"195","endLine":38,"endColumn":40,"suggestions":"233"},{"ruleId":"234","severity":1,"message":"235","line":311,"column":51,"nodeType":"236","messageId":"237","endLine":311,"endColumn":53},{"ruleId":"182","severity":1,"message":"238","line":397,"column":33,"nodeType":"184","messageId":"185","endLine":397,"endColumn":41},{"ruleId":"178","replacedBy":"239"},{"ruleId":"180","replacedBy":"240"},{"ruleId":"182","severity":1,"message":"187","line":12,"column":8,"nodeType":"184","messageId":"185","endLine":12,"endColumn":16},{"ruleId":"182","severity":1,"message":"190","line":14,"column":16,"nodeType":"184","messageId":"185","endLine":14,"endColumn":22},{"ruleId":"193","severity":1,"message":"194","line":38,"column":6,"nodeType":"195","endLine":38,"endColumn":40,"suggestions":"241"},{"ruleId":"197","severity":1,"message":"242","line":66,"column":9,"nodeType":"184","messageId":"199","endLine":66,"endColumn":13},{"ruleId":"234","severity":1,"message":"235","line":244,"column":51,"nodeType":"236","messageId":"237","endLine":244,"endColumn":53},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'Modal' is defined but never used.","'Figure' is defined but never used.","'uuidv4' is defined but never used.","'STORAGE' is assigned a value but never used.","'GENERICFUNCTIONS' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCars'. Either include it or remove the dependency array.","ArrayExpression",["245"],"no-redeclare","'style' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["246"],["243"],["244"],"React Hook useEffect has a missing dependency: 'getSsts'. Either include it or remove the dependency array.",["247"],["243"],["244"],"React Hook useEffect has missing dependencies: 'getCars' and 'getSsts'. Either include them or remove the dependency array.",["248"],"'useEffect' is defined but never used.","'AUTH' is assigned a value but never used.","'toggleRegistering' is assigned a value but never used.","'Container' is defined but never used.","'len' is assigned a value but never used.",["243"],["244"],["243"],["244"],"'useState' is defined but never used.","'Image' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'MOBILEBREAKPOINT' is assigned a value but never used.",["243"],["244"],"'form' is assigned a value but never used.",["249"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'strIndex' is assigned a value but never used.",["243"],["244"],["250"],"'copy' is already defined.","no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"251","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"258","fix":"260"},"Update the dependencies array to be: [getCars, props.userInfo]",{"range":"261","text":"262"},{"range":"263","text":"262"},"Update the dependencies array to be: [getSsts, props.match.params.carId, props.userInfo]",{"range":"264","text":"265"},"Update the dependencies array to be: [getCars, getSsts, props.userInfo]",{"range":"266","text":"267"},"Update the dependencies array to be: [props.userInfo, props.serviceLog, getCars]",{"range":"268","text":"269"},{"range":"270","text":"269"},[1378,1394],"[getCars, props.userInfo]",[1328,1344],[1301,1343],"[getSsts, props.match.params.carId, props.userInfo]",[1111,1127],"[getCars, getSsts, props.userInfo]",[1384,1418],"[props.userInfo, props.serviceLog, getCars]",[1375,1409]]