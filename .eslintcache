[{"C:\\Users\\domin\\autohub\\src\\index.js":"1","C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js":"2","C:\\Users\\domin\\autohub\\src\\components\\Home.js":"3","C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js":"4","C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js":"5","C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js":"6","C:\\Users\\domin\\autohub\\src\\components\\Login.js":"7","C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js":"8","C:\\Users\\domin\\autohub\\src\\models\\car.js":"9","C:\\Users\\domin\\autohub\\src\\controllers\\storage.js":"10","C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js":"11","C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js":"12","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js":"13","C:\\Users\\domin\\autohub\\src\\controllers\\auth.js":"14","C:\\Users\\domin\\autohub\\src\\controllers\\db.js":"15","C:\\Users\\domin\\autohub\\src\\App.js":"16","C:\\Users\\domin\\autohub\\src\\components\\CarModal.js":"17","C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js":"18","C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js":"19","C:\\Users\\domin\\autohub\\src\\models\\logOptions.js":"20","C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js":"21","C:\\Users\\domin\\autohub\\src\\models\\repairService.js":"22","C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js":"23","C:\\Users\\domin\\autohub\\src\\components\\LogFilters.js":"24","C:\\Users\\domin\\autohub\\src\\components\\UpcomingMaintenance.js":"25"},{"size":338,"mtime":1606338417443,"results":"26","hashOfConfig":"27"},{"size":7845,"mtime":1609727491487,"results":"28","hashOfConfig":"27"},{"size":7648,"mtime":1609719242589,"results":"29","hashOfConfig":"27"},{"size":16902,"mtime":1609700534214,"results":"30","hashOfConfig":"27"},{"size":539,"mtime":1606122737011,"results":"31","hashOfConfig":"27"},{"size":9936,"mtime":1609408551279,"results":"32","hashOfConfig":"27"},{"size":2397,"mtime":1606206533045,"results":"33","hashOfConfig":"27"},{"size":22419,"mtime":1609726448418,"results":"34","hashOfConfig":"27"},{"size":1936,"mtime":1609654719171,"results":"35","hashOfConfig":"27"},{"size":1576,"mtime":1609575749606,"results":"36","hashOfConfig":"27"},{"size":867,"mtime":1608752122438,"results":"37","hashOfConfig":"27"},{"size":2186,"mtime":1608367481330,"results":"38","hashOfConfig":"27"},{"size":2434,"mtime":1609828909106,"results":"39","hashOfConfig":"27"},{"size":855,"mtime":1606124166902,"results":"40","hashOfConfig":"27"},{"size":1721,"mtime":1609726413962,"results":"41","hashOfConfig":"27"},{"size":3162,"mtime":1609606013275,"results":"42","hashOfConfig":"27"},{"size":10358,"mtime":1609572903397,"results":"43","hashOfConfig":"27"},{"size":2617,"mtime":1609828957968,"results":"44","hashOfConfig":"27"},{"size":32821,"mtime":1609915436909,"results":"45","hashOfConfig":"27"},{"size":1000,"mtime":1609045158505,"results":"46","hashOfConfig":"27"},{"size":26541,"mtime":1609915473041,"results":"47","hashOfConfig":"27"},{"size":1679,"mtime":1609828966631,"results":"48","hashOfConfig":"27"},{"size":127,"mtime":1608533923889,"results":"49","hashOfConfig":"27"},{"size":9292,"mtime":1609191448838,"results":"50","hashOfConfig":"27"},{"size":10155,"mtime":1609969140924,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"8mgafs",{"filePath":"55","messages":"56","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"83"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\domin\\autohub\\src\\index.js",[],["116","117"],"C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js",["118","119","120","121","122","123","124","125","126","127","128","129","130","131","132"],"C:\\Users\\domin\\autohub\\src\\components\\Home.js",["133","134","135","136","137","138","139","140","141","142","143","144","145","146"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport CarModal from './CarModal.js';\r\nimport UpcomingMaintenance from './UpcomingMaintenance.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction Home(props) {\r\n\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[isListView, setIsListView] = useState(false); //flag to toggle the mode of displaying cars (list vs. grid)\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {showCarModal}\r\n        setShow = {setShowCarModal}\r\n        title = \"Add Car\"\r\n        car = {CARMODEL.car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Row style = {{marginTop: \"2%\"}}>\r\n        <Col lg = {7}>\r\n          <Row>\r\n            <Col xs = {6}>\r\n              <Button variant = \"outline-dark\" style = {{float: \"left\", marginRight: \"3%\"}}\r\n                onClick = {() => {setShowCarModal(true)}}\r\n              >\r\n                +\r\n              </Button>\r\n              <h4 style = {{marginTop: \"0.5%\"}}> Your Cars </h4>\r\n            </Col>\r\n            {cars.length === 0 ?\r\n              <div></div>\r\n              :\r\n              <Col xs = {6} style = {{textAlign: \"right\"}}>\r\n                <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                  onClick = {() => {setIsListView(true)}}\r\n                >\r\n                  <i class = \"fa fa-bars\"> </i> List\r\n                </Button>\r\n                <Button variant = \"light\"\r\n                  onClick = {() => {setIsListView(false)}}\r\n                >\r\n                  <i class = \"fa fa-th-large\"> </i> Grid\r\n                </Button>\r\n              </Col>\r\n            }\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any cars. Click the + button to add a car 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col xs = {3}>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Image src = \"car-holder.png\" style = {{width: \"100%\", height: \"125px\"}} />\r\n                              :\r\n                              <Image src = {car.imageUrl} style = {{width: \"100%\", height: \"125px\"}} />\r\n                            }\r\n                          </Col>\r\n                          <Col xs = {9}>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <b> {car.name} </b> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col md = {3} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img style = {{width: \"100%\", height: \"125px\"}}id = {car.carId} variant = \"top\" src = \"car-holder.png\" />\r\n                          :\r\n                          <Card.Img style = {{width: \"100%\", height: \"125px\"}} id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n          <UpcomingMaintenance\r\n            cars = {cars}\r\n            userCreated = {props.userInfo.email}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js",["147","148","149"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Image from 'react-bootstrap/Image';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Pie from 'react-chartjs-2';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport CarModal from '../components/CarModal.js';\r\nimport ScheduledLog from '../components/ScheduledLog.js';\r\nimport RepairLog from '../components/RepairLog.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction CarInfo(props) {\r\n\r\n  const[car, setCar] = useState();\r\n  const[serviceLog, setServiceLog] = useState();\r\n  const[ssts, setSsts] = useState();\r\n  const[show, setShow] = useState(false);\r\n  const[deleteShow, setDeleteShow] = useState(false);\r\n  const[deleteCarShow, setDeleteCarShow] = useState(false);\r\n  const[showEmpty, setShowEmpty] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getCar(props.match.params.carId);\r\n    getSsts();\r\n    getServiceLog(props.match.params.carId);\r\n  }, [props.match.params.carId, props.userInfo])\r\n\r\n  function getCar(carId) {\r\n    if(carId === undefined || carId === null) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"carId\", carId, \"cars\").onSnapshot(quereySnapshot => {\r\n      if(quereySnapshot.docs.length > 1 || quereySnapshot.docs[0] === undefined) {\r\n        //alert(\"Internal error. Could not find car in database.\");\r\n        setShowEmpty(true);\r\n      }\r\n      else {\r\n        setCar(quereySnapshot.docs[0].data());\r\n      }\r\n    });\r\n  }\r\n\r\n  function getServiceLog(carId) {\r\n    if(carId === undefined || carId === null) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"carReferenceId\", carId, \"serviceLogs\").onSnapshot(quereySnapshot => {\r\n      if(quereySnapshot.docs.length > 1 || quereySnapshot.docs[0] === undefined) {\r\n        //alert(\"Internal error. Could not find car's service log in database.\");\r\n        setShowEmpty(true);\r\n      }\r\n      else {\r\n        var serviceLog = quereySnapshot.docs[0].data();\r\n        if(serviceLog !== undefined) {\r\n          var len;\r\n          var repairLen = serviceLog.repairLog.length;\r\n          var scheduledLen = serviceLog.scheduledLog.length;\r\n          if(repairLen > scheduledLen) {\r\n            len = serviceLog.repairLog.length;\r\n          }\r\n          else {\r\n            len = serviceLog.scheduledLog.length;\r\n          }\r\n          /*\r\n          for(var i = 0; i < len; i++) {\r\n            if(i < repairLen && repairLen !== 0) {\r\n              serviceLog.repairLog[i].datePerformed = new Date(serviceLog.repairLog[i].datePerformed);\r\n            }\r\n            if(i < scheduledLen && scheduledLen !== 0) {\r\n              serviceLog.scheduledLog[i].datePerformed = new Date(serviceLog.scheduledLog[i].datePerformed);\r\n            }\r\n          }\r\n          */\r\n        }\r\n        setServiceLog(serviceLog);\r\n      }\r\n    });\r\n  }\r\n\r\n  function getSsts() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"scheduledServiceTypes\").onSnapshot(quereySnapshot => {\r\n      var ssts = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        ssts.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setSsts(ssts);\r\n    });\r\n  }\r\n\r\n  function resetCarImageFields() {\r\n    var copy = JSON.parse(JSON.stringify(car));\r\n    copy.imageId = \"\";\r\n    copy.imageUrl = \"\";\r\n    DB.writeOne(copy.carId, copy, \"cars\",\r\n      function(data) {\r\n        setCar(data);\r\n        setDeleteShow(false);\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setDeleteShow(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  function deleteCarImage() {\r\n    if(car === undefined) {\r\n      alert(\"Internal error. Could not delete car image\");\r\n      return;\r\n    }\r\n    STORAGE.deleteFile(car.imageUrl,\r\n      function() {\r\n        setDeleteShow(false);\r\n        if(showEmpty || deleteCarShow) {\r\n          return;\r\n        }\r\n        resetCarImageFields();\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setDeleteShow(false);\r\n        setDeleteCarShow(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  function deleteServiceLog() {\r\n    DB.deleteOne(serviceLog.logId, \"serviceLogs\",\r\n      function() {\r\n        return;\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  //deletes car and all other objects associated with it\r\n  function deleteCar() {\r\n    DB.deleteOne(car.carId, \"cars\",\r\n      function() {\r\n        removeCarFromSsts();\r\n        deleteServiceLog();\r\n        if(car.imageId.length !== 0 && car.imageUrl.length !== 0) {\r\n          deleteCarImage();\r\n        }\r\n        setDeleteCarShow(false);\r\n        setShowEmpty(true);\r\n      },\r\n      function(error) {\r\n        setDeleteCarShow(false);\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  function removeCarFromSsts() {\r\n    for(var i = 0; i < ssts.length; i++) {\r\n      var sst = ssts[i];\r\n      if(sst.carsScheduled[car.carId] !== undefined) {\r\n        delete sst.carsScheduled[car.carId];\r\n        DB.writeOne(sst.typeId, sst, \"scheduledServiceTypes\",\r\n          function() {\r\n            return;\r\n          },\r\n          function(error) {\r\n            setDeleteCarShow(false);\r\n            alert(error);\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  function calculateCostBreakdown() {\r\n    var costs = [];\r\n    var colors = [\"red\", \"green\", \"blue\", \"orange\"];\r\n    //var colors = GENERICFUNCTIONS.randomColors(4);\r\n    costs.push(Number(car.scheduledCost.partsCost));\r\n    costs.push(Number(car.scheduledCost.laborCost));\r\n    costs.push(Number(car.repairCost.partsCost));\r\n    costs.push(Number(car.repairCost.laborCost));\r\n    var data = {\r\n      datasets: [{\r\n        data: costs,\r\n        backgroundColor: colors,\r\n        hoverBackgroundColor: colors\r\n      }],\r\n      labels: [\"Scheduled Parts Cost\", \"Scheduled Labor Cost\", \"Repair Parts Cost\", \"Repair Labor Cost\"],\r\n    };\r\n    return data;\r\n  }\r\n\r\n  if(car === undefined || ssts === undefined || serviceLog === undefined || showEmpty) {\r\n    if(showEmpty) {\r\n      return (\r\n        <Container>\r\n          <br/>\r\n          <Row>\r\n            <Col style = {{textAlign: \"center\"}}>\r\n              <h5> This car does not exist 😯 </h5>\r\n            </Col>\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n            <Col style = {{textAlign: \"center\"}}>\r\n              <Button onClick = {() => {window.location.pathname = \"/\"}}>\r\n                Return home\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      <Container>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {show}\r\n        setShow = {setShow}\r\n        title = \"Edit Car\"\r\n        car = {car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Modal\r\n        show = {deleteShow}\r\n        onHide = {() => {setDeleteShow(false)}}\r\n        backdrop = \"static\"\r\n        keyboard = {false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> Delete Car Image </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Row>\r\n            <Col lg = {6} style = {{marginBottom: \"5%\"}}>\r\n              Are you sure you want to delete this image?\r\n            </Col>\r\n            <Col lg = {6} style = {{textAlign: \"center\"}}>\r\n              <Image src = {car.imageUrl} style = {{width: \"175px\", height: \"175px\"}} />\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {deleteCarImage()}}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {setDeleteShow(false)}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        show = {deleteCarShow}\r\n        onHide = {() => {setDeleteCarShow(false)}}\r\n        backdrop = \"static\"\r\n        keyboard = {false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> Delete Car </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Alert variant = \"danger\">\r\n            <Alert.Heading>\r\n              Warning\r\n            </Alert.Heading>\r\n            Are you sure you want to delete this car? (all of this car's data will be lost)\r\n          </Alert>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {deleteCar()}}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {setDeleteCarShow(false)}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <br/>\r\n      <Row>\r\n        <Col>\r\n          <Tabs defaultActiveKey = \"info\" id = {car.carId}>\r\n            <Tab eventKey = \"info\" title = \"Info\">\r\n              <br/>\r\n              <Row>\r\n                <Col md = {6} style = {{marginBottom: \"5%\"}}>\r\n                  <Row>\r\n                    <Col>\r\n                      <Row>\r\n                        <Col style = {{textAlign: \"right\"}}>\r\n                          <DropdownButton title = \"⚙️\" variant = \"outline-dark\">\r\n                            <Dropdown.Item onClick = {() => {setShow(true)}}> Edit </Dropdown.Item>\r\n                            <Dropdown.Item> Export Data </Dropdown.Item>\r\n                            <Dropdown.Item disabled = {car.imageUrl.trim().length === 0} onClick = {() => {setDeleteShow(true)}}> Delete Image </Dropdown.Item>\r\n                            <Dropdown.Item onClick = {() => {setDeleteCarShow(true)}}> Delete Car </Dropdown.Item>\r\n                          </DropdownButton>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md = {12}>\r\n                          <Row>\r\n                            <Col xl = {4} style = {{marginBottom: \"2%\", textAlign: \"center\"}}>\r\n                              {car.imageUrl.trim().length === 0 ?\r\n                                <Image src = \"/noImage.png\" style = {{width: \"175px\", height: \"175px\"}} />\r\n                                :\r\n                                <Image src = {car.imageUrl} style = {{width: \"175px\", height: \"175px\"}} />\r\n                              }\r\n                            </Col>\r\n                            <Col xl = {8}>\r\n                              <Row>\r\n                                <Col md = {12}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[0].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[0].value]}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                              <Row>\r\n                                <Col md = {12}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[1].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[1].value]}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                              <Row>\r\n                                <Col sm = {4}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[2].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[2].value]}\r\n                                  />\r\n                                </Col>\r\n                                <Col sm = {4}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[3].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[3].value]}\r\n                                  />\r\n                                </Col>\r\n                                <Col sm = {4}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[4].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[4].value]}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                            </Col>\r\n                          </Row>\r\n                        </Col>\r\n                        {CARMODEL.publicFields.map((field, index) => {\r\n                          if(index < 5) {\r\n                            return (\r\n                              <div></div>\r\n                            );\r\n                          }\r\n                          return (\r\n                            <Col md = {field.modalColSpan}>\r\n                              <div style = {{marginBottom: \"1%\"}}> {field.displayName} </div>\r\n                              <Form.Control\r\n                                as = {field.inputType === \"select\" ? \"input\" : field.inputType}\r\n                                size = \"sm\"\r\n                                readOnly\r\n                                style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                value = {car[field.value]}\r\n                              />\r\n                            </Col>\r\n                          );\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n                <Col md = {6}>\r\n                  <Card border = \"light\">\r\n                    <Card.Header> Cost Breakdown 💰 </Card.Header>\r\n                    <Card.Body>\r\n                      <Card.Text>\r\n                        <Pie\r\n                          data = {calculateCostBreakdown()}\r\n                          options = {{ maintainAspectRatio: false }}\r\n                          height = {250}\r\n                          width = {250}\r\n                        />\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </Tab>\r\n            <Tab eventKey = \"scheduled-maintenance-log\" title = \"Scheduled Log\">\r\n              <br/>\r\n              <ScheduledLog\r\n                userInfo = {props.userInfo}\r\n                serviceLog = {serviceLog}\r\n                ssts = {ssts}\r\n                car = {car}\r\n                carId = {props.match.params.carId}\r\n              />\r\n            </Tab>\r\n            <Tab eventKey = \"repair-maintenance-log\" title = \"Repair Log\">\r\n              <br/>\r\n              <RepairLog\r\n                userInfo = {props.userInfo}\r\n                serviceLog = {serviceLog}\r\n                ssts = {ssts}\r\n                car = {car}\r\n                carId = {props.match.params.carId}\r\n              />\r\n            </Tab>\r\n          </Tabs>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CarInfo;\r\n","C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js",[],["150","151"],"C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js",["152"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport SSTModal from '../components/SSTModal.js';\r\n\r\nconst SSTModel = require('../models/scheduledServiceType.js');\r\n\r\nconst DB = require('../controllers/db.js');\r\n\r\nfunction ScheduledServiceTypes(props) {\r\n\r\n  const[ssts, setSsts] = useState();\r\n  const[addShow, setAddShow] = useState(false);\r\n  const[editShow, setEditShow] = useState(false);\r\n  const[deleteShow, setDeleteShow] = useState(false);\r\n  const[sstToEdit, setSstToEdit] = useState();\r\n  const[sstToDelete, setSstToDelete] = useState();\r\n  const[cars, setCars] = useState();\r\n  const[carLookup, setCarLookup] = useState();\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n    getSsts();\r\n  }, [props.userInfo])\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n      initializeCarLookup(cars);\r\n    });\r\n  }\r\n\r\n  function initializeCarLookup(cars) {\r\n    var lookup = {};\r\n    for(var i = 0; i < cars.length; i++) {\r\n      var car = cars[i];\r\n      lookup[car.carId] = car.name;\r\n    }\r\n    setCarLookup(lookup);\r\n  }\r\n\r\n  function getSsts() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"scheduledServiceTypes\").onSnapshot(quereySnapshot => {\r\n      var ssts = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        ssts.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setSsts(ssts);\r\n    });\r\n  }\r\n\r\n  if(props.userInfo === undefined || ssts === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  function deleteSst() {\r\n    if(sstToDelete !== undefined) {\r\n      DB.deleteOne(sstToDelete.typeId, \"scheduledServiceTypes\",\r\n        function() {\r\n          handleDeleteModalClose();\r\n        },\r\n        function(error) {\r\n          alert(error);\r\n        }\r\n      )\r\n    }\r\n    else {\r\n      alert(\"Internal error. Could not delete scheduled service type\");\r\n    }\r\n  }\r\n\r\n  function handleDeleteModalClose() {\r\n    setDeleteShow(false);\r\n    setSstToDelete();\r\n  }\r\n\r\n  function isAppliedToCars(sst) {\r\n    for(var key in sst.carsScheduled) {\r\n      //if there is a car that this scheduled service type is applied to, return true\r\n      if(sst.carsScheduled[key].miles !== 0 || sst.carsScheduled[key].time.quantity !== 0 || sst.carsScheduled[key].time.units !== \"none\") {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <SSTModal\r\n        userCreated = {props.userInfo.email}\r\n        cars = {cars}\r\n        show = {addShow ? addShow : editShow ? editShow : false}\r\n        sst = {addShow ? SSTModel.scheduledServiceType : editShow ? sstToEdit : undefined}\r\n        setShow = {addShow ? setAddShow : editShow ? setEditShow : function() {setAddShow(false); setEditShow(false)}}\r\n        title = {addShow ? \"Add Scheduled Service Type\" : editShow ? \"Edit Scheduled Service Type\" : \"\"}\r\n      />\r\n      <Modal\r\n        show = {deleteShow}\r\n        onHide = {handleDeleteModalClose}\r\n        backdrop = \"static\"\r\n        keyboard = {false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> Delete Scheduled Service Type </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to delete <strong>{sstToDelete !== undefined ? \"'\" + sstToDelete.serviceName + \"'\" : \"\"}</strong>?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {deleteSst()}}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {handleDeleteModalClose()}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <br/>\r\n      <Row>\r\n        <Col>\r\n          <h4 style = {{marginTop: \"1%\"}}>\r\n            <Button variant = \"outline-dark\" style = {{marginRight: \"1%\"}}\r\n                onClick = {() => {\r\n                  setAddShow(true);\r\n                }}\r\n              >\r\n                +\r\n            </Button>\r\n            Scheduled Service Types\r\n          </h4>\r\n        </Col>\r\n      </Row>\r\n      <br/>\r\n      <Row>\r\n        <Col>\r\n        {ssts.length === 0 ?\r\n          <h6> You do not have any scheduled service types. 🛎️ </h6>\r\n          :\r\n          <Accordion>\r\n          {ssts.map((service) => {\r\n            return (\r\n              <Card>\r\n                <Card.Header>\r\n                  <Accordion.Toggle as = {Button} variant = \"light\" eventKey = {service.typeId}>\r\n                    {service.serviceName}\r\n                  </Accordion.Toggle>\r\n                  <Button size = \"sm\" variant = \"outline-dark\" style = {{float: \"right\"}}\r\n                    onClick = {() => {\r\n                      setDeleteShow(true);\r\n                      setSstToDelete(service);\r\n                    }}\r\n                  >\r\n                    🗑️\r\n                  </Button>\r\n                  <Button size = \"sm\" variant = \"outline-dark\" style = {{float: \"right\", marginRight: \"1%\"}}\r\n                    onClick = {() => {\r\n                      setEditShow(true);\r\n                      setSstToEdit(service);\r\n                    }}\r\n                  >\r\n                    ✏️\r\n                  </Button>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey = {service.typeId}>\r\n                  <Card.Body>\r\n                    {!isAppliedToCars(service) ?\r\n                      <div> This scheduled service type has not been applied to any cars </div>\r\n                    :\r\n                    <div>\r\n                      {Object.keys(service.carsScheduled).map((key) => {\r\n                        var mileValue;\r\n                        var timeValue;\r\n                        if(Number(service.carsScheduled[key].miles) > 0) {\r\n                          mileValue = \"Every \" + service.carsScheduled[key].miles;\r\n                        }\r\n                        else {\r\n                          mileValue = \"None\";\r\n                        }\r\n                        if(Number(service.carsScheduled[key].time.quantity) > 1) {\r\n                          timeValue = \"Every \" + service.carsScheduled[key].time.quantity + \" \" + service.carsScheduled[key].time.units + \"s\";\r\n                        }\r\n                        else if(Number(service.carsScheduled[key].time.quantity) === 1) {\r\n                          timeValue = \"Every \" + service.carsScheduled[key].time.quantity + \" \" + service.carsScheduled[key].time.units;\r\n                        }\r\n                        else {\r\n                          timeValue = \"None\"\r\n                        }\r\n                        if(timeValue === \"None\" && mileValue === \"None\") {\r\n                          return null;\r\n                        }\r\n                        return (\r\n                          <Row>\r\n                            <Col>\r\n                              <Row>\r\n                                <Col>\r\n                                  <Row style = {{marginBottom: \"1%\"}}>\r\n                                    <Col md = {3}>\r\n                                      <h5> {carLookup[key]} </h5>\r\n                                    </Col>\r\n                                    <Col md = {4} style = {{marginBottom: \"1%\"}}>\r\n                                      <Form.Label> 💨 Mile Interval </Form.Label>\r\n                                      <Form.Control\r\n                                        size = \"sm\"\r\n                                        as = \"input\"\r\n                                        value = {mileValue}\r\n                                        readOnly\r\n                                      />\r\n                                    </Col>\r\n                                    <Col md = {5}>\r\n                                      <Form.Label> 🕒 Time Interval </Form.Label>\r\n                                        <Form.Control\r\n                                          size = \"sm\"\r\n                                          value = {timeValue}\r\n                                          as = \"input\"\r\n                                          readOnly\r\n                                        />\r\n                                    </Col>\r\n                                  </Row>\r\n                                </Col>\r\n                              </Row>\r\n                              <Row>\r\n                                <Col>\r\n                                  <hr style = {{border: \"1px solid lightGray\"}} />\r\n                                </Col>\r\n                              </Row>\r\n                            </Col>\r\n                          </Row>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                    }\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            );\r\n          })}\r\n          </Accordion>\r\n        }\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ScheduledServiceTypes;\r\n",["153","154"],"C:\\Users\\domin\\autohub\\src\\components\\Login.js",["155","156","157"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport GoogleButton from 'react-google-button';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst AUTH = require('../controllers/auth.js');\r\n\r\nfunction Login(props) {\r\n\r\n  const[registering, toggleRegistering] = useState(false);\r\n  const[email, setEmail] = useState(\"\");\r\n  const[password, setPassword] = useState(\"\");\r\n\r\n  return (\r\n    <Container>\r\n      <Row style = {{height: \"10%\"}}>\r\n      </Row>\r\n\t\t\t<Row style = {{float: \"center\"}}>\r\n\t\t\t\t<Col></Col>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t<Card.Title\r\n\t\t\t\t\t\t\tstyle = {{textAlign: \"center\"}}\r\n\t\t\t\t\t\t>\r\n              AutoHub\r\n\t\t\t\t\t\t</Card.Title>\r\n\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t{/*TODO: add register form */}\r\n\t\t\t\t\t\t\t{!registering ?\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t{/*TODO: add email & password authentication service */}\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label> Email </Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas = \"input\"\r\n\t\t\t\t\t\t\t\t\t\t\tname = \"email\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue = {email}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange = {(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetEmail(e.target.value);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label> Password </Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\ttype = \"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tname = \"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue = {password}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange = {(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetPassword(e.target.value);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Button variant = \"secondary\"> Login </Button>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t*non-Google login in progress*\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<h5> Or </h5>\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t{/*TODO: center and make google button responsive */}\r\n\t\t\t\t\t\t\t\t\t<GoogleButton\r\n\t\t\t\t\t\t\t\t\t\ttype = \"light\"\r\n                    onClick = {props.googleSignin}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col></Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n",["158","159"],"C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js",["160","161","162","163","164"],"C:\\Users\\domin\\autohub\\src\\models\\car.js",[],["165","166"],"C:\\Users\\domin\\autohub\\src\\controllers\\storage.js",[],"C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js",[],["167","168"],"C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js",["169","170","171"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\nfunction AppNavbar() {\r\n  return (\r\n    <Navbar fluid style = {{backgroundColor: \"#A9CCE3\"}}>\r\n      <Navbar.Brand href = \"/\">\r\n        <Row>\r\n          <Col>\r\n            <h4> AutoHub </h4>\r\n          </Col>\r\n        </Row>\r\n      </Navbar.Brand>\r\n      <Nav className = \"mr-auto\">\r\n      </Nav>\r\n      <Nav className = \"justify-content-end\">\r\n        <OverlayTrigger\r\n          key = \"scheduled-service-types\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"scheduled-service-type\">\r\n              Scheduled Service Types\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}\r\n            onClick = {() => {\r\n              window.location.pathname = \"/scheduledServiceTypes\";\r\n            }}\r\n          >\r\n            🛎️\r\n          </Button>\r\n        </OverlayTrigger>\r\n        <OverlayTrigger\r\n          key = \"messages\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"message\">\r\n              Messages\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}>\r\n            ✉️\r\n          </Button>\r\n        </OverlayTrigger>\r\n        <OverlayTrigger\r\n          key = \"profile\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"my-profile\">\r\n              Profile\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}>\r\n            👤\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default AppNavbar;\r\n","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\auth.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\db.js",[],"C:\\Users\\domin\\autohub\\src\\App.js",["172","173","174"],"C:\\Users\\domin\\autohub\\src\\components\\CarModal.js",["175","176"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst LOGMODEL = require('../models/serviceLog.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction CarModal(props) {\r\n\r\n  const[isLoading, setIsLoading] = useState(false); //flag to toggle spinner\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[car, setNewCar] = useState(); //state object for creating a new car\r\n  const[carImage, setCarImage] = useState(); //temp holder for car image upload\r\n  const[carModalFormValidated, setCarModalFormValidated] = useState(false); //flag to toggle form validation of the car modal\r\n  const[title, setTitle] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewCar(props.car);\r\n    setShowCarModal(props.show);\r\n    setTitle(props.title);\r\n  }, [props.show, props.title, props.car])\r\n\r\n  //adds a car to the cars db collectionName\r\n  function saveCar() {\r\n    if(props.userInfo === undefined) {\r\n      //TODO: handle this error more elegantly\r\n      alert(\"User data undefined. Cannot add new car\");\r\n      setCarModalFormValidated(false);\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    var userCreated = props.userInfo.email;\r\n    var isNew = false;\r\n    if(car.carId.trim().length === 0) {\r\n      car.carId = GENERICFUNCTIONS.generateId();\r\n      isNew = true;\r\n    }\r\n    car.userCreated = userCreated;\r\n    if(carImage !== undefined) {\r\n      var extension = carImage.name.split('.').pop();\r\n      var imageId = GENERICFUNCTIONS.generateId();\r\n      var fileType = carImage.type;\r\n      var prevImageUrl = \"\";\r\n      if(car.imageUrl.trim().length !== 0) {\r\n        prevImageUrl = car.imageUrl;\r\n      }\r\n      car.imageId = imageId;\r\n      var renamedFile = new File([carImage], imageId + \".\" + extension, {\r\n        type: fileType\r\n      });\r\n      STORAGE.uploadFile(renamedFile, \"images/\"+props.userInfo.uid+\"/\"+carImage.name, prevImageUrl,\r\n        function(url) {\r\n          car.imageUrl = url;\r\n          DB.writeOne(car.carId, car, \"cars\",\r\n            function() {\r\n              if(isNew) {\r\n                saveNewServiceLog(car.carId);\r\n              }\r\n              else {\r\n                handleCarModalClose();\r\n              }\r\n            },\r\n            function(error) {\r\n              //TODO: handle this error more elegantly\r\n              alert(error.toString());\r\n              setIsLoading(false);\r\n            }\r\n          );\r\n        }\r\n      );\r\n    }\r\n    else {\r\n      DB.writeOne(car.carId, car, \"cars\",\r\n        function() {\r\n          if(isNew) {\r\n            saveNewServiceLog(car.carId);\r\n          }\r\n          else {\r\n            handleCarModalClose();\r\n          }\r\n        },\r\n        function(error) {\r\n          //TODO: handle this error more elegantly\r\n          alert(error.toString());\r\n          setIsLoading(false);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  function saveNewServiceLog(carId) {\r\n    var serviceLog = JSON.parse(JSON.stringify(LOGMODEL.serviceLog));\r\n    serviceLog.userCreated = props.userInfo.email;\r\n    serviceLog.logId = GENERICFUNCTIONS.generateId();\r\n    serviceLog.carReferenceId = carId;\r\n    DB.writeOne(serviceLog.logId, serviceLog, \"serviceLogs\",\r\n      function() {\r\n        handleCarModalClose();\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setIsLoading(false);\r\n      });\r\n  }\r\n\r\n  //function to handle car modal closing\r\n  function handleCarModalClose() {\r\n    setIsLoading(false);\r\n    props.setShow(false);\r\n    setNewCar(CARMODEL.car);\r\n    setCarImage();\r\n    setShowCarModal(false);\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //function to handle adding values to car\r\n  function onChangeNewCar(e, type) {\r\n    var carCopy = JSON.parse(JSON.stringify(car));\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    if(type === \"number\" && isNaN(value)) {\r\n      return;\r\n    }\r\n    carCopy[name] = value;\r\n    setNewCar(carCopy);\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //handle submit for car modal form\r\n  function handleCarModalSubmit(e) {\r\n    setCarModalFormValidated(true);\r\n    if(checkNewCarFields() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    else {\r\n      saveCar();\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  //check if required fields have been filled\r\n  function checkNewCarFields() {\r\n    var isValid = true;\r\n    for(var i = 0; i < CARMODEL.publicFields.length; i++) {\r\n      var field = CARMODEL.publicFields[i];\r\n      if(field.required && car[field.value].toString().trim().length === 0) {\r\n        car[field.value] = \"\";\r\n        isValid = false;\r\n      }\r\n      if(field.type === \"number\") {\r\n        car[field.value] = Number(car[field.value].toString().trim());\r\n      }\r\n      else {\r\n        car[field.value] = car[field.value].trim();\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  if(car === undefined) {\r\n    return <div></div>;\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show = {showCarModal}\r\n      onHide = {handleCarModalClose}\r\n      backdrop = \"static\"\r\n      keyboard = {false}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title> {title} </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form noValidate validated = {carModalFormValidated} onSubmit = {handleCarModalSubmit}>\r\n          <Row style = {{marginLeft: \"3%\", marginRight: \"3%\"}}>\r\n            {CARMODEL.publicFields.map((field) => {\r\n              if(field.inputType === \"input\") {\r\n                return (\r\n                    <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                      <Form.Label> {field.displayName} </Form.Label>\r\n                      <Form.Control\r\n                        required = {field.required}\r\n                        as = {field.inputType}\r\n                        name = {field.value}\r\n                        value = {car[field.value]}\r\n                        onChange = {(e) => {\r\n                          onChangeNewCar(e, field.type);\r\n                        }}\r\n                      />\r\n                      <Form.Control.Feedback type = \"invalid\">\r\n                        Required\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                );\r\n              }\r\n              else if(field.inputType === \"select\") {\r\n                console.log(car);\r\n                return (\r\n                    <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                      <Form.Label> {field.displayName} </Form.Label>\r\n                      <Form.Control\r\n                        required = {field.required}\r\n                        as = {field.inputType}\r\n                        name = {field.value}\r\n                        onChange = {(e) => {\r\n                          onChangeNewCar(e, field.type);\r\n                        }}\r\n                      >\r\n                        {car.year.trim().length === 0 ?\r\n                          <option value = \"\" selected disabled hidden> Select </option>\r\n                          :\r\n                          <div></div>\r\n                        }\r\n                        {field.modalSelectData.map((data) => {\r\n                          if(data === Number(car.year)) {\r\n                            return (\r\n                              <option value = {data} selected> {data} </option>\r\n                            )\r\n                          }\r\n                          return (\r\n                            <option value = {data}> {data} </option>\r\n                          );\r\n                        })}\r\n                      </Form.Control>\r\n                      <Form.Control.Feedback type = \"invalid\">\r\n                        Required\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                    <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                      <Form.Label> {field.displayName} </Form.Label>\r\n                      <Form.Control\r\n                        required = {field.required}\r\n                        as = {field.inputType}\r\n                        name = {field.value}\r\n                        value = {car[field.value]}\r\n                        onChange = {(e) => {\r\n                          onChangeNewCar(e, field.type);\r\n                        }}\r\n                      />\r\n                    </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form>\r\n                <Form.Group>\r\n                  <Form.Label> Image </Form.Label>\r\n                  <Form.File\r\n                    id = \"image\"\r\n                    onChange = {(e) => {\r\n                      var carCopy = JSON.parse(JSON.stringify(car));\r\n                      var file = e.target.files[0];\r\n                      if(file) {\r\n                        setCarImage(file);\r\n                        setNewCar(carCopy);\r\n                      }\r\n                      else {\r\n                        setCarImage();\r\n                        carCopy.imageId = \"\";\r\n                        setNewCar(carCopy);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Form.Group>\r\n              </Form>\r\n            </Col>\r\n            <Col>\r\n              <Button type = \"submit\" variant = \"success\" disabled = {isLoading} style = {{float: \"right\", marginTop: \"10%\"}}>\r\n                {isLoading ?\r\n                  <Spinner animation = \"border\" size = \"sm\" status = \"role\"/>\r\n                  :\r\n                  <div></div>\r\n                }\r\n                Save\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CarModal;\r\n","C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js",[],"C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js",["177","178","179","180","181","182","183","184","185","186","187","188","189"],"C:\\Users\\domin\\autohub\\src\\models\\logOptions.js",[],["190","191"],"C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js",["192","193","194","195","196","197","198","199","200","201","202","203","204"],"C:\\Users\\domin\\autohub\\src\\models\\repairService.js",[],"C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js",[],"C:\\Users\\domin\\autohub\\src\\components\\LogFilters.js",["205","206","207","208","209","210","211","212"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport DatePicker from \"react-datepicker\";\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst LOGMODEL = require('../models/logOptions.js');\r\n\r\nfunction LogFilters(props) {\r\n\r\n  const[selectedFilters, setSelectedFilters] = useState([]);\r\n  const[filterValues, setFilterValues] = useState(LOGMODEL.filterValues);\r\n\r\n  const[startDate, setStartDate] = useState(null);\r\n  const[endDate, setEndDate] = useState(null);\r\n\r\n  const[startMileage, setStartMileage] = useState(0);\r\n  const[endMileage, setEndMileage] = useState(0);\r\n\r\n  const[serviceName, setServiceName] = useState(\"\");\r\n  const[names, setNames] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(props.serviceNames !== undefined) {\r\n      setNames(props.serviceNames);\r\n    }\r\n  }, [props.serviceNames]);\r\n\r\n  function isInDateRange(date) {\r\n    if(startDate === null || startDate === undefined || endDate === null || endDate === undefined) {\r\n      return false;\r\n    }\r\n    var time = date.getTime();\r\n    if(startDate.getTime() <= time && time <= endDate.getTime()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function isInMileageRange(mileage) {\r\n    if(startMileage === undefined || endMileage === undefined) {\r\n      return false;\r\n    }\r\n    if(startMileage <= mileage && mileage <= endMileage) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function isSameServiceName(name) {\r\n    if(name.trim() === serviceName.trim()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //TODO: make this dynamic based off the model\r\n  function renderFilterOptions() {\r\n    return (\r\n      <Row>\r\n        <Col>\r\n          <Row style = {{marginBottom: \"2%\"}}>\r\n            <Col style = {{textAlign: \"left\"}}>\r\n              <div> <strong> Date </strong> </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm = {6}>\r\n              <DatePicker\r\n                placeholderText = \"Start\"\r\n                selected = {typeof(filterValues.startDate) === \"string\" ? new Date(filterValues.startDate) : filterValues.startDate}\r\n                onChange = {(date) => {\r\n                  var values = JSON.parse(JSON.stringify(filterValues));\r\n                  var filters = selectedFilters.slice();\r\n                  values.startDate = date;\r\n                  setFilterValues(values);\r\n                  if(values.startDate === null && values.endDate === null) {\r\n                    if(filters.includes(\"date\")) {\r\n                      filters.splice(filters.indexOf(\"date\"), 1);\r\n                    }\r\n                  }\r\n                  else if(!filters.includes(\"date\")) {\r\n                    filters.push(\"date\");\r\n                  }\r\n                  setSelectedFilters(filters);\r\n                }}\r\n                customInput = {\r\n                  <Form.Control\r\n                    as = \"input\"\r\n                    size = \"sm\"\r\n                  />\r\n                }\r\n              />\r\n            </Col>\r\n            <Col sm = {6}>\r\n              <DatePicker\r\n                placeholderText = \"End\"\r\n                selected = {typeof(filterValues.endDate) === \"string\" ? new Date(filterValues.endDate) : filterValues.endDate}\r\n                onChange = {(date) => {\r\n                  var values = JSON.parse(JSON.stringify(filterValues));\r\n                  var filters = selectedFilters.slice();\r\n                  values.endDate = date;\r\n                  setFilterValues(values);\r\n                  if(values.startDate === null && values.endDate === null) {\r\n                    if(filters.includes(\"date\")) {\r\n                      filters.splice(filters.indexOf(\"date\"), 1);\r\n                    }\r\n                  }\r\n                  else if(!filters.includes(\"date\")) {\r\n                    filters.push(\"date\");\r\n                  }\r\n                  setSelectedFilters(filters);\r\n                }}\r\n                customInput = {\r\n                  <Form.Control\r\n                    as = \"input\"\r\n                    size = \"sm\"\r\n                  />\r\n                }\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <br style = {{height: \"50%\"}} />\r\n          <Row style = {{marginBottom: \"2%\"}}>\r\n            <Col style = {{textAlign: \"left\"}}>\r\n              <div> <strong> Mileage </strong> </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm = {6}>\r\n              <Form.Control\r\n                placeholder = \"Start\"\r\n                as = \"input\"\r\n                size = \"sm\"\r\n                value = {filterValues.startMileage}\r\n                onChange = {(e) => {\r\n                  if(!isNaN(e.target.value)) {\r\n                    var values = JSON.parse(JSON.stringify(filterValues));\r\n                    var filters = selectedFilters.slice();\r\n                    values.startMileage = e.target.value;\r\n                    setFilterValues(values);\r\n                    if(values.startMileage.trim().length === 0 && values.endMileage.trim().length === 0) {\r\n                      if(filters.includes(\"mileage\")) {\r\n                        filters.splice(filters.indexOf(\"mileage\"), 1);\r\n                      }\r\n                    }\r\n                    else if(!filters.includes(\"mileage\")) {\r\n                      filters.push(\"mileage\");\r\n                    }\r\n                    setSelectedFilters(filters);\r\n                  }\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col sm = {6}>\r\n              <Form.Control\r\n                placeholder = \"End\"\r\n                as = \"input\"\r\n                size = \"sm\"\r\n                value = {filterValues.endMileage}\r\n                onChange = {(e) => {\r\n                  if(!isNaN(e.target.value)) {\r\n                    var values = JSON.parse(JSON.stringify(filterValues));\r\n                    var filters = selectedFilters.slice();\r\n                    values.endMileage = e.target.value;\r\n                    setFilterValues(values);\r\n                    if(values.startMileage.trim().length === 0 && values.endMileage.trim().length === 0) {\r\n                      if(filters.includes(\"mileage\")) {\r\n                        filters.splice(filters.indexOf(\"mileage\"), 1);\r\n                      }\r\n                    }\r\n                    else if(!filters.includes(\"mileage\")) {\r\n                      filters.push(\"mileage\");\r\n                    }\r\n                    setSelectedFilters(filters);\r\n                  }\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <br style = {{height: \"50%\"}} />\r\n          <Row>\r\n            <Col>\r\n            <Row style = {{marginBottom: \"2%\"}}>\r\n              <Col style = {{textAlign: \"left\"}}>\r\n                <div> <strong> Service Name </strong> </div>\r\n              </Col>\r\n            </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Control\r\n                    placeholder = \"e.g. Oil Change\"\r\n                    as = \"input\"\r\n                    size = \"sm\"\r\n                    name = \"serviceName\"\r\n                    value = {filterValues.serviceName}\r\n                    onChange = {(e) => {\r\n                      var values = JSON.parse(JSON.stringify(filterValues));\r\n                      var filters = selectedFilters.slice();\r\n                      values.serviceName = e.target.value;\r\n                      setFilterValues(values);\r\n                      if(values.serviceName.trim().length === 0) {\r\n                        if(filters.includes(\"serviceName\")) {\r\n                          filters.splice(filters.indexOf(\"serviceName\"), 1);\r\n                        }\r\n                      }\r\n                      else if(!filters.includes(\"serviceName\")) {\r\n                        filters.push(\"serviceName\");\r\n                      }\r\n                      setSelectedFilters(filters);\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <br style = {{height: \"50%\"}} />\r\n              <Row>\r\n                <Col>\r\n                  {names.map((name) => {\r\n                    return (\r\n                      <ListGroup flush>\r\n                        <ListGroup.Item> {name} </ListGroup.Item>\r\n                      </ListGroup>\r\n                    );\r\n                  })}\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col style = {{textAlign: \"right\"}}>\r\n              <Button variant = \"success\" size = \"sm\"\r\n                onClick = {() => {\r\n                  props.applyFilters(selectedFilters, filterValues);\r\n                  props.toggleFiltering(selectedFilters);\r\n                }}\r\n              >\r\n                Apply\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style = {{margin: \"2%\"}}>\r\n      <Row>\r\n        <Col>\r\n          {renderFilterOptions()}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LogFilters;\r\n","C:\\Users\\domin\\autohub\\src\\components\\UpcomingMaintenance.js",["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229"],{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","severity":1,"message":"235","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":12},{"ruleId":"234","severity":1,"message":"238","line":11,"column":8,"nodeType":"236","messageId":"237","endLine":11,"endColumn":22},{"ruleId":"234","severity":1,"message":"239","line":12,"column":8,"nodeType":"236","messageId":"237","endLine":12,"endColumn":16},{"ruleId":"234","severity":1,"message":"240","line":13,"column":8,"nodeType":"236","messageId":"237","endLine":13,"endColumn":13},{"ruleId":"234","severity":1,"message":"241","line":17,"column":8,"nodeType":"236","messageId":"237","endLine":17,"endColumn":14},{"ruleId":"234","severity":1,"message":"242","line":19,"column":16,"nodeType":"236","messageId":"237","endLine":19,"endColumn":22},{"ruleId":"234","severity":1,"message":"243","line":26,"column":7,"nodeType":"236","messageId":"237","endLine":26,"endColumn":14},{"ruleId":"234","severity":1,"message":"244","line":27,"column":7,"nodeType":"236","messageId":"237","endLine":27,"endColumn":23},{"ruleId":"245","severity":1,"message":"246","line":37,"column":6,"nodeType":"247","endLine":37,"endColumn":22,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":121,"column":21,"nodeType":"236","messageId":"251","endLine":121,"endColumn":26},{"ruleId":"252","severity":1,"message":"253","line":129,"column":65,"nodeType":"254","messageId":"255","endLine":129,"endColumn":66},{"ruleId":"252","severity":1,"message":"253","line":148,"column":53,"nodeType":"254","messageId":"255","endLine":148,"endColumn":54},{"ruleId":"256","severity":1,"message":"257","line":166,"column":21,"nodeType":"258","endLine":170,"endColumn":22},{"ruleId":"252","severity":1,"message":"253","line":168,"column":63,"nodeType":"254","messageId":"255","endLine":168,"endColumn":64},{"ruleId":"252","severity":1,"message":"253","line":185,"column":51,"nodeType":"254","messageId":"255","endLine":185,"endColumn":52},{"ruleId":"234","severity":1,"message":"235","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":12},{"ruleId":"234","severity":1,"message":"238","line":11,"column":8,"nodeType":"236","messageId":"237","endLine":11,"endColumn":22},{"ruleId":"234","severity":1,"message":"239","line":12,"column":8,"nodeType":"236","messageId":"237","endLine":12,"endColumn":16},{"ruleId":"234","severity":1,"message":"240","line":13,"column":8,"nodeType":"236","messageId":"237","endLine":13,"endColumn":13},{"ruleId":"234","severity":1,"message":"242","line":18,"column":16,"nodeType":"236","messageId":"237","endLine":18,"endColumn":22},{"ruleId":"234","severity":1,"message":"243","line":24,"column":7,"nodeType":"236","messageId":"237","endLine":24,"endColumn":14},{"ruleId":"234","severity":1,"message":"244","line":26,"column":7,"nodeType":"236","messageId":"237","endLine":26,"endColumn":23},{"ruleId":"245","severity":1,"message":"246","line":36,"column":6,"nodeType":"247","endLine":36,"endColumn":22,"suggestions":"259"},{"ruleId":"249","severity":1,"message":"250","line":114,"column":21,"nodeType":"236","messageId":"251","endLine":114,"endColumn":26},{"ruleId":"252","severity":1,"message":"253","line":122,"column":65,"nodeType":"254","messageId":"255","endLine":122,"endColumn":66},{"ruleId":"252","severity":1,"message":"253","line":141,"column":53,"nodeType":"254","messageId":"255","endLine":141,"endColumn":54},{"ruleId":"256","severity":1,"message":"257","line":159,"column":21,"nodeType":"258","endLine":163,"endColumn":22},{"ruleId":"252","severity":1,"message":"253","line":161,"column":63,"nodeType":"254","messageId":"255","endLine":161,"endColumn":64},{"ruleId":"252","severity":1,"message":"253","line":178,"column":51,"nodeType":"254","messageId":"255","endLine":178,"endColumn":52},{"ruleId":"234","severity":1,"message":"244","line":26,"column":7,"nodeType":"236","messageId":"237","endLine":26,"endColumn":23},{"ruleId":"245","severity":1,"message":"260","line":42,"column":6,"nodeType":"247","endLine":42,"endColumn":48,"suggestions":"261"},{"ruleId":"234","severity":1,"message":"262","line":78,"column":13,"nodeType":"236","messageId":"237","endLine":78,"endColumn":16},{"ruleId":"230","replacedBy":"263"},{"ruleId":"232","replacedBy":"264"},{"ruleId":"245","severity":1,"message":"265","line":33,"column":6,"nodeType":"247","endLine":33,"endColumn":22,"suggestions":"266"},{"ruleId":"230","replacedBy":"267"},{"ruleId":"232","replacedBy":"268"},{"ruleId":"234","severity":1,"message":"269","line":1,"column":27,"nodeType":"236","messageId":"237","endLine":1,"endColumn":36},{"ruleId":"234","severity":1,"message":"270","line":11,"column":7,"nodeType":"236","messageId":"237","endLine":11,"endColumn":11},{"ruleId":"234","severity":1,"message":"271","line":15,"column":22,"nodeType":"236","messageId":"237","endLine":15,"endColumn":39},{"ruleId":"230","replacedBy":"272"},{"ruleId":"232","replacedBy":"273"},{"ruleId":"234","severity":1,"message":"274","line":5,"column":8,"nodeType":"236","messageId":"237","endLine":5,"endColumn":17},{"ruleId":"234","severity":1,"message":"262","line":42,"column":9,"nodeType":"236","messageId":"237","endLine":42,"endColumn":12},{"ruleId":"234","severity":1,"message":"262","line":115,"column":9,"nodeType":"236","messageId":"237","endLine":115,"endColumn":12},{"ruleId":"234","severity":1,"message":"262","line":125,"column":9,"nodeType":"236","messageId":"237","endLine":125,"endColumn":12},{"ruleId":"249","severity":1,"message":"275","line":190,"column":17,"nodeType":"236","messageId":"251","endLine":190,"endColumn":18},{"ruleId":"230","replacedBy":"276"},{"ruleId":"232","replacedBy":"277"},{"ruleId":"230","replacedBy":"278"},{"ruleId":"232","replacedBy":"279"},{"ruleId":"234","severity":1,"message":"280","line":1,"column":17,"nodeType":"236","messageId":"237","endLine":1,"endColumn":25},{"ruleId":"234","severity":1,"message":"269","line":1,"column":27,"nodeType":"236","messageId":"237","endLine":1,"endColumn":36},{"ruleId":"234","severity":1,"message":"281","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":13},{"ruleId":"234","severity":1,"message":"282","line":7,"column":8,"nodeType":"236","messageId":"237","endLine":7,"endColumn":11},{"ruleId":"234","severity":1,"message":"283","line":8,"column":8,"nodeType":"236","messageId":"237","endLine":8,"endColumn":11},{"ruleId":"234","severity":1,"message":"284","line":19,"column":7,"nodeType":"236","messageId":"237","endLine":19,"endColumn":23},{"ruleId":"234","severity":1,"message":"274","line":5,"column":8,"nodeType":"236","messageId":"237","endLine":5,"endColumn":17},{"ruleId":"234","severity":1,"message":"242","line":9,"column":16,"nodeType":"236","messageId":"237","endLine":9,"endColumn":22},{"ruleId":"234","severity":1,"message":"239","line":12,"column":8,"nodeType":"236","messageId":"237","endLine":12,"endColumn":16},{"ruleId":"234","severity":1,"message":"242","line":14,"column":16,"nodeType":"236","messageId":"237","endLine":14,"endColumn":22},{"ruleId":"234","severity":1,"message":"285","line":19,"column":8,"nodeType":"236","messageId":"237","endLine":19,"endColumn":22},{"ruleId":"245","severity":1,"message":"246","line":50,"column":6,"nodeType":"247","endLine":50,"endColumn":40,"suggestions":"286"},{"ruleId":"287","severity":1,"message":"288","line":257,"column":40,"nodeType":"289","messageId":"290","endLine":258,"endColumn":235},{"ruleId":"287","severity":1,"message":"291","line":261,"column":40,"nodeType":"289","messageId":"290","endLine":262,"endColumn":175},{"ruleId":"287","severity":1,"message":"292","line":272,"column":38,"nodeType":"289","messageId":"290","endLine":272,"endColumn":91},{"ruleId":"293","severity":1,"message":"294","line":399,"column":17,"nodeType":"295","endLine":399,"endColumn":42},{"ruleId":"293","severity":1,"message":"294","line":420,"column":17,"nodeType":"295","endLine":420,"endColumn":42},{"ruleId":"296","severity":1,"message":"297","line":487,"column":53,"nodeType":"289","messageId":"298","endLine":487,"endColumn":55},{"ruleId":"234","severity":1,"message":"299","line":557,"column":31,"nodeType":"236","messageId":"237","endLine":557,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":683,"column":53,"nodeType":"289","messageId":"298","endLine":683,"endColumn":55},{"ruleId":"234","severity":1,"message":"300","line":767,"column":35,"nodeType":"236","messageId":"237","endLine":767,"endColumn":43},{"ruleId":"230","replacedBy":"301"},{"ruleId":"232","replacedBy":"302"},{"ruleId":"234","severity":1,"message":"239","line":12,"column":8,"nodeType":"236","messageId":"237","endLine":12,"endColumn":16},{"ruleId":"234","severity":1,"message":"242","line":14,"column":16,"nodeType":"236","messageId":"237","endLine":14,"endColumn":22},{"ruleId":"234","severity":1,"message":"285","line":19,"column":8,"nodeType":"236","messageId":"237","endLine":19,"endColumn":22},{"ruleId":"245","severity":1,"message":"246","line":50,"column":6,"nodeType":"247","endLine":50,"endColumn":40,"suggestions":"303"},{"ruleId":"249","severity":1,"message":"304","line":74,"column":9,"nodeType":"236","messageId":"251","endLine":74,"endColumn":13},{"ruleId":"287","severity":1,"message":"288","line":186,"column":40,"nodeType":"289","messageId":"290","endLine":187,"endColumn":235},{"ruleId":"287","severity":1,"message":"291","line":190,"column":40,"nodeType":"289","messageId":"290","endLine":191,"endColumn":175},{"ruleId":"287","severity":1,"message":"292","line":201,"column":38,"nodeType":"289","messageId":"290","endLine":201,"endColumn":91},{"ruleId":"293","severity":1,"message":"294","line":328,"column":17,"nodeType":"295","endLine":328,"endColumn":42},{"ruleId":"293","severity":1,"message":"294","line":349,"column":17,"nodeType":"295","endLine":349,"endColumn":42},{"ruleId":"296","severity":1,"message":"297","line":402,"column":53,"nodeType":"289","messageId":"298","endLine":402,"endColumn":55},{"ruleId":"234","severity":1,"message":"299","line":446,"column":31,"nodeType":"236","messageId":"237","endLine":446,"endColumn":38},{"ruleId":"296","severity":1,"message":"297","line":569,"column":53,"nodeType":"289","messageId":"298","endLine":569,"endColumn":55},{"ruleId":"234","severity":1,"message":"305","line":19,"column":20,"nodeType":"236","messageId":"237","endLine":19,"endColumn":32},{"ruleId":"234","severity":1,"message":"306","line":20,"column":18,"nodeType":"236","messageId":"237","endLine":20,"endColumn":28},{"ruleId":"234","severity":1,"message":"307","line":22,"column":23,"nodeType":"236","messageId":"237","endLine":22,"endColumn":38},{"ruleId":"234","severity":1,"message":"308","line":23,"column":21,"nodeType":"236","messageId":"237","endLine":23,"endColumn":34},{"ruleId":"234","severity":1,"message":"309","line":25,"column":22,"nodeType":"236","messageId":"237","endLine":25,"endColumn":36},{"ruleId":"234","severity":1,"message":"310","line":34,"column":12,"nodeType":"236","messageId":"237","endLine":34,"endColumn":25},{"ruleId":"234","severity":1,"message":"311","line":45,"column":12,"nodeType":"236","messageId":"237","endLine":45,"endColumn":28},{"ruleId":"234","severity":1,"message":"312","line":55,"column":12,"nodeType":"236","messageId":"237","endLine":55,"endColumn":29},{"ruleId":"234","severity":1,"message":"313","line":8,"column":8,"nodeType":"236","messageId":"237","endLine":8,"endColumn":17},{"ruleId":"234","severity":1,"message":"314","line":10,"column":8,"nodeType":"236","messageId":"237","endLine":10,"endColumn":16},{"ruleId":"234","severity":1,"message":"315","line":19,"column":9,"nodeType":"236","messageId":"237","endLine":19,"endColumn":19},{"ruleId":"234","severity":1,"message":"316","line":19,"column":21,"nodeType":"236","messageId":"237","endLine":19,"endColumn":34},{"ruleId":"245","severity":1,"message":"317","line":24,"column":6,"nodeType":"247","endLine":24,"endColumn":18,"suggestions":"318"},{"ruleId":"249","severity":1,"message":"275","line":87,"column":13,"nodeType":"236","messageId":"251","endLine":87,"endColumn":14},{"ruleId":"319","severity":1,"message":"320","line":99,"column":37,"nodeType":"321","messageId":"322","endLine":99,"endColumn":39},{"ruleId":"319","severity":1,"message":"320","line":99,"column":112,"nodeType":"321","messageId":"322","endLine":99,"endColumn":114},{"ruleId":"319","severity":1,"message":"323","line":99,"column":112,"nodeType":"321","messageId":"322","endLine":99,"endColumn":114},{"ruleId":"319","severity":1,"message":"323","line":99,"column":142,"nodeType":"321","messageId":"322","endLine":99,"endColumn":144},{"ruleId":"249","severity":1,"message":"275","line":116,"column":13,"nodeType":"236","messageId":"251","endLine":116,"endColumn":14},{"ruleId":"319","severity":1,"message":"320","line":128,"column":37,"nodeType":"321","messageId":"322","endLine":128,"endColumn":39},{"ruleId":"319","severity":1,"message":"320","line":128,"column":113,"nodeType":"321","messageId":"322","endLine":128,"endColumn":115},{"ruleId":"319","severity":1,"message":"323","line":128,"column":113,"nodeType":"321","messageId":"322","endLine":128,"endColumn":115},{"ruleId":"319","severity":1,"message":"323","line":128,"column":143,"nodeType":"321","messageId":"322","endLine":128,"endColumn":145},{"ruleId":"234","severity":1,"message":"324","line":148,"column":9,"nodeType":"236","messageId":"237","endLine":148,"endColumn":20},{"ruleId":"234","severity":1,"message":"325","line":149,"column":9,"nodeType":"236","messageId":"237","endLine":149,"endColumn":14},"no-native-reassign",["326"],"no-negated-in-lhs",["327"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'Modal' is defined but never used.","'Figure' is defined but never used.","'uuidv4' is defined but never used.","'STORAGE' is assigned a value but never used.","'GENERICFUNCTIONS' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCars'. Either include it or remove the dependency array.","ArrayExpression",["328"],"no-redeclare","'style' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["329"],"React Hook useEffect has a missing dependency: 'getSsts'. Either include it or remove the dependency array.",["330"],"'len' is assigned a value but never used.",["326"],["327"],"React Hook useEffect has missing dependencies: 'getCars' and 'getSsts'. Either include them or remove the dependency array.",["331"],["326"],["327"],"'useEffect' is defined but never used.","'AUTH' is assigned a value but never used.","'toggleRegistering' is assigned a value but never used.",["326"],["327"],"'Container' is defined but never used.","'i' is already defined.",["326"],["327"],["326"],["327"],"'useState' is defined but never used.","'Image' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'MOBILEBREAKPOINT' is assigned a value but never used.","'OverlayTrigger' is defined but never used.",["332"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'option', 'option'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'option', 'filter', 'filter', 'option'.","Function declared in a loop contains unsafe references to variable(s) 'filter', 'filter'.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'popover' is assigned a value but never used.","'strIndex' is assigned a value but never used.",["326"],["327"],["333"],"'copy' is already defined.","'setStartDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.","'setStartMileage' is assigned a value but never used.","'setEndMileage' is assigned a value but never used.","'setServiceName' is assigned a value but never used.","'isInDateRange' is defined but never used.","'isInMileageRange' is defined but never used.","'isSameServiceName' is defined but never used.","'ListGroup' is defined but never used.","'Calendar' is defined but never used.","'isCalendar' is assigned a value but never used.","'setIsCalendar' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getServiceLogs'. Either include it or remove the dependency array.",["334"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'currMileage' is assigned a value but never used.","'today' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"335","fix":"336"},{"desc":"335","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"342","fix":"344"},{"desc":"345","fix":"346"},"Update the dependencies array to be: [getCars, props.userInfo]",{"range":"347","text":"348"},{"range":"349","text":"348"},"Update the dependencies array to be: [getSsts, props.match.params.carId, props.userInfo]",{"range":"350","text":"351"},"Update the dependencies array to be: [getCars, getSsts, props.userInfo]",{"range":"352","text":"353"},"Update the dependencies array to be: [props.userInfo, props.serviceLog, getCars]",{"range":"354","text":"355"},{"range":"356","text":"355"},"Update the dependencies array to be: [getServiceLogs, props.cars]",{"range":"357","text":"358"},[1439,1455],"[getCars, props.userInfo]",[1389,1405],[1610,1652],"[getSsts, props.match.params.carId, props.userInfo]",[1111,1127],"[getCars, getSsts, props.userInfo]",[2028,2062],"[props.userInfo, props.serviceLog, getCars]",[2019,2053],[773,785],"[getServiceLogs, props.cars]"]