[{"C:\\Users\\domin\\autohub\\src\\index.js":"1","C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js":"2","C:\\Users\\domin\\autohub\\src\\components\\Home.js":"3","C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js":"4","C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js":"5","C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js":"6","C:\\Users\\domin\\autohub\\src\\components\\Login.js":"7","C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js":"8","C:\\Users\\domin\\autohub\\src\\models\\car.js":"9","C:\\Users\\domin\\autohub\\src\\controllers\\storage.js":"10","C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js":"11","C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js":"12","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js":"13","C:\\Users\\domin\\autohub\\src\\controllers\\auth.js":"14","C:\\Users\\domin\\autohub\\src\\controllers\\db.js":"15","C:\\Users\\domin\\autohub\\src\\App.js":"16","C:\\Users\\domin\\autohub\\src\\components\\CarModal.js":"17","C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js":"18","C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js":"19","C:\\Users\\domin\\autohub\\src\\models\\logOptions.js":"20","C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js":"21","C:\\Users\\domin\\autohub\\src\\models\\repairService.js":"22","C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js":"23","C:\\Users\\domin\\autohub\\src\\components\\LogFilters.js":"24"},{"size":338,"mtime":1606338417443,"results":"25","hashOfConfig":"26"},{"size":7995,"mtime":1608345883915,"results":"27","hashOfConfig":"26"},{"size":8139,"mtime":1608345144912,"results":"28","hashOfConfig":"26"},{"size":12337,"mtime":1609406365080,"results":"29","hashOfConfig":"26"},{"size":539,"mtime":1606122737011,"results":"30","hashOfConfig":"26"},{"size":9936,"mtime":1609408551279,"results":"31","hashOfConfig":"26"},{"size":2397,"mtime":1606206533045,"results":"32","hashOfConfig":"26"},{"size":21549,"mtime":1609408165992,"results":"33","hashOfConfig":"26"},{"size":1966,"mtime":1608537732799,"results":"34","hashOfConfig":"26"},{"size":1576,"mtime":1608343564477,"results":"35","hashOfConfig":"26"},{"size":867,"mtime":1608752122438,"results":"36","hashOfConfig":"26"},{"size":2186,"mtime":1608367481330,"results":"37","hashOfConfig":"26"},{"size":1992,"mtime":1609405120851,"results":"38","hashOfConfig":"26"},{"size":855,"mtime":1606124166902,"results":"39","hashOfConfig":"26"},{"size":1715,"mtime":1608533024978,"results":"40","hashOfConfig":"26"},{"size":3099,"mtime":1608354571205,"results":"41","hashOfConfig":"26"},{"size":10250,"mtime":1609407788267,"results":"42","hashOfConfig":"26"},{"size":2629,"mtime":1608718512468,"results":"43","hashOfConfig":"26"},{"size":28756,"mtime":1609405262772,"results":"44","hashOfConfig":"26"},{"size":1000,"mtime":1609045158505,"results":"45","hashOfConfig":"26"},{"size":23459,"mtime":1609406723589,"results":"46","hashOfConfig":"26"},{"size":1678,"mtime":1608718518802,"results":"47","hashOfConfig":"26"},{"size":127,"mtime":1608533923889,"results":"48","hashOfConfig":"26"},{"size":9292,"mtime":1609191448838,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"8mgafs",{"filePath":"53","messages":"54","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},"C:\\Users\\domin\\autohub\\src\\index.js",[],["115","116"],"C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js",["117","118","119","120","121","122","123","124","125","126","127","128","129","130","131"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport CarModal from './CarModal.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction HomeMobile(props) {\r\n\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[isListView, setIsListView] = useState(true); //flag to toggle the mode of displaying cars (list vs. grid)\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      console.log(cars);\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {showCarModal}\r\n        setShow = {setShowCarModal}\r\n        title = \"Add Car\"\r\n        car = {CARMODEL.car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Row style = {{marginTop: \"5%\"}}>\r\n        <Col>\r\n          <Row>\r\n            <Button variant = \"outline-dark\" style = {{marginRight: \"3%\"}}\r\n              onClick = {() => {setShowCarModal(true)}}\r\n            >\r\n              +\r\n            </Button>\r\n            <h4 style = {{marginTop: \"0.5%\"}}> Your Cars </h4>\r\n          </Row>\r\n          {cars.length === 0 ?\r\n            <div></div>\r\n          :\r\n            <div>\r\n              <br/>\r\n              <Row style = {{textAlign: \"center\"}}>\r\n                <Col>\r\n                  <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                    onClick = {() => {setIsListView(true)}}\r\n                  >\r\n                    <i class = \"fa fa-bars\"> </i> List\r\n                  </Button>\r\n                </Col>\r\n                <Col>\r\n                  <Button variant = \"light\"\r\n                    onClick = {() => {setIsListView(false)}}\r\n                  >\r\n                    <i class = \"fa fa-th-large\"> </i> Grid\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          }\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any cars. Click the + button to add a car 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col xs = {5}>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Image src = \"car-holder.png\" style = {{width: \"100%\", height: \"100px\"}} />\r\n                              :\r\n                              <Image src = {car.imageUrl} style = {{width: \"100%\", height: \"100px\"}} />\r\n                            }\r\n                          </Col>\r\n                          <Col xs = {7} style = {{float: \"right\"}}>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <b> {car.name} </b> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col md = {3} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img style = {{width: \"100%\", height: \"175px\"}}id = {car.carId} variant = \"top\" src = \"car-holder.png\" />\r\n                          :\r\n                          <Card.Img style = {{width: \"100%\", height: \"175px\"}} id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <Card.Header>\r\n                  Upcoming Maintenance 🛠️\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  You have nothing scheduled for your cars.\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HomeMobile;\r\n","C:\\Users\\domin\\autohub\\src\\components\\Home.js",["132","133","134","135","136","137","138","139","140","141","142","143","144","145"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport CarModal from './CarModal.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction Home(props) {\r\n\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[isListView, setIsListView] = useState(false); //flag to toggle the mode of displaying cars (list vs. grid)\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {showCarModal}\r\n        setShow = {setShowCarModal}\r\n        title = \"Add Car\"\r\n        car = {CARMODEL.car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Row style = {{marginTop: \"2%\"}}>\r\n        <Col lg = {7}>\r\n          <Row>\r\n            <Col xs = {6}>\r\n              <Button variant = \"outline-dark\" style = {{float: \"left\", marginRight: \"3%\"}}\r\n                onClick = {() => {setShowCarModal(true)}}\r\n              >\r\n                +\r\n              </Button>\r\n              <h4 style = {{marginTop: \"0.5%\"}}> Your Cars </h4>\r\n            </Col>\r\n            {cars.length === 0 ?\r\n              <div></div>\r\n              :\r\n              <Col xs = {6} style = {{textAlign: \"right\"}}>\r\n                <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                  onClick = {() => {setIsListView(true)}}\r\n                >\r\n                  <i class = \"fa fa-bars\"> </i> List\r\n                </Button>\r\n                <Button variant = \"light\"\r\n                  onClick = {() => {setIsListView(false)}}\r\n                >\r\n                  <i class = \"fa fa-th-large\"> </i> Grid\r\n                </Button>\r\n              </Col>\r\n            }\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any cars. Click the + button to add a car 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col xs = {3}>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Image src = \"car-holder.png\" style = {{width: \"100%\", height: \"125px\"}} />\r\n                              :\r\n                              <Image src = {car.imageUrl} style = {{width: \"100%\", height: \"125px\"}} />\r\n                            }\r\n                          </Col>\r\n                          <Col xs = {9}>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <b> {car.name} </b> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col md = {3} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img style = {{width: \"100%\", height: \"125px\"}}id = {car.carId} variant = \"top\" src = \"car-holder.png\" />\r\n                          :\r\n                          <Card.Img style = {{width: \"100%\", height: \"125px\"}} id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <Card.Header>\r\n                  Upcoming Maintenance 🛠️\r\n                  {/*\r\n                  <Button\r\n                    variant = \"outline-dark\"\r\n                    style = {{float: \"right\"}}\r\n                    size = \"sm\"\r\n                    disabled = {cars.length === 0}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                  */}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  You have nothing scheduled for your cars.\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n",["146","147"],"C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js",["148","149"],"C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js",[],["150","151"],"C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js",["152"],"C:\\Users\\domin\\autohub\\src\\components\\Login.js",["153","154","155"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport GoogleButton from 'react-google-button';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst AUTH = require('../controllers/auth.js');\r\n\r\nfunction Login(props) {\r\n\r\n  const[registering, toggleRegistering] = useState(false);\r\n  const[email, setEmail] = useState(\"\");\r\n  const[password, setPassword] = useState(\"\");\r\n\r\n  return (\r\n    <Container>\r\n      <Row style = {{height: \"10%\"}}>\r\n      </Row>\r\n\t\t\t<Row style = {{float: \"center\"}}>\r\n\t\t\t\t<Col></Col>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t<Card.Title\r\n\t\t\t\t\t\t\tstyle = {{textAlign: \"center\"}}\r\n\t\t\t\t\t\t>\r\n              AutoHub\r\n\t\t\t\t\t\t</Card.Title>\r\n\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t{/*TODO: add register form */}\r\n\t\t\t\t\t\t\t{!registering ?\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t{/*TODO: add email & password authentication service */}\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label> Email </Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas = \"input\"\r\n\t\t\t\t\t\t\t\t\t\t\tname = \"email\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue = {email}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange = {(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetEmail(e.target.value);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label> Password </Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\ttype = \"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tname = \"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue = {password}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange = {(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetPassword(e.target.value);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Button variant = \"secondary\"> Login </Button>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t*non-Google login in progress*\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<h5> Or </h5>\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t{/*TODO: center and make google button responsive */}\r\n\t\t\t\t\t\t\t\t\t<GoogleButton\r\n\t\t\t\t\t\t\t\t\t\ttype = \"light\"\r\n                    onClick = {props.googleSignin}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col></Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n",["156","157"],"C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js",["158","159","160","161"],"C:\\Users\\domin\\autohub\\src\\models\\car.js",[],["162","163"],"C:\\Users\\domin\\autohub\\src\\controllers\\storage.js",[],["164","165"],"C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js",[],["166","167"],"C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js",["168","169","170"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\nfunction AppNavbar() {\r\n  return (\r\n    <Navbar fluid style = {{backgroundColor: \"#A9CCE3\"}}>\r\n      <Navbar.Brand href = \"/\">\r\n        <Row>\r\n          <Col>\r\n            <h4> AutoHub </h4>\r\n          </Col>\r\n        </Row>\r\n      </Navbar.Brand>\r\n      <Nav className = \"mr-auto\">\r\n      </Nav>\r\n      <Nav className = \"justify-content-end\">\r\n        <OverlayTrigger\r\n          key = \"scheduled-service-types\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"scheduled-service-type\">\r\n              Scheduled Service Types\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}\r\n            onClick = {() => {\r\n              window.location.pathname = \"/scheduledServiceTypes\";\r\n            }}\r\n          >\r\n            🛎️\r\n          </Button>\r\n        </OverlayTrigger>\r\n        <OverlayTrigger\r\n          key = \"messages\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"message\">\r\n              Messages\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}>\r\n            ✉️\r\n          </Button>\r\n        </OverlayTrigger>\r\n        <OverlayTrigger\r\n          key = \"profile\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"my-profile\">\r\n              Profile\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}>\r\n            👤\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default AppNavbar;\r\n",["171","172"],"C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\auth.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\db.js",[],["173","174"],"C:\\Users\\domin\\autohub\\src\\App.js",["175","176","177"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport Login from './components/Login.js';\r\nimport AppNavbar from './components/AppNavbar.js';\r\nimport Home from './components/Home.js';\r\nimport HomeMobile from './components/HomeMobile.js';\r\nimport ScheduledServiceTypes from './pages/ScheduledServiceTypes.js';\r\nimport CarInfo from './pages/CarInfo.js';\r\n\r\nconst AUTH = require('./controllers/auth.js');\r\nconst MOBILEBREAKPOINT = 500;\r\n\r\nfunction App() {\r\n\r\n  const[userInfo, setUserInfo] = useState();\r\n  //const[screenWidth, setScreenWidth] = useState(window.innerWidth); //pixel size of screen, used to determine when to render components for smaller devices\r\n  const[isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    isUserSignedin();\r\n    detectMobile();\r\n  }, []);\r\n\r\n  //sets userInfo state object\r\n  //passes a call back to AUTH controller to set state object of this component\r\n  function isUserSignedin() {\r\n    const callback = (user) => {\r\n      setUserInfo(user);\r\n    }\r\n    AUTH.isUserSignedin(callback);\r\n  }\r\n\r\n  //detects smaller device (mobile)\r\n  function detectMobile() {\r\n    //window.addEventListener(\"resize\", setScreenWidth(window.innerWidth));\r\n    if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(window.navigator.userAgent)) {\r\n      setIsMobile(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path = \"/\">\r\n          {userInfo === null\r\n            ?\r\n              <body style = {{backgroundImage: \"url('tools.gif')\"}}>\r\n                <Login\r\n                  googleSignin = {AUTH.googleSignin}\r\n                />\r\n              </body>\r\n            :\r\n              <Container fluid>\r\n                <AppNavbar />\r\n                {isMobile ?\r\n                  <div>\r\n                    <HomeMobile\r\n                      userInfo = {userInfo}\r\n                    />\r\n                  </div>\r\n                :\r\n                  <div>\r\n                    <Home\r\n                      userInfo = {userInfo}\r\n                    />\r\n                  </div>\r\n                }\r\n              </Container>\r\n          }\r\n        </Route>\r\n        <Route exact path = \"/scheduledServiceTypes\">\r\n          <Container fluid>\r\n            <AppNavbar />\r\n            <ScheduledServiceTypes\r\n              userInfo = {userInfo}\r\n            />\r\n          </Container>\r\n        </Route>\r\n        <Route\r\n          path = \"/carInfo/:carId\"\r\n          render = {(props) =>\r\n            <Container fluid>\r\n              <AppNavbar />\r\n              <CarInfo\r\n                {...props}\r\n                userInfo = {userInfo}\r\n                {...props}\r\n              />\r\n            </Container>\r\n          }\r\n        >\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["178","179"],"C:\\Users\\domin\\autohub\\src\\components\\CarModal.js",["180","181","182"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst LOGMODEL = require('../models/serviceLog.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction CarModal(props) {\r\n\r\n  const[isLoading, setIsLoading] = useState(false); //flag to toggle spinner\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[car, setNewCar] = useState(); //state object for creating a new car\r\n  const[carImage, setCarImage] = useState(); //temp holder for car image upload\r\n  const[carModalFormValidated, setCarModalFormValidated] = useState(false); //flag to toggle form validation of the car modal\r\n  const[title, setTitle] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewCar(props.car);\r\n    setShowCarModal(props.show);\r\n    setTitle(props.title);\r\n  }, [props.show, props.title, props.car])\r\n\r\n  //adds a car to the cars db collectionName\r\n  function saveCar() {\r\n    if(props.userInfo === undefined) {\r\n      //TODO: handle this error more elegantly\r\n      alert(\"User data undefined. Cannot add new car\");\r\n      setCarModalFormValidated(false);\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    var userCreated = props.userInfo.email;\r\n    var isNew = false;\r\n    if(car.carId.trim().length === 0) {\r\n      car.carId = GENERICFUNCTIONS.generateId();\r\n      isNew = true;\r\n    }\r\n    car.userCreated = userCreated;\r\n    if(carImage !== undefined) {\r\n      var extension = carImage.name.split('.').pop();\r\n      var imageId = GENERICFUNCTIONS.generateId();\r\n      var fileType = carImage.type;\r\n      var prevImageUrl = \"\";\r\n      if(car.imageUrl.trim().length !== 0) {\r\n        prevImageUrl = car.imageUrl;\r\n      }\r\n      car.imageId = imageId;\r\n      var renamedFile = new File([carImage], imageId + \".\" + extension, {\r\n        type: fileType\r\n      });\r\n      STORAGE.uploadFile(renamedFile, \"images/\"+props.userInfo.uid+\"/\"+carImage.name, prevImageUrl,\r\n        function(url) {\r\n          car.imageUrl = url;\r\n          DB.writeOne(car.carId, car, \"cars\",\r\n            function() {\r\n              if(isNew) {\r\n                saveNewServiceLog(car.carId);\r\n              }\r\n              else {\r\n                handleCarModalClose();\r\n              }\r\n            },\r\n            function(error) {\r\n              //TODO: handle this error more elegantly\r\n              alert(error.toString());\r\n              setIsLoading(false);\r\n            }\r\n          );\r\n        }\r\n      );\r\n    }\r\n    else {\r\n      DB.writeOne(car.carId, car, \"cars\",\r\n        function() {\r\n          if(isNew) {\r\n            saveNewServiceLog(car.carId);\r\n          }\r\n          else {\r\n            handleCarModalClose();\r\n          }\r\n        },\r\n        function(error) {\r\n          //TODO: handle this error more elegantly\r\n          alert(error.toString());\r\n          setIsLoading(false);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  function saveNewServiceLog(carId) {\r\n    var serviceLog = JSON.parse(JSON.stringify(LOGMODEL.serviceLog));\r\n    serviceLog.userCreated = props.userInfo.email;\r\n    serviceLog.logId = GENERICFUNCTIONS.generateId();\r\n    serviceLog.carReferenceId = carId;\r\n    DB.writeOne(serviceLog.logId, serviceLog, \"serviceLogs\",\r\n      function() {\r\n        handleCarModalClose();\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setIsLoading(false);\r\n      });\r\n  }\r\n\r\n  //function to handle car modal closing\r\n  function handleCarModalClose() {\r\n    setIsLoading(false);\r\n    props.setShow(false);\r\n    setNewCar(CARMODEL.car);\r\n    setCarImage();\r\n    setShowCarModal(false);\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //function to handle adding values to car\r\n  function onChangeNewCar(e, type) {\r\n    var carCopy = JSON.parse(JSON.stringify(car));\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    if(type === \"number\" && isNaN(value)) {\r\n      return;\r\n    }\r\n    carCopy[name] = value;\r\n    setNewCar(carCopy);\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //handle submit for car modal form\r\n  function handleCarModalSubmit(e) {\r\n    const form = e.currentTarget;\r\n    setCarModalFormValidated(true);\r\n    if(checkNewCarFields() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    else {\r\n      saveCar();\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  //check if required fields have been filled\r\n  function checkNewCarFields() {\r\n    var isValid = true;\r\n    for(var i = 0; i < CARMODEL.publicFields.length; i++) {\r\n      var field = CARMODEL.publicFields[i];\r\n      if(field.required && car[field.value].toString().trim().length === 0) {\r\n        car[field.value] = \"\";\r\n        isValid = false;\r\n      }\r\n      car[field.value] = car[field.value].trim();\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  if(car === undefined) {\r\n    return <div></div>;\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show = {showCarModal}\r\n      onHide = {handleCarModalClose}\r\n      backdrop = \"static\"\r\n      keyboard = {false}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title> {title} </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form noValidate validated = {carModalFormValidated} onSubmit = {handleCarModalSubmit}>\r\n          <Row style = {{marginLeft: \"3%\", marginRight: \"3%\"}}>\r\n            {CARMODEL.publicFields.map((field) => {\r\n              if(field.inputType === \"input\") {\r\n                return (\r\n                    <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                      <Form.Label> {field.displayName} </Form.Label>\r\n                      <Form.Control\r\n                        required = {field.required}\r\n                        as = {field.inputType}\r\n                        name = {field.value}\r\n                        value = {car[field.value]}\r\n                        onChange = {(e) => {\r\n                          onChangeNewCar(e, field.type);\r\n                        }}\r\n                      />\r\n                      <Form.Control.Feedback type = \"invalid\">\r\n                        Required\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                );\r\n              }\r\n              else if(field.inputType === \"select\") {\r\n                console.log(car);\r\n                return (\r\n                    <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                      <Form.Label> {field.displayName} </Form.Label>\r\n                      <Form.Control\r\n                        required = {field.required}\r\n                        as = {field.inputType}\r\n                        name = {field.value}\r\n                        onChange = {(e) => {\r\n                          onChangeNewCar(e, field.type);\r\n                        }}\r\n                      >\r\n                        {car.year.trim().length === 0 ?\r\n                          <option value = \"\" selected disabled hidden> Select </option>\r\n                          :\r\n                          <div></div>\r\n                        }\r\n                        {field.modalSelectData.map((data) => {\r\n                          if(data === Number(car.year)) {\r\n                            return (\r\n                              <option value = {data} selected> {data} </option>\r\n                            )\r\n                          }\r\n                          return (\r\n                            <option value = {data}> {data} </option>\r\n                          );\r\n                        })}\r\n                      </Form.Control>\r\n                      <Form.Control.Feedback type = \"invalid\">\r\n                        Required\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                    <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                      <Form.Label> {field.displayName} </Form.Label>\r\n                      <Form.Control\r\n                        required = {field.required}\r\n                        as = {field.inputType}\r\n                        name = {field.value}\r\n                        value = {car[field.value]}\r\n                        onChange = {(e) => {\r\n                          onChangeNewCar(e, field.type);\r\n                        }}\r\n                      />\r\n                    </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form>\r\n                <Form.Group>\r\n                  <Form.Label> Image </Form.Label>\r\n                  <Form.File\r\n                    id = \"image\"\r\n                    onChange = {(e) => {\r\n                      var carCopy = JSON.parse(JSON.stringify(car));\r\n                      var file = e.target.files[0];\r\n                      if(file) {\r\n                        setCarImage(file);\r\n                        setNewCar(carCopy);\r\n                      }\r\n                      else {\r\n                        setCarImage();\r\n                        carCopy.imageId = \"\";\r\n                        setNewCar(carCopy);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Form.Group>\r\n              </Form>\r\n            </Col>\r\n            <Col>\r\n              <Button type = \"submit\" variant = \"success\" disabled = {isLoading} style = {{float: \"right\", marginTop: \"10%\"}}>\r\n                {isLoading ?\r\n                  <Spinner animation = \"border\" size = \"sm\" status = \"role\"/>\r\n                  :\r\n                  <div></div>\r\n                }\r\n                Save\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CarModal;\r\n","C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js",[],"C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js",["183","184","185","186","187","188","189","190","191","192","193","194","195","196"],"C:\\Users\\domin\\autohub\\src\\models\\logOptions.js",[],"C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js",["197","198","199","200","201","202","203","204","205","206","207","208","209"],"C:\\Users\\domin\\autohub\\src\\models\\repairService.js",[],"C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js",[],"C:\\Users\\domin\\autohub\\src\\components\\LogFilters.js",["210","211","212","213","214","215","216","217"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport DatePicker from \"react-datepicker\";\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst LOGMODEL = require('../models/logOptions.js');\r\n\r\nfunction LogFilters(props) {\r\n\r\n  const[selectedFilters, setSelectedFilters] = useState([]);\r\n  const[filterValues, setFilterValues] = useState(LOGMODEL.filterValues);\r\n\r\n  const[startDate, setStartDate] = useState(null);\r\n  const[endDate, setEndDate] = useState(null);\r\n\r\n  const[startMileage, setStartMileage] = useState(0);\r\n  const[endMileage, setEndMileage] = useState(0);\r\n\r\n  const[serviceName, setServiceName] = useState(\"\");\r\n  const[names, setNames] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(props.serviceNames !== undefined) {\r\n      setNames(props.serviceNames);\r\n    }\r\n  }, [props.serviceNames]);\r\n\r\n  function isInDateRange(date) {\r\n    if(startDate === null || startDate === undefined || endDate === null || endDate === undefined) {\r\n      return false;\r\n    }\r\n    var time = date.getTime();\r\n    if(startDate.getTime() <= time && time <= endDate.getTime()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function isInMileageRange(mileage) {\r\n    if(startMileage === undefined || endMileage === undefined) {\r\n      return false;\r\n    }\r\n    if(startMileage <= mileage && mileage <= endMileage) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function isSameServiceName(name) {\r\n    if(name.trim() === serviceName.trim()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //TODO: make this dynamic based off the model\r\n  function renderFilterOptions() {\r\n    return (\r\n      <Row>\r\n        <Col>\r\n          <Row style = {{marginBottom: \"2%\"}}>\r\n            <Col style = {{textAlign: \"left\"}}>\r\n              <div> <strong> Date </strong> </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm = {6}>\r\n              <DatePicker\r\n                placeholderText = \"Start\"\r\n                selected = {typeof(filterValues.startDate) === \"string\" ? new Date(filterValues.startDate) : filterValues.startDate}\r\n                onChange = {(date) => {\r\n                  var values = JSON.parse(JSON.stringify(filterValues));\r\n                  var filters = selectedFilters.slice();\r\n                  values.startDate = date;\r\n                  setFilterValues(values);\r\n                  if(values.startDate === null && values.endDate === null) {\r\n                    if(filters.includes(\"date\")) {\r\n                      filters.splice(filters.indexOf(\"date\"), 1);\r\n                    }\r\n                  }\r\n                  else if(!filters.includes(\"date\")) {\r\n                    filters.push(\"date\");\r\n                  }\r\n                  setSelectedFilters(filters);\r\n                }}\r\n                customInput = {\r\n                  <Form.Control\r\n                    as = \"input\"\r\n                    size = \"sm\"\r\n                  />\r\n                }\r\n              />\r\n            </Col>\r\n            <Col sm = {6}>\r\n              <DatePicker\r\n                placeholderText = \"End\"\r\n                selected = {typeof(filterValues.endDate) === \"string\" ? new Date(filterValues.endDate) : filterValues.endDate}\r\n                onChange = {(date) => {\r\n                  var values = JSON.parse(JSON.stringify(filterValues));\r\n                  var filters = selectedFilters.slice();\r\n                  values.endDate = date;\r\n                  setFilterValues(values);\r\n                  if(values.startDate === null && values.endDate === null) {\r\n                    if(filters.includes(\"date\")) {\r\n                      filters.splice(filters.indexOf(\"date\"), 1);\r\n                    }\r\n                  }\r\n                  else if(!filters.includes(\"date\")) {\r\n                    filters.push(\"date\");\r\n                  }\r\n                  setSelectedFilters(filters);\r\n                }}\r\n                customInput = {\r\n                  <Form.Control\r\n                    as = \"input\"\r\n                    size = \"sm\"\r\n                  />\r\n                }\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <br style = {{height: \"50%\"}} />\r\n          <Row style = {{marginBottom: \"2%\"}}>\r\n            <Col style = {{textAlign: \"left\"}}>\r\n              <div> <strong> Mileage </strong> </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm = {6}>\r\n              <Form.Control\r\n                placeholder = \"Start\"\r\n                as = \"input\"\r\n                size = \"sm\"\r\n                value = {filterValues.startMileage}\r\n                onChange = {(e) => {\r\n                  if(!isNaN(e.target.value)) {\r\n                    var values = JSON.parse(JSON.stringify(filterValues));\r\n                    var filters = selectedFilters.slice();\r\n                    values.startMileage = e.target.value;\r\n                    setFilterValues(values);\r\n                    if(values.startMileage.trim().length === 0 && values.endMileage.trim().length === 0) {\r\n                      if(filters.includes(\"mileage\")) {\r\n                        filters.splice(filters.indexOf(\"mileage\"), 1);\r\n                      }\r\n                    }\r\n                    else if(!filters.includes(\"mileage\")) {\r\n                      filters.push(\"mileage\");\r\n                    }\r\n                    setSelectedFilters(filters);\r\n                  }\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col sm = {6}>\r\n              <Form.Control\r\n                placeholder = \"End\"\r\n                as = \"input\"\r\n                size = \"sm\"\r\n                value = {filterValues.endMileage}\r\n                onChange = {(e) => {\r\n                  if(!isNaN(e.target.value)) {\r\n                    var values = JSON.parse(JSON.stringify(filterValues));\r\n                    var filters = selectedFilters.slice();\r\n                    values.endMileage = e.target.value;\r\n                    setFilterValues(values);\r\n                    if(values.startMileage.trim().length === 0 && values.endMileage.trim().length === 0) {\r\n                      if(filters.includes(\"mileage\")) {\r\n                        filters.splice(filters.indexOf(\"mileage\"), 1);\r\n                      }\r\n                    }\r\n                    else if(!filters.includes(\"mileage\")) {\r\n                      filters.push(\"mileage\");\r\n                    }\r\n                    setSelectedFilters(filters);\r\n                  }\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <br style = {{height: \"50%\"}} />\r\n          <Row>\r\n            <Col>\r\n            <Row style = {{marginBottom: \"2%\"}}>\r\n              <Col style = {{textAlign: \"left\"}}>\r\n                <div> <strong> Service Name </strong> </div>\r\n              </Col>\r\n            </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Control\r\n                    placeholder = \"e.g. Oil Change\"\r\n                    as = \"input\"\r\n                    size = \"sm\"\r\n                    name = \"serviceName\"\r\n                    value = {filterValues.serviceName}\r\n                    onChange = {(e) => {\r\n                      var values = JSON.parse(JSON.stringify(filterValues));\r\n                      var filters = selectedFilters.slice();\r\n                      values.serviceName = e.target.value;\r\n                      setFilterValues(values);\r\n                      if(values.serviceName.trim().length === 0) {\r\n                        if(filters.includes(\"serviceName\")) {\r\n                          filters.splice(filters.indexOf(\"serviceName\"), 1);\r\n                        }\r\n                      }\r\n                      else if(!filters.includes(\"serviceName\")) {\r\n                        filters.push(\"serviceName\");\r\n                      }\r\n                      setSelectedFilters(filters);\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <br style = {{height: \"50%\"}} />\r\n              <Row>\r\n                <Col>\r\n                  {names.map((name) => {\r\n                    return (\r\n                      <ListGroup flush>\r\n                        <ListGroup.Item> {name} </ListGroup.Item>\r\n                      </ListGroup>\r\n                    );\r\n                  })}\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col style = {{textAlign: \"right\"}}>\r\n              <Button variant = \"success\" size = \"sm\"\r\n                onClick = {() => {\r\n                  props.applyFilters(selectedFilters, filterValues);\r\n                  props.toggleFiltering(selectedFilters);\r\n                }}\r\n              >\r\n                Apply\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style = {{margin: \"2%\"}}>\r\n      <Row>\r\n        <Col>\r\n          {renderFilterOptions()}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LogFilters;\r\n",{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":6,"column":8,"nodeType":"224","messageId":"225","endLine":6,"endColumn":12},{"ruleId":"222","severity":1,"message":"226","line":11,"column":8,"nodeType":"224","messageId":"225","endLine":11,"endColumn":22},{"ruleId":"222","severity":1,"message":"227","line":12,"column":8,"nodeType":"224","messageId":"225","endLine":12,"endColumn":16},{"ruleId":"222","severity":1,"message":"228","line":13,"column":8,"nodeType":"224","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"222","severity":1,"message":"229","line":17,"column":8,"nodeType":"224","messageId":"225","endLine":17,"endColumn":14},{"ruleId":"222","severity":1,"message":"230","line":19,"column":16,"nodeType":"224","messageId":"225","endLine":19,"endColumn":22},{"ruleId":"222","severity":1,"message":"231","line":25,"column":7,"nodeType":"224","messageId":"225","endLine":25,"endColumn":14},{"ruleId":"222","severity":1,"message":"232","line":26,"column":7,"nodeType":"224","messageId":"225","endLine":26,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":36,"column":6,"nodeType":"235","endLine":36,"endColumn":22,"suggestions":"236"},{"ruleId":"237","severity":1,"message":"238","line":120,"column":21,"nodeType":"224","messageId":"239","endLine":120,"endColumn":26},{"ruleId":"240","severity":1,"message":"241","line":128,"column":65,"nodeType":"242","messageId":"243","endLine":128,"endColumn":66},{"ruleId":"240","severity":1,"message":"241","line":147,"column":53,"nodeType":"242","messageId":"243","endLine":147,"endColumn":54},{"ruleId":"244","severity":1,"message":"245","line":165,"column":21,"nodeType":"246","endLine":169,"endColumn":22},{"ruleId":"240","severity":1,"message":"241","line":167,"column":63,"nodeType":"242","messageId":"243","endLine":167,"endColumn":64},{"ruleId":"240","severity":1,"message":"241","line":184,"column":51,"nodeType":"242","messageId":"243","endLine":184,"endColumn":52},{"ruleId":"222","severity":1,"message":"223","line":6,"column":8,"nodeType":"224","messageId":"225","endLine":6,"endColumn":12},{"ruleId":"222","severity":1,"message":"226","line":11,"column":8,"nodeType":"224","messageId":"225","endLine":11,"endColumn":22},{"ruleId":"222","severity":1,"message":"227","line":12,"column":8,"nodeType":"224","messageId":"225","endLine":12,"endColumn":16},{"ruleId":"222","severity":1,"message":"228","line":13,"column":8,"nodeType":"224","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"222","severity":1,"message":"230","line":18,"column":16,"nodeType":"224","messageId":"225","endLine":18,"endColumn":22},{"ruleId":"222","severity":1,"message":"231","line":23,"column":7,"nodeType":"224","messageId":"225","endLine":23,"endColumn":14},{"ruleId":"222","severity":1,"message":"232","line":25,"column":7,"nodeType":"224","messageId":"225","endLine":25,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":35,"column":6,"nodeType":"235","endLine":35,"endColumn":22,"suggestions":"247"},{"ruleId":"237","severity":1,"message":"238","line":113,"column":21,"nodeType":"224","messageId":"239","endLine":113,"endColumn":26},{"ruleId":"240","severity":1,"message":"241","line":121,"column":65,"nodeType":"242","messageId":"243","endLine":121,"endColumn":66},{"ruleId":"240","severity":1,"message":"241","line":140,"column":53,"nodeType":"242","messageId":"243","endLine":140,"endColumn":54},{"ruleId":"244","severity":1,"message":"245","line":158,"column":21,"nodeType":"246","endLine":162,"endColumn":22},{"ruleId":"240","severity":1,"message":"241","line":160,"column":63,"nodeType":"242","messageId":"243","endLine":160,"endColumn":64},{"ruleId":"240","severity":1,"message":"241","line":177,"column":51,"nodeType":"242","messageId":"243","endLine":177,"endColumn":52},{"ruleId":"218","replacedBy":"248"},{"ruleId":"220","replacedBy":"249"},{"ruleId":"233","severity":1,"message":"250","line":36,"column":6,"nodeType":"235","endLine":36,"endColumn":48,"suggestions":"251"},{"ruleId":"222","severity":1,"message":"252","line":70,"column":13,"nodeType":"224","messageId":"225","endLine":70,"endColumn":16},{"ruleId":"218","replacedBy":"253"},{"ruleId":"220","replacedBy":"254"},{"ruleId":"233","severity":1,"message":"255","line":33,"column":6,"nodeType":"235","endLine":33,"endColumn":22,"suggestions":"256"},{"ruleId":"222","severity":1,"message":"257","line":1,"column":27,"nodeType":"224","messageId":"225","endLine":1,"endColumn":36},{"ruleId":"222","severity":1,"message":"258","line":11,"column":7,"nodeType":"224","messageId":"225","endLine":11,"endColumn":11},{"ruleId":"222","severity":1,"message":"259","line":15,"column":22,"nodeType":"224","messageId":"225","endLine":15,"endColumn":39},{"ruleId":"218","replacedBy":"260"},{"ruleId":"220","replacedBy":"261"},{"ruleId":"222","severity":1,"message":"262","line":5,"column":8,"nodeType":"224","messageId":"225","endLine":5,"endColumn":17},{"ruleId":"222","severity":1,"message":"252","line":42,"column":9,"nodeType":"224","messageId":"225","endLine":42,"endColumn":12},{"ruleId":"222","severity":1,"message":"252","line":115,"column":9,"nodeType":"224","messageId":"225","endLine":115,"endColumn":12},{"ruleId":"222","severity":1,"message":"252","line":125,"column":9,"nodeType":"224","messageId":"225","endLine":125,"endColumn":12},{"ruleId":"218","replacedBy":"263"},{"ruleId":"220","replacedBy":"264"},{"ruleId":"218","replacedBy":"265"},{"ruleId":"220","replacedBy":"266"},{"ruleId":"218","replacedBy":"267"},{"ruleId":"220","replacedBy":"268"},{"ruleId":"222","severity":1,"message":"269","line":1,"column":17,"nodeType":"224","messageId":"225","endLine":1,"endColumn":25},{"ruleId":"222","severity":1,"message":"257","line":1,"column":27,"nodeType":"224","messageId":"225","endLine":1,"endColumn":36},{"ruleId":"222","severity":1,"message":"270","line":6,"column":8,"nodeType":"224","messageId":"225","endLine":6,"endColumn":13},{"ruleId":"218","replacedBy":"271"},{"ruleId":"220","replacedBy":"272"},{"ruleId":"218","replacedBy":"273"},{"ruleId":"220","replacedBy":"274"},{"ruleId":"222","severity":1,"message":"275","line":7,"column":8,"nodeType":"224","messageId":"225","endLine":7,"endColumn":11},{"ruleId":"222","severity":1,"message":"276","line":8,"column":8,"nodeType":"224","messageId":"225","endLine":8,"endColumn":11},{"ruleId":"222","severity":1,"message":"277","line":19,"column":7,"nodeType":"224","messageId":"225","endLine":19,"endColumn":23},{"ruleId":"218","replacedBy":"278"},{"ruleId":"220","replacedBy":"279"},{"ruleId":"222","severity":1,"message":"262","line":5,"column":8,"nodeType":"224","messageId":"225","endLine":5,"endColumn":17},{"ruleId":"222","severity":1,"message":"230","line":9,"column":16,"nodeType":"224","messageId":"225","endLine":9,"endColumn":22},{"ruleId":"222","severity":1,"message":"280","line":141,"column":11,"nodeType":"224","messageId":"225","endLine":141,"endColumn":15},{"ruleId":"222","severity":1,"message":"227","line":12,"column":8,"nodeType":"224","messageId":"225","endLine":12,"endColumn":16},{"ruleId":"222","severity":1,"message":"230","line":14,"column":16,"nodeType":"224","messageId":"225","endLine":14,"endColumn":22},{"ruleId":"222","severity":1,"message":"281","line":19,"column":8,"nodeType":"224","messageId":"225","endLine":19,"endColumn":22},{"ruleId":"233","severity":1,"message":"234","line":48,"column":6,"nodeType":"235","endLine":48,"endColumn":40,"suggestions":"282"},{"ruleId":"283","severity":1,"message":"284","line":196,"column":40,"nodeType":"285","messageId":"286","endLine":197,"endColumn":235},{"ruleId":"283","severity":1,"message":"287","line":200,"column":40,"nodeType":"285","messageId":"286","endLine":201,"endColumn":175},{"ruleId":"283","severity":1,"message":"288","line":211,"column":38,"nodeType":"285","messageId":"286","endLine":211,"endColumn":91},{"ruleId":"289","severity":1,"message":"290","line":329,"column":17,"nodeType":"291","endLine":329,"endColumn":42},{"ruleId":"289","severity":1,"message":"290","line":350,"column":17,"nodeType":"291","endLine":350,"endColumn":42},{"ruleId":"292","severity":1,"message":"293","line":417,"column":53,"nodeType":"285","messageId":"294","endLine":417,"endColumn":55},{"ruleId":"222","severity":1,"message":"295","line":457,"column":31,"nodeType":"224","messageId":"225","endLine":457,"endColumn":38},{"ruleId":"222","severity":1,"message":"296","line":555,"column":35,"nodeType":"224","messageId":"225","endLine":555,"endColumn":43},{"ruleId":"292","severity":1,"message":"293","line":584,"column":53,"nodeType":"285","messageId":"294","endLine":584,"endColumn":55},{"ruleId":"222","severity":1,"message":"296","line":668,"column":35,"nodeType":"224","messageId":"225","endLine":668,"endColumn":43},{"ruleId":"222","severity":1,"message":"227","line":12,"column":8,"nodeType":"224","messageId":"225","endLine":12,"endColumn":16},{"ruleId":"222","severity":1,"message":"230","line":14,"column":16,"nodeType":"224","messageId":"225","endLine":14,"endColumn":22},{"ruleId":"222","severity":1,"message":"281","line":19,"column":8,"nodeType":"224","messageId":"225","endLine":19,"endColumn":22},{"ruleId":"233","severity":1,"message":"234","line":48,"column":6,"nodeType":"235","endLine":48,"endColumn":40,"suggestions":"297"},{"ruleId":"237","severity":1,"message":"298","line":72,"column":9,"nodeType":"224","messageId":"239","endLine":72,"endColumn":13},{"ruleId":"283","severity":1,"message":"284","line":150,"column":40,"nodeType":"285","messageId":"286","endLine":151,"endColumn":235},{"ruleId":"283","severity":1,"message":"287","line":154,"column":40,"nodeType":"285","messageId":"286","endLine":155,"endColumn":175},{"ruleId":"283","severity":1,"message":"288","line":165,"column":38,"nodeType":"285","messageId":"286","endLine":165,"endColumn":91},{"ruleId":"289","severity":1,"message":"290","line":283,"column":17,"nodeType":"291","endLine":283,"endColumn":42},{"ruleId":"289","severity":1,"message":"290","line":304,"column":17,"nodeType":"291","endLine":304,"endColumn":42},{"ruleId":"292","severity":1,"message":"293","line":357,"column":53,"nodeType":"285","messageId":"294","endLine":357,"endColumn":55},{"ruleId":"222","severity":1,"message":"295","line":371,"column":31,"nodeType":"224","messageId":"225","endLine":371,"endColumn":38},{"ruleId":"292","severity":1,"message":"293","line":494,"column":53,"nodeType":"285","messageId":"294","endLine":494,"endColumn":55},{"ruleId":"222","severity":1,"message":"299","line":19,"column":20,"nodeType":"224","messageId":"225","endLine":19,"endColumn":32},{"ruleId":"222","severity":1,"message":"300","line":20,"column":18,"nodeType":"224","messageId":"225","endLine":20,"endColumn":28},{"ruleId":"222","severity":1,"message":"301","line":22,"column":23,"nodeType":"224","messageId":"225","endLine":22,"endColumn":38},{"ruleId":"222","severity":1,"message":"302","line":23,"column":21,"nodeType":"224","messageId":"225","endLine":23,"endColumn":34},{"ruleId":"222","severity":1,"message":"303","line":25,"column":22,"nodeType":"224","messageId":"225","endLine":25,"endColumn":36},{"ruleId":"222","severity":1,"message":"304","line":34,"column":12,"nodeType":"224","messageId":"225","endLine":34,"endColumn":25},{"ruleId":"222","severity":1,"message":"305","line":45,"column":12,"nodeType":"224","messageId":"225","endLine":45,"endColumn":28},{"ruleId":"222","severity":1,"message":"306","line":55,"column":12,"nodeType":"224","messageId":"225","endLine":55,"endColumn":29},"no-native-reassign",["307"],"no-negated-in-lhs",["308"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'Modal' is defined but never used.","'Figure' is defined but never used.","'uuidv4' is defined but never used.","'STORAGE' is assigned a value but never used.","'GENERICFUNCTIONS' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCars'. Either include it or remove the dependency array.","ArrayExpression",["309"],"no-redeclare","'style' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["310"],["307"],["308"],"React Hook useEffect has a missing dependency: 'getSsts'. Either include it or remove the dependency array.",["311"],"'len' is assigned a value but never used.",["307"],["308"],"React Hook useEffect has missing dependencies: 'getCars' and 'getSsts'. Either include them or remove the dependency array.",["312"],"'useEffect' is defined but never used.","'AUTH' is assigned a value but never used.","'toggleRegistering' is assigned a value but never used.",["307"],["308"],"'Container' is defined but never used.",["307"],["308"],["307"],["308"],["307"],["308"],"'useState' is defined but never used.","'Image' is defined but never used.",["307"],["308"],["307"],["308"],"'Row' is defined but never used.","'Col' is defined but never used.","'MOBILEBREAKPOINT' is assigned a value but never used.",["307"],["308"],"'form' is assigned a value but never used.","'OverlayTrigger' is defined but never used.",["313"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'option', 'option'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'option', 'filter', 'filter', 'option'.","Function declared in a loop contains unsafe references to variable(s) 'filter', 'filter'.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'popover' is assigned a value but never used.","'strIndex' is assigned a value but never used.",["314"],"'copy' is already defined.","'setStartDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.","'setStartMileage' is assigned a value but never used.","'setEndMileage' is assigned a value but never used.","'setServiceName' is assigned a value but never used.","'isInDateRange' is defined but never used.","'isInMileageRange' is defined but never used.","'isSameServiceName' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"315","fix":"316"},{"desc":"315","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"322","fix":"324"},"Update the dependencies array to be: [getCars, props.userInfo]",{"range":"325","text":"326"},{"range":"327","text":"326"},"Update the dependencies array to be: [getSsts, props.match.params.carId, props.userInfo]",{"range":"328","text":"329"},"Update the dependencies array to be: [getCars, getSsts, props.userInfo]",{"range":"330","text":"331"},"Update the dependencies array to be: [props.userInfo, props.serviceLog, getCars]",{"range":"332","text":"333"},{"range":"334","text":"333"},[1378,1394],"[getCars, props.userInfo]",[1328,1344],[1301,1343],"[getSsts, props.match.params.carId, props.userInfo]",[1111,1127],"[getCars, getSsts, props.userInfo]",[1900,1934],"[props.userInfo, props.serviceLog, getCars]",[1891,1925]]