[{"C:\\Users\\domin\\autohub\\src\\index.js":"1","C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js":"2","C:\\Users\\domin\\autohub\\src\\components\\Home.js":"3","C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js":"4","C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js":"5","C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js":"6","C:\\Users\\domin\\autohub\\src\\components\\Login.js":"7","C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js":"8","C:\\Users\\domin\\autohub\\src\\models\\car.js":"9","C:\\Users\\domin\\autohub\\src\\controllers\\storage.js":"10","C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js":"11","C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js":"12","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js":"13","C:\\Users\\domin\\autohub\\src\\controllers\\auth.js":"14","C:\\Users\\domin\\autohub\\src\\controllers\\db.js":"15"},{"size":338,"mtime":1606338417443,"results":"16","hashOfConfig":"17"},{"size":16329,"mtime":1607939928176,"results":"18","hashOfConfig":"17"},{"size":16703,"mtime":1608099404668,"results":"19","hashOfConfig":"17"},{"size":1727,"mtime":1607939928177,"results":"20","hashOfConfig":"17"},{"size":539,"mtime":1606122737011,"results":"21","hashOfConfig":"17"},{"size":9132,"mtime":1608194219000,"results":"22","hashOfConfig":"17"},{"size":2397,"mtime":1606206533045,"results":"23","hashOfConfig":"17"},{"size":21095,"mtime":1608193033398,"results":"24","hashOfConfig":"17"},{"size":1824,"mtime":1606599611268,"results":"25","hashOfConfig":"17"},{"size":864,"mtime":1606600678449,"results":"26","hashOfConfig":"17"},{"size":867,"mtime":1608188121258,"results":"27","hashOfConfig":"17"},{"size":2222,"mtime":1607892205184,"results":"28","hashOfConfig":"17"},{"size":943,"mtime":1607888355651,"results":"29","hashOfConfig":"17"},{"size":855,"mtime":1606124166902,"results":"30","hashOfConfig":"17"},{"size":951,"mtime":1608193210577,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"8mgafs",{"filePath":"35","messages":"36","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\domin\\autohub\\src\\index.js",[],["69","70"],"C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js",["71","72","73","74","75","76","77","78","79","80"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction HomeMobile(props) {\r\n\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[newCar, setNewCar] = useState({}); //state object for creating a new car\r\n  const[newCarImage, setNewCarImage] = useState(); //temp holder for newCar image upload\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[isListView, setIsListView] = useState(true); //flag to toggle the mode of displaying cars (list vs. grid)\r\n  const[isLoading, setIsLoading] = useState(false);\r\n  const[carModalFormValidated, setCarModalFormValidated] = useState(false); //flag to toggle form validation of the car modal\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n    setNewCar(CARMODEL.car);\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      console.log(cars);\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  //adds a car to the cars db collectionName\r\n  function addCar() {\r\n    if(props.userInfo === undefined) {\r\n      //TODO: handle this error more elegantly\r\n      alert(\"User data undefined. Cannot add new car\");\r\n    }\r\n    setIsLoading(true);\r\n    var userCreated = props.userInfo.email;\r\n    var carId = GENERICFUNCTIONS.generateId();\r\n    newCar.userCreated = userCreated;\r\n    newCar.carId = carId;\r\n    if(newCarImage !== undefined) {\r\n      STORAGE.uploadFile(newCarImage, \"images/\"+props.userInfo.uid+\"/\"+newCarImage.name,\r\n        function(url) {\r\n          newCar.imageUrl = url;\r\n          DB.writeOne(carId, newCar, \"cars\",\r\n            function() {\r\n              handleCarModalClose();\r\n              setIsLoading(false);\r\n            },\r\n            function(error) {\r\n              //TODO: handle this error more elegantly\r\n              alert(error.toString());\r\n              setIsLoading(false);\r\n            }\r\n          );\r\n        }\r\n      );\r\n    }\r\n    else {\r\n      DB.writeOne(carId, newCar, \"cars\",\r\n        function() {\r\n          handleCarModalClose();\r\n          setIsLoading(false);\r\n        },\r\n        function(error) {\r\n          //TODO: handle this error more elegantly\r\n          alert(error.toString());\r\n          setIsLoading(false);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  //function to handle car modal closing\r\n  function handleCarModalClose() {\r\n    setNewCar(CARMODEL.car);\r\n    setShowCarModal(false);\r\n    setNewCarImage();\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //function to handle adding values to newCar\r\n  function onChangeNewCar(e) {\r\n    var newCarCopy = JSON.parse(JSON.stringify(newCar));\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    newCarCopy[name] = value;\r\n    setNewCar(newCarCopy);\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //handle submit for car modal form\r\n  function handleCarModalSubmit(e) {\r\n    const form = e.currentTarget;\r\n    setCarModalFormValidated(true);\r\n    if(checkNewCarFields() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    else {\r\n      addCar();\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  //check if required fields have been filled\r\n  function checkNewCarFields() {\r\n    var isValid = true;\r\n    for(var i = 0; i < CARMODEL.publicFields.length; i++) {\r\n      var field = CARMODEL.publicFields[i];\r\n      if(field.required && newCar[field.value].toString().trim().length === 0) {\r\n        newCar[field.value] = \"\";\r\n        isValid = false;\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n      {/*add car modal*/}\r\n      <Modal\r\n        show = {showCarModal}\r\n        onHide = {handleCarModalClose}\r\n        backdrop = \"static\"\r\n        keyboard = {false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> Add Car </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form noValidate validated = {carModalFormValidated} onSubmit = {handleCarModalSubmit}>\r\n            <Row style = {{marginLeft: \"3%\", marginRight: \"3%\"}}>\r\n              {CARMODEL.publicFields.map((field) => {\r\n                if(field.inputType === \"input\") {\r\n                  return (\r\n                      <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                        <Form.Label> {field.displayName} </Form.Label>\r\n                        <Form.Control\r\n                          required = {field.required}\r\n                          as = {field.inputType}\r\n                          name = {field.value}\r\n                          value = {newCar[field.value]}\r\n                          onChange = {(e) => {\r\n                            onChangeNewCar(e);\r\n                          }}\r\n                        />\r\n                        <Form.Control.Feedback type = \"invalid\">\r\n                          Required\r\n                        </Form.Control.Feedback>\r\n                      </Col>\r\n                  );\r\n                }\r\n                else if(field.inputType === \"select\") {\r\n                  return (\r\n                      <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                        <Form.Label> {field.displayName} </Form.Label>\r\n                        <Form.Control\r\n                          required = {field.required}\r\n                          as = {field.inputType}\r\n                          name = {field.value}\r\n                          onChange = {(e) => {\r\n                            onChangeNewCar(e);\r\n                          }}\r\n                        >\r\n                          <option value = \"\" selected disabled hidden> Year </option>\r\n                            {field.modalSelectData.map((data) => {\r\n                              return (\r\n                                <option value = {data}> {data} </option>\r\n                              );\r\n                            })}\r\n                        </Form.Control>\r\n                        <Form.Control.Feedback type = \"invalid\">\r\n                          Required\r\n                        </Form.Control.Feedback>\r\n                      </Col>\r\n                  );\r\n                }\r\n                else {\r\n                  return (\r\n                      <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                        <Form.Label> {field.displayName} </Form.Label>\r\n                        <Form.Control\r\n                          required = {field.required}\r\n                          as = {field.inputType}\r\n                          name = {field.value}\r\n                          value = {newCar[field.value]}\r\n                          onChange = {(e) => {\r\n                            onChangeNewCar(e);\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                  );\r\n                }\r\n              })}\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form>\r\n                  <Form.Group>\r\n                    <Form.Label> Image </Form.Label>\r\n                    <Form.File\r\n                      id = \"image\"\r\n                      onChange = {(e) => {\r\n                        var newCarCopy = JSON.parse(JSON.stringify(newCar));\r\n                        var file = e.target.files[0];\r\n                        if(file) {\r\n                          var extension = file.name.split('.').pop();\r\n                          var imageId = uuidv4().toString() + GENERICFUNCTIONS.getRandomString();\r\n                          var fileType = file.type;\r\n                          newCarCopy.imageId = imageId;\r\n                          newCarCopy.imageType = fileType;\r\n                          var renamedFile = new File([file], imageId + \".\" + extension, {\r\n                            type: fileType\r\n                          });\r\n                          setNewCarImage(renamedFile);\r\n                          setNewCar(newCarCopy);\r\n                        }\r\n                        else {\r\n                          setNewCarImage();\r\n                          newCarCopy.imageId = \"\";\r\n                          setNewCar(newCarCopy);\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Form.Group>\r\n                </Form>\r\n              </Col>\r\n              <Col>\r\n                <Button type = \"submit\" variant = \"success\" disabled = {isLoading} style = {{float: \"right\", marginTop: \"10%\"}}>\r\n                  Add\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n      <Row style = {{marginTop: \"5%\"}}>\r\n        <Col>\r\n          <Row>\r\n            <Button variant = \"outline-dark\" style = {{marginRight: \"3%\"}}\r\n              onClick = {() => {setShowCarModal(true)}}\r\n            >\r\n              +\r\n            </Button>\r\n            <h4 style = {{marginTop: \"0.5%\"}}> Your Cars </h4>\r\n            <Col style = {{textAlign: \"right\"}}>\r\n              {isLoading ?\r\n                <Spinner animation = \"border\"/>\r\n                :\r\n                <div></div>\r\n              }\r\n            </Col>\r\n          </Row>\r\n          {cars.length === 0 ?\r\n            <div></div>\r\n          :\r\n            <div>\r\n              <br/>\r\n              <Row style = {{textAlign: \"center\"}}>\r\n                <Col>\r\n                  <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                    onClick = {() => {setIsListView(true)}}\r\n                  >\r\n                    <i class = \"fa fa-bars\"> </i> List\r\n                  </Button>\r\n                </Col>\r\n                <Col>\r\n                  <Button variant = \"light\"\r\n                    onClick = {() => {setIsListView(false)}}\r\n                  >\r\n                    <i class = \"fa fa-th-large\"> </i> Grid\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          }\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any cars. Click the + button to add a car 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col xs = {5}>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Figure style = {{height: \"50px\", marginTop: \"1%\"}}>\r\n                                <Figure.Image\r\n                                  width = {100}\r\n                                  height = {100}\r\n                                  src = \"car-holder.png\"\r\n                                />\r\n                              </Figure>\r\n                              :\r\n                              <Figure style = {{height: \"50px\", marginTop: \"1%\"}}>\r\n                                <Figure.Image\r\n                                  width = {100}\r\n                                  height = {100}\r\n                                  src = {car.imageUrl}\r\n                                />\r\n                              </Figure>\r\n                            }\r\n                          </Col>\r\n                          <Col xs = {7} style = {{float: \"right\"}}>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <b> {car.name} </b> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col md = {3} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img id = {car.carId} variant = \"top\" src = \"car-holder.png\"/>\r\n                          :\r\n                          <Card.Img id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <Card.Header>\r\n                  Upcoming Maintenance 🛠️\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  You have nothing scheduled for your cars.\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HomeMobile;\r\n",["81","82"],"C:\\Users\\domin\\autohub\\src\\components\\Home.js",["83","84","85","86","87","88","89","90","91","92"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction Home(props) {\r\n\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[newCar, setNewCar] = useState({}); //state object for creating a new car\r\n  const[newCarImage, setNewCarImage] = useState(); //temp holder for newCar image upload\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[isListView, setIsListView] = useState(false); //flag to toggle the mode of displaying cars (list vs. grid)\r\n  const[isLoading, setIsLoading] = useState(false); //flag to toggle spinner\r\n  const[carModalFormValidated, setCarModalFormValidated] = useState(false); //flag to toggle form validation of the car modal\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n    setNewCar(CARMODEL.car);\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  //adds a car to the cars db collectionName\r\n  function addCar() {\r\n    if(props.userInfo === undefined) {\r\n      //TODO: handle this error more elegantly\r\n      alert(\"User data undefined. Cannot add new car\");\r\n    }\r\n    setIsLoading(true);\r\n    var userCreated = props.userInfo.email;\r\n    var carId = GENERICFUNCTIONS.generateId();\r\n    newCar.userCreated = userCreated;\r\n    newCar.carId = carId;\r\n    if(newCarImage !== undefined) {\r\n      STORAGE.uploadFile(newCarImage, \"images/\"+props.userInfo.uid+\"/\"+newCarImage.name,\r\n        function(url) {\r\n          newCar.imageUrl = url;\r\n          DB.writeOne(carId, newCar, \"cars\",\r\n            function() {\r\n              handleCarModalClose();\r\n              setIsLoading(false);\r\n            },\r\n            function(error) {\r\n              //TODO: handle this error more elegantly\r\n              alert(error.toString());\r\n              setIsLoading(false);\r\n            }\r\n          );\r\n        }\r\n      );\r\n    }\r\n    else {\r\n      DB.writeOne(carId, newCar, \"cars\",\r\n        function() {\r\n          handleCarModalClose();\r\n          setIsLoading(false);\r\n        },\r\n        function(error) {\r\n          //TODO: handle this error more elegantly\r\n          alert(error.toString());\r\n          setIsLoading(false);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  //function to handle car modal closing\r\n  function handleCarModalClose() {\r\n    setNewCar(CARMODEL.car);\r\n    setNewCarImage();\r\n    setShowCarModal(false);\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //function to handle adding values to newCar\r\n  function onChangeNewCar(e) {\r\n    var newCarCopy = JSON.parse(JSON.stringify(newCar));\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    newCarCopy[name] = value;\r\n    setNewCar(newCarCopy);\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //handle submit for car modal form\r\n  function handleCarModalSubmit(e) {\r\n    const form = e.currentTarget;\r\n    setCarModalFormValidated(true);\r\n    if(checkNewCarFields() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    else {\r\n      addCar();\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  //check if required fields have been filled\r\n  function checkNewCarFields() {\r\n    var isValid = true;\r\n    for(var i = 0; i < CARMODEL.publicFields.length; i++) {\r\n      var field = CARMODEL.publicFields[i];\r\n      if(field.required && newCar[field.value].toString().trim().length === 0) {\r\n        newCar[field.value] = \"\";\r\n        isValid = false;\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n        {/*add car modal*/}\r\n        <Modal\r\n          show = {showCarModal}\r\n          onHide = {handleCarModalClose}\r\n          backdrop = \"static\"\r\n          keyboard = {false}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title> Add Car </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form noValidate validated = {carModalFormValidated} onSubmit = {handleCarModalSubmit}>\r\n              <Row style = {{marginLeft: \"3%\", marginRight: \"3%\"}}>\r\n                {CARMODEL.publicFields.map((field) => {\r\n                  if(field.inputType === \"input\") {\r\n                    return (\r\n                        <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                          <Form.Label> {field.displayName} </Form.Label>\r\n                          <Form.Control\r\n                            required = {field.required}\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {newCar[field.value]}\r\n                            onChange = {(e) => {\r\n                              onChangeNewCar(e);\r\n                            }}\r\n                          />\r\n                          <Form.Control.Feedback type = \"invalid\">\r\n                            Required\r\n                          </Form.Control.Feedback>\r\n                        </Col>\r\n                    );\r\n                  }\r\n                  else if(field.inputType === \"select\") {\r\n                    return (\r\n                        <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                          <Form.Label> {field.displayName} </Form.Label>\r\n                          <Form.Control\r\n                            required = {field.required}\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            onChange = {(e) => {\r\n                              onChangeNewCar(e);\r\n                            }}\r\n                          >\r\n                            <option value = \"\" selected disabled hidden> Year </option>\r\n                              {field.modalSelectData.map((data) => {\r\n                                return (\r\n                                  <option value = {data}> {data} </option>\r\n                                );\r\n                              })}\r\n                          </Form.Control>\r\n                          <Form.Control.Feedback type = \"invalid\">\r\n                            Required\r\n                          </Form.Control.Feedback>\r\n                        </Col>\r\n                    );\r\n                  }\r\n                  else {\r\n                    return (\r\n                        <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                          <Form.Label> {field.displayName} </Form.Label>\r\n                          <Form.Control\r\n                            required = {field.required}\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {newCar[field.value]}\r\n                            onChange = {(e) => {\r\n                              onChangeNewCar(e);\r\n                            }}\r\n                          />\r\n                        </Col>\r\n                    );\r\n                  }\r\n                })}\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Form>\r\n                    <Form.Group>\r\n                      <Form.Label> Image </Form.Label>\r\n                      <Form.File\r\n                        id = \"image\"\r\n                        onChange = {(e) => {\r\n                          var newCarCopy = JSON.parse(JSON.stringify(newCar));\r\n                          var file = e.target.files[0];\r\n                          if(file) {\r\n                            var extension = file.name.split('.').pop();\r\n                            var imageId = uuidv4().toString() + GENERICFUNCTIONS.getRandomString();\r\n                            var fileType = file.type;\r\n                            newCarCopy.imageId = imageId;\r\n                            newCarCopy.imageType = fileType;\r\n                            var renamedFile = new File([file], imageId + \".\" + extension, {\r\n                              type: fileType\r\n                            });\r\n                            setNewCarImage(renamedFile);\r\n                            setNewCar(newCarCopy);\r\n                          }\r\n                          else {\r\n                            setNewCarImage();\r\n                            newCarCopy.imageId = \"\";\r\n                            setNewCar(newCarCopy);\r\n                          }\r\n                        }}\r\n                      />\r\n                    </Form.Group>\r\n                  </Form>\r\n                </Col>\r\n                <Col>\r\n                  <Button type = \"submit\" variant = \"success\" disabled = {isLoading} style = {{float: \"right\", marginTop: \"10%\"}}>\r\n                    Add\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </Modal.Body>\r\n        </Modal>\r\n      <Row style = {{marginTop: \"2%\"}}>\r\n        <Col lg = {7}>\r\n          <Row>\r\n            <Col xs = {4}>\r\n              <Button variant = \"outline-dark\" style = {{float: \"left\", marginRight: \"3%\"}}\r\n                onClick = {() => {setShowCarModal(true)}}\r\n              >\r\n                +\r\n              </Button>\r\n              <h4 style = {{marginTop: \"0.5%\"}}> Your Cars </h4>\r\n            </Col>\r\n            <Col xs = {4} style = {{textAlign: \"center\"}}>\r\n              {isLoading ?\r\n                <Spinner animation = \"border\"/>\r\n                :\r\n                <div></div>\r\n              }\r\n            </Col>\r\n            {cars.length === 0 ?\r\n              <div></div>\r\n              :\r\n              <Col xs = {4} style = {{textAlign: \"right\"}}>\r\n                <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                  onClick = {() => {setIsListView(true)}}\r\n                >\r\n                  <i class = \"fa fa-bars\"> </i> List\r\n                </Button>\r\n                <Button variant = \"light\"\r\n                  onClick = {() => {setIsListView(false)}}\r\n                >\r\n                  <i class = \"fa fa-th-large\"> </i> Grid\r\n                </Button>\r\n              </Col>\r\n            }\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any cars. Click the + button to add a car 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Figure style = {{height: \"50px\", marginTop: \"1%\"}}>\r\n                                <Figure.Image\r\n                                  width = {100}\r\n                                  height = {100}\r\n                                  src = \"car-holder.png\"\r\n                                />\r\n                              </Figure>\r\n                              :\r\n                              <Figure style = {{height: \"50px\", marginTop: \"1%\"}}>\r\n                                <Figure.Image\r\n                                  width = {100}\r\n                                  height = {100}\r\n                                  src = {car.imageUrl}\r\n                                />\r\n                              </Figure>\r\n                            }\r\n                          <Col>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <b> {car.name} </b> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col md = {3} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img id = {car.carId} variant = \"top\" src = \"car-holder.png\"/>\r\n                          :\r\n                          <Card.Img id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <Card.Header>\r\n                  Upcoming Maintenance 🛠️\r\n                  {/*\r\n                  <Button\r\n                    variant = \"outline-dark\"\r\n                    style = {{float: \"right\"}}\r\n                    size = \"sm\"\r\n                    disabled = {cars.length === 0}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                  */}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  You have nothing scheduled for your cars.\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n",["93","94"],"C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js",["95","96"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst CARMODEL = require('../models/car.js');\r\n\r\nfunction CarInfo(props) {\r\n\r\n  const[car, setCar] = useState();\r\n\r\n  useEffect(() => {\r\n    getCar(props.match.params.carId);\r\n  }, [props.match.params.carId])\r\n\r\n  function getCar(carId) {\r\n    if(carId === undefined || carId === null) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"carId\", carId, \"cars\").onSnapshot(quereySnapshot => {\r\n      if(quereySnapshot.docs.length > 1) {\r\n        alert(\"Internal error. Could not find car in database.\");\r\n      }\r\n      else {\r\n        setCar(quereySnapshot.docs[0].data());\r\n      }\r\n    });\r\n  }\r\n\r\n  if(car === undefined) {\r\n    return (\r\n      <Container>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <br/>\r\n      <Row>\r\n        <Col>\r\n          <Tabs defaultActiveKey = \"info\" id = {car.carId}>\r\n            <Tab eventKey = \"info\" title = \"Info\">\r\n            </Tab>\r\n            <Tab eventKey = \"scheduled-maintenance-log\" title = \"Scheduled Log\">\r\n            </Tab>\r\n            <Tab eventKey = \"repair-maintenance-log\" title = \"Repair Log\">\r\n            </Tab>\r\n          </Tabs>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CarInfo;\r\n",["97","98"],"C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js",[],"C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js",["99"],"C:\\Users\\domin\\autohub\\src\\components\\Login.js",["100","101","102"],"C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js",["103","104","105","106"],"C:\\Users\\domin\\autohub\\src\\models\\car.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\storage.js",[],"C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js",[],"C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js",["107","108","109"],"C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\auth.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\db.js",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":11,"column":8,"nodeType":"116","messageId":"117","endLine":11,"endColumn":22},{"ruleId":"114","severity":1,"message":"118","line":12,"column":8,"nodeType":"116","messageId":"117","endLine":12,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":38,"column":6,"nodeType":"121","endLine":38,"endColumn":22,"suggestions":"122"},{"ruleId":"114","severity":1,"message":"123","line":121,"column":11,"nodeType":"116","messageId":"117","endLine":121,"endColumn":15},{"ruleId":"124","severity":1,"message":"125","line":329,"column":21,"nodeType":"116","messageId":"126","endLine":329,"endColumn":26},{"ruleId":"127","severity":1,"message":"128","line":337,"column":65,"nodeType":"129","messageId":"130","endLine":337,"endColumn":66},{"ruleId":"127","severity":1,"message":"128","line":368,"column":53,"nodeType":"129","messageId":"130","endLine":368,"endColumn":54},{"ruleId":"131","severity":1,"message":"132","line":386,"column":21,"nodeType":"133","endLine":390,"endColumn":22},{"ruleId":"127","severity":1,"message":"128","line":388,"column":63,"nodeType":"129","messageId":"130","endLine":388,"endColumn":64},{"ruleId":"127","severity":1,"message":"128","line":405,"column":51,"nodeType":"129","messageId":"130","endLine":405,"endColumn":52},{"ruleId":"110","replacedBy":"134"},{"ruleId":"112","replacedBy":"135"},{"ruleId":"114","severity":1,"message":"115","line":11,"column":8,"nodeType":"116","messageId":"117","endLine":11,"endColumn":22},{"ruleId":"114","severity":1,"message":"118","line":12,"column":8,"nodeType":"116","messageId":"117","endLine":12,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":38,"column":6,"nodeType":"121","endLine":38,"endColumn":22,"suggestions":"136"},{"ruleId":"114","severity":1,"message":"123","line":120,"column":11,"nodeType":"116","messageId":"117","endLine":120,"endColumn":15},{"ruleId":"124","severity":1,"message":"125","line":323,"column":21,"nodeType":"116","messageId":"126","endLine":323,"endColumn":26},{"ruleId":"127","severity":1,"message":"128","line":331,"column":65,"nodeType":"129","messageId":"130","endLine":331,"endColumn":66},{"ruleId":"127","severity":1,"message":"128","line":360,"column":53,"nodeType":"129","messageId":"130","endLine":360,"endColumn":54},{"ruleId":"131","severity":1,"message":"132","line":378,"column":21,"nodeType":"133","endLine":382,"endColumn":22},{"ruleId":"127","severity":1,"message":"128","line":380,"column":63,"nodeType":"129","messageId":"130","endLine":380,"endColumn":64},{"ruleId":"127","severity":1,"message":"128","line":397,"column":51,"nodeType":"129","messageId":"130","endLine":397,"endColumn":52},{"ruleId":"110","replacedBy":"137"},{"ruleId":"112","replacedBy":"138"},{"ruleId":"114","severity":1,"message":"139","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":14},{"ruleId":"114","severity":1,"message":"140","line":12,"column":7,"nodeType":"116","messageId":"117","endLine":12,"endColumn":15},{"ruleId":"110","replacedBy":"141"},{"ruleId":"112","replacedBy":"142"},{"ruleId":"119","severity":1,"message":"143","line":33,"column":6,"nodeType":"121","endLine":33,"endColumn":22,"suggestions":"144"},{"ruleId":"114","severity":1,"message":"145","line":1,"column":27,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"146","line":11,"column":7,"nodeType":"116","messageId":"117","endLine":11,"endColumn":11},{"ruleId":"114","severity":1,"message":"147","line":15,"column":22,"nodeType":"116","messageId":"117","endLine":15,"endColumn":39},{"ruleId":"114","severity":1,"message":"148","line":5,"column":8,"nodeType":"116","messageId":"117","endLine":5,"endColumn":17},{"ruleId":"114","severity":1,"message":"149","line":40,"column":9,"nodeType":"116","messageId":"117","endLine":40,"endColumn":12},{"ruleId":"114","severity":1,"message":"149","line":112,"column":9,"nodeType":"116","messageId":"117","endLine":112,"endColumn":12},{"ruleId":"114","severity":1,"message":"149","line":122,"column":9,"nodeType":"116","messageId":"117","endLine":122,"endColumn":12},{"ruleId":"114","severity":1,"message":"150","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"145","line":1,"column":27,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"151","line":6,"column":8,"nodeType":"116","messageId":"117","endLine":6,"endColumn":13},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"no-unused-vars","'DropdownButton' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCars'. Either include it or remove the dependency array.","ArrayExpression",["154"],"'form' is assigned a value but never used.","no-redeclare","'style' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["152"],["153"],["155"],["152"],["153"],"'Button' is defined but never used.","'CARMODEL' is assigned a value but never used.",["152"],["153"],"React Hook useEffect has missing dependencies: 'getCars' and 'getSsts'. Either include them or remove the dependency array.",["156"],"'useEffect' is defined but never used.","'AUTH' is assigned a value but never used.","'toggleRegistering' is assigned a value but never used.","'Container' is defined but never used.","'len' is assigned a value but never used.","'useState' is defined but never used.","'Image' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"157","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [getCars, props.userInfo]",{"range":"162","text":"163"},{"range":"164","text":"163"},"Update the dependencies array to be: [getCars, getSsts, props.userInfo]",{"range":"165","text":"166"},[1675,1691],"[getCars, props.userInfo]",[1696,1712],[1111,1127],"[getCars, getSsts, props.userInfo]"]