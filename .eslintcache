[{"C:\\Users\\domin\\autohub\\src\\index.js":"1","C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js":"2","C:\\Users\\domin\\autohub\\src\\components\\Home.js":"3","C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js":"4","C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js":"5","C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js":"6","C:\\Users\\domin\\autohub\\src\\components\\Login.js":"7","C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js":"8","C:\\Users\\domin\\autohub\\src\\models\\car.js":"9","C:\\Users\\domin\\autohub\\src\\controllers\\storage.js":"10","C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js":"11","C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js":"12","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js":"13","C:\\Users\\domin\\autohub\\src\\controllers\\auth.js":"14","C:\\Users\\domin\\autohub\\src\\controllers\\db.js":"15","C:\\Users\\domin\\autohub\\src\\App.js":"16","C:\\Users\\domin\\autohub\\src\\components\\CarModal.js":"17","C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js":"18","C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js":"19","C:\\Users\\domin\\autohub\\src\\models\\logOptions.js":"20","C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js":"21","C:\\Users\\domin\\autohub\\src\\models\\repairService.js":"22","C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js":"23","C:\\Users\\domin\\autohub\\src\\components\\LogFilters.js":"24","C:\\Users\\domin\\autohub\\src\\components\\UpcomingMaintenance.js":"25","C:\\Users\\domin\\autohub\\src\\components\\ErrorHandler.js":"26","C:\\Users\\domin\\autohub\\src\\controllers\\errorLog.js":"27"},{"size":338,"mtime":1606338417443,"results":"28","hashOfConfig":"29"},{"size":7906,"mtime":1610784631643,"results":"30","hashOfConfig":"29"},{"size":7734,"mtime":1610835245681,"results":"31","hashOfConfig":"29"},{"size":17843,"mtime":1610835896845,"results":"32","hashOfConfig":"29"},{"size":539,"mtime":1606122737011,"results":"33","hashOfConfig":"29"},{"size":9941,"mtime":1610670519560,"results":"34","hashOfConfig":"29"},{"size":5194,"mtime":1610605129855,"results":"35","hashOfConfig":"29"},{"size":23800,"mtime":1610670552473,"results":"36","hashOfConfig":"29"},{"size":1936,"mtime":1610576758255,"results":"37","hashOfConfig":"29"},{"size":2024,"mtime":1610857759868,"results":"38","hashOfConfig":"29"},{"size":867,"mtime":1610576758271,"results":"39","hashOfConfig":"29"},{"size":2547,"mtime":1610784716007,"results":"40","hashOfConfig":"29"},{"size":2434,"mtime":1610576758246,"results":"41","hashOfConfig":"29"},{"size":1219,"mtime":1610852595810,"results":"42","hashOfConfig":"29"},{"size":2253,"mtime":1610855243687,"results":"43","hashOfConfig":"29"},{"size":4688,"mtime":1610835548730,"results":"44","hashOfConfig":"29"},{"size":10323,"mtime":1610854881636,"results":"45","hashOfConfig":"29"},{"size":2640,"mtime":1610576758267,"results":"46","hashOfConfig":"29"},{"size":38127,"mtime":1610783424516,"results":"47","hashOfConfig":"29"},{"size":1000,"mtime":1610576758258,"results":"48","hashOfConfig":"29"},{"size":31252,"mtime":1610783541811,"results":"49","hashOfConfig":"29"},{"size":1702,"mtime":1610576758262,"results":"50","hashOfConfig":"29"},{"size":127,"mtime":1610576758275,"results":"51","hashOfConfig":"29"},{"size":9647,"mtime":1610679037330,"results":"52","hashOfConfig":"29"},{"size":12339,"mtime":1610784023398,"results":"53","hashOfConfig":"29"},{"size":916,"mtime":1610850152196,"results":"54","hashOfConfig":"29"},{"size":106,"mtime":1610854523920,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"8mgafs",{"filePath":"59","messages":"60","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\domin\\autohub\\src\\index.js",[],["123","124"],"C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport CarModal from './CarModal.js';\r\nimport UpcomingMaintenance from './UpcomingMaintenance.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction HomeMobile(props) {\r\n\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[isListView, setIsListView] = useState(true); //flag to toggle the mode of displaying cars (list vs. grid)\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      console.log(cars);\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {showCarModal}\r\n        setShow = {setShowCarModal}\r\n        title = \"Add Vehicle\"\r\n        car = {CARMODEL.car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n    <Row style = {{marginTop: \"25px\"}}>\r\n        <Col>\r\n          <Row>\r\n            <Button variant = \"outline-dark\" style = {{marginRight: \"3%\"}}\r\n              onClick = {() => {setShowCarModal(true)}}\r\n            >\r\n              +\r\n            </Button>\r\n            <h4 style = {{marginTop: \"0.5%\"}}> Your Vehicles </h4>\r\n          </Row>\r\n          {cars.length === 0 ?\r\n            <div></div>\r\n          :\r\n            <div>\r\n              <br/>\r\n              <Row style = {{textAlign: \"center\"}}>\r\n                <Col>\r\n                  <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                    onClick = {() => {setIsListView(true)}}\r\n                  >\r\n                    <i class = \"fa fa-bars\"> </i> List\r\n                  </Button>\r\n                </Col>\r\n                <Col>\r\n                  <Button variant = \"light\"\r\n                    onClick = {() => {setIsListView(false)}}\r\n                  >\r\n                    <i class = \"fa fa-th-large\"> </i> Grid\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          }\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any vehicles. Click the + button to add a vehicle 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col xs = {8} style = {{float: \"right\"}}>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <strong> {car.name} </strong> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <small> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </small> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                          <Col xs = {4} style = {{textAlign: \"right\"}}>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Image src = \"car-holder.png\" style = {{width: \"65px\", height: \"70px\"}} />\r\n                              :\r\n                              <Image src = {car.imageUrl} style = {{width: \"65px\", height: \"70px\"}} />\r\n                            }\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col xs = {12} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img style = {{height: \"200px\"}} id = {car.carId} variant = \"top\" src = \"car-holder.png\" />\r\n                          :\r\n                          <Card.Img style = {{height: \"200px\"}} id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <small> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </small> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n              <UpcomingMaintenance\r\n                cars = {cars}\r\n                userCreated = {props.userInfo.email}\r\n              />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HomeMobile;\r\n",["140","141"],"C:\\Users\\domin\\autohub\\src\\components\\Home.js",["142","143","144","145","146","147","148","149","150","151","152","153","154","155"],"C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js",["156","157","158","159","160"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Image from 'react-bootstrap/Image';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Pie from 'react-chartjs-2';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\n\r\nimport CarModal from '../components/CarModal.js';\r\nimport ScheduledLog from '../components/ScheduledLog.js';\r\nimport RepairLog from '../components/RepairLog.js';\r\nimport UpcomingMaintenance from '../components/UpcomingMaintenance.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction CarInfo(props) {\r\n\r\n  const[car, setCar] = useState();\r\n  const[cars, setCars] = useState([]); //THIS IS ONLY USED TO PUSH THE CAR INTO AN ARRAY AND PASS IT AS PROPS TO UPCOMINGMAINTENANCE COMPONENT\r\n  const[serviceLog, setServiceLog] = useState();\r\n  const[ssts, setSsts] = useState();\r\n  const[show, setShow] = useState(false);\r\n  const[deleteShow, setDeleteShow] = useState(false);\r\n  const[deleteCarShow, setDeleteCarShow] = useState(false);\r\n  const[showEmpty, setShowEmpty] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getCar(props.match.params.carId);\r\n    getSsts();\r\n    getServiceLog(props.match.params.carId);\r\n  }, [props.match.params.carId, props.userInfo])\r\n\r\n  function getCar(carId) {\r\n    if(carId === undefined || carId === null) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"carId\", carId, \"cars\").onSnapshot(quereySnapshot => {\r\n      if(quereySnapshot.docs.length > 1 || quereySnapshot.docs[0] === undefined) {\r\n        //alert(\"Internal error. Could not find car in database.\");\r\n        setShowEmpty(true);\r\n      }\r\n      else {\r\n        setCar(quereySnapshot.docs[0].data());\r\n        var cars = [];\r\n        cars.push(quereySnapshot.docs[0].data());\r\n        setCars(cars);\r\n      }\r\n    });\r\n  }\r\n\r\n  function getServiceLog(carId) {\r\n    if(carId === undefined || carId === null) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"carReferenceId\", carId, \"serviceLogs\").onSnapshot(quereySnapshot => {\r\n      if(quereySnapshot.docs.length > 1 || quereySnapshot.docs[0] === undefined) {\r\n        //alert(\"Internal error. Could not find car's service log in database.\");\r\n        setShowEmpty(true);\r\n      }\r\n      else {\r\n        var serviceLog = quereySnapshot.docs[0].data();\r\n        if(serviceLog !== undefined) {\r\n          var len;\r\n          var repairLen = serviceLog.repairLog.length;\r\n          var scheduledLen = serviceLog.scheduledLog.length;\r\n          if(repairLen > scheduledLen) {\r\n            len = serviceLog.repairLog.length;\r\n          }\r\n          else {\r\n            len = serviceLog.scheduledLog.length;\r\n          }\r\n          /*\r\n          for(var i = 0; i < len; i++) {\r\n            if(i < repairLen && repairLen !== 0) {\r\n              serviceLog.repairLog[i].datePerformed = new Date(serviceLog.repairLog[i].datePerformed);\r\n            }\r\n            if(i < scheduledLen && scheduledLen !== 0) {\r\n              serviceLog.scheduledLog[i].datePerformed = new Date(serviceLog.scheduledLog[i].datePerformed);\r\n            }\r\n          }\r\n          */\r\n        }\r\n        setServiceLog(serviceLog);\r\n      }\r\n    });\r\n  }\r\n\r\n  function getSsts() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"scheduledServiceTypes\").onSnapshot(quereySnapshot => {\r\n      var ssts = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        ssts.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setSsts(ssts);\r\n    });\r\n  }\r\n\r\n  function resetCarImageFields() {\r\n    var copy = JSON.parse(JSON.stringify(car));\r\n    copy.imageId = \"\";\r\n    copy.imageUrl = \"\";\r\n    DB.writeOne(copy.carId, copy, \"cars\",\r\n      function(data) {\r\n        setCar(data);\r\n        setDeleteShow(false);\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setDeleteShow(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  function deleteCarImage() {\r\n    if(car === undefined) {\r\n      alert(\"Internal error. Could not delete car image\");\r\n      return;\r\n    }\r\n    STORAGE.deleteFile(car.imageUrl,\r\n      function() {\r\n        setDeleteShow(false);\r\n        if(showEmpty || deleteCarShow) {\r\n          return;\r\n        }\r\n        resetCarImageFields();\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setDeleteShow(false);\r\n        setDeleteCarShow(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  function deleteServiceLog() {\r\n    DB.deleteOne(serviceLog.logId, \"serviceLogs\",\r\n      function() {\r\n        return;\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  //deletes car and all other objects associated with it\r\n  function deleteCar() {\r\n    DB.deleteOne(car.carId, \"cars\",\r\n      function() {\r\n        removeCarFromSsts();\r\n        deleteServiceLog();\r\n        if(car.imageId.length !== 0 && car.imageUrl.length !== 0) {\r\n          deleteCarImage();\r\n        }\r\n        setDeleteCarShow(false);\r\n        setShowEmpty(true);\r\n      },\r\n      function(error) {\r\n        setDeleteCarShow(false);\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  function removeCarFromSsts() {\r\n    for(var i = 0; i < ssts.length; i++) {\r\n      var sst = ssts[i];\r\n      if(sst.carsScheduled[car.carId] !== undefined) {\r\n        delete sst.carsScheduled[car.carId];\r\n        DB.writeOne(sst.typeId, sst, \"scheduledServiceTypes\",\r\n          function() {\r\n            return;\r\n          },\r\n          function(error) {\r\n            setDeleteCarShow(false);\r\n            alert(error);\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  function calculateCostBreakdown() {\r\n    var costs = [];\r\n    var colors = [\"red\", \"green\", \"blue\", \"orange\"];\r\n    //var colors = GENERICFUNCTIONS.randomColors(4);\r\n    costs.push(Number(car.scheduledCost.partsCost));\r\n    costs.push(Number(car.scheduledCost.laborCost));\r\n    costs.push(Number(car.repairCost.partsCost));\r\n    costs.push(Number(car.repairCost.laborCost));\r\n    var data = {\r\n      datasets: [{\r\n        data: costs,\r\n        backgroundColor: colors,\r\n        hoverBackgroundColor: colors\r\n      }],\r\n      labels: [\"Scheduled Parts Cost\", \"Scheduled Labor Cost\", \"Repair Parts Cost\", \"Repair Labor Cost\"],\r\n    };\r\n    return data;\r\n  }\r\n\r\n  if(car === undefined || ssts === undefined || serviceLog === undefined || showEmpty) {\r\n    if(showEmpty) {\r\n      return (\r\n        <Container>\r\n          <br/>\r\n          <Row>\r\n            <Col style = {{textAlign: \"center\"}}>\r\n              <h5> This car does not exist 😯 </h5>\r\n            </Col>\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n            <Col style = {{textAlign: \"center\"}}>\r\n              <Button onClick = {() => {window.location.pathname = \"/\"}}>\r\n                Return home\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      <Container>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {show}\r\n        setShow = {setShow}\r\n        title = \"Edit Vehicle\"\r\n        car = {car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Modal\r\n        show = {deleteShow}\r\n        onHide = {() => {setDeleteShow(false)}}\r\n        backdrop = \"static\"\r\n        keyboard = {false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> Delete Vehicle Image </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Row>\r\n            <Col lg = {6} style = {{marginBottom: \"5%\"}}>\r\n              Are you sure you want to delete this image?\r\n            </Col>\r\n            <Col lg = {6} style = {{textAlign: \"center\"}}>\r\n              <Image src = {car.imageUrl} style = {{width: \"175px\", height: \"175px\"}} />\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {deleteCarImage()}}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {setDeleteShow(false)}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        show = {deleteCarShow}\r\n        onHide = {() => {setDeleteCarShow(false)}}\r\n        backdrop = \"static\"\r\n        keyboard = {false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> Delete Vehicle </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Alert variant = \"danger\">\r\n            <Alert.Heading>\r\n              Warning\r\n            </Alert.Heading>\r\n            Are you sure you want to delete this vehicle? (all of this vehicle's data will be lost)\r\n          </Alert>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {deleteCar()}}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {setDeleteCarShow(false)}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <br/>\r\n      <Row>\r\n        <Col>\r\n          <Tabs defaultActiveKey = \"info\" id = {car.carId}>\r\n            <Tab eventKey = \"info\" title = \"Info\">\r\n              <br/>\r\n              <Row>\r\n                <Col lg = {6} style = {{marginBottom: \"5%\"}}>\r\n                  <Row>\r\n                    <Col>\r\n                      <Row>\r\n                        <Col style = {{textAlign: \"right\"}}>\r\n                          <DropdownButton title = \"⚙️\" variant = \"outline-dark\" menuAlign = \"right\">\r\n                            <Dropdown.Item onClick = {() => {setShow(true)}}> Edit </Dropdown.Item>\r\n                            <Dropdown.Item disabled = {car.imageUrl.trim().length === 0} onClick = {() => {setDeleteShow(true)}}> Delete Image </Dropdown.Item>\r\n                            <Dropdown.Item onClick = {() => {setDeleteCarShow(true)}}> Delete Vehicle </Dropdown.Item>\r\n                          </DropdownButton>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md = {12}>\r\n                          <Row>\r\n                            <Col xl = {4} style = {{marginBottom: \"2%\", textAlign: \"center\"}}>\r\n                              {car.imageUrl.trim().length === 0 ?\r\n                                <Image src = \"/noImage.png\" style = {{width: \"175px\", height: \"175px\"}} />\r\n                                :\r\n                                <Image src = {car.imageUrl} style = {{width: \"175px\", height: \"175px\"}} />\r\n                              }\r\n                            </Col>\r\n                            <Col xl = {8}>\r\n                              <Row>\r\n                                <Col md = {12}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[0].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[0].value]}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                              <Row>\r\n                                <Col md = {12}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[1].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[1].value]}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                              <Row>\r\n                                <Col sm = {4}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[2].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[2].value]}\r\n                                  />\r\n                                </Col>\r\n                                <Col sm = {4}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[3].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[3].value]}\r\n                                  />\r\n                                </Col>\r\n                                <Col sm = {4}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[4].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[4].value]}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                            </Col>\r\n                          </Row>\r\n                        </Col>\r\n                        {CARMODEL.publicFields.map((field, index) => {\r\n                          if(index < 5) {\r\n                            return (\r\n                              <div></div>\r\n                            );\r\n                          }\r\n                          return (\r\n                            <Col md = {field.modalColSpan}>\r\n                              <div style = {{marginBottom: \"1%\"}}> {field.displayName} </div>\r\n                              <Form.Control\r\n                                as = {field.inputType === \"select\" ? \"input\" : field.inputType}\r\n                                size = \"sm\"\r\n                                readOnly\r\n                                style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                value = {car[field.value]}\r\n                              />\r\n                            </Col>\r\n                          );\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n                <Col lg = {6}>\r\n                  <Row>\r\n                    <Col>\r\n                      <UpcomingMaintenance\r\n                        cars = {cars}\r\n                        userCreated = {props.userInfo.email}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <br style = {{height: \"50%\"}} />\r\n                  <Row>\r\n                    <Col>\r\n                      <Card>\r\n                        <Card.Header>\r\n                          Cost Breakdown 💰\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                          <Card.Text>\r\n                            <Pie\r\n                              data = {calculateCostBreakdown()}\r\n                              options = {{ maintainAspectRatio: false }}\r\n                              height = {200}\r\n                              width = {200}\r\n                              style = {{minWidth: \"200px\", minHeight: \"200px\"}}\r\n                            />\r\n                          </Card.Text>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Tab>\r\n            <Tab eventKey = \"scheduled-maintenance-log\" title = \"Scheduled Log\">\r\n              <br/>\r\n              <ScheduledLog\r\n                userInfo = {props.userInfo}\r\n                serviceLog = {serviceLog}\r\n                ssts = {ssts}\r\n                car = {car}\r\n                carId = {props.match.params.carId}\r\n              />\r\n            </Tab>\r\n            <Tab eventKey = \"repair-maintenance-log\" title = \"Repair Log\">\r\n              <br/>\r\n              <RepairLog\r\n                userInfo = {props.userInfo}\r\n                serviceLog = {serviceLog}\r\n                ssts = {ssts}\r\n                car = {car}\r\n                carId = {props.match.params.carId}\r\n              />\r\n            </Tab>\r\n          </Tabs>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CarInfo;\r\n","C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js",[],["161","162"],"C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js",["163"],"C:\\Users\\domin\\autohub\\src\\components\\Login.js",["164"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport GoogleButton from 'react-google-button';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nconst AUTH = require('../controllers/auth.js');\r\n\r\nfunction Login(props) {\r\n\r\n  const[loginEmail, setLoginEmail] = useState(\"\");\r\n  const[loginPassword, setPassword] = useState(\"\");\r\n  const[registrationEmail, setRegistrationEmail] = useState(\"\");\r\n  const[registrationPassword, setRegistrationPassword] = useState(\"\");\r\n\r\n  function login() {\r\n    if(loginEmail.trim().length === 0 || loginPassword.trim().length === 0) {\r\n      return;\r\n    }\r\n    AUTH.standardLogin(loginEmail, loginPassword);\r\n  }\r\n\r\n  function register() {\r\n    if(registrationEmail.trim().length === 0 || registrationPassword.trim().length === 0) {\r\n      return;\r\n    }\r\n    AUTH.standardRegister(registrationEmail, registrationPassword);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row style = {{height: \"10%\"}}>\r\n      </Row>\r\n\t\t\t<Row>\r\n        <Col></Col>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t<Card.Title\r\n\t\t\t\t\t\t\tstyle = {{textAlign: \"center\", marginTop: \"3%\"}}\r\n\t\t\t\t\t\t>\r\n              AutoHub\r\n              <Image src = \"auto.png\" style = {{marginLeft: \"2%\", marginBottom: \"2%\", width: \"25px\", height: \"25px\"}}/>\r\n\t\t\t\t\t\t</Card.Title>\r\n\t\t\t\t\t\t<Card.Body>\r\n              <Tabs defaultActiveKey = \"login\" id = \"login-register\">\r\n                <Tab eventKey = \"login\" title = \"Login\">\r\n                  <br/>\r\n                  <div>\r\n                    <Row style = {{marginBottom: \"5%\"}}>\r\n                      <Col>\r\n                        <Form.Label> <strong> Email </strong> </Form.Label>\r\n                        <Form.Control\r\n                          as = \"input\"\r\n                          name = \"loginEmail\"\r\n                          value = {loginEmail}\r\n                          onChange = {(e) => {\r\n                            setLoginEmail(e.target.value);\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <Form.Label> <strong> Password </strong> </Form.Label>\r\n                        <Form.Control\r\n                          type = \"password\"\r\n                          name = \"loginPassword\"\r\n                          value = {loginPassword}\r\n                          onChange = {(e) => {\r\n                            setPassword(e.target.value);\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <Row>\r\n                      <Col>\r\n                        <Button variant = \"secondary\" onClick = {() => {login()}}> Login </Button>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                </Tab>\r\n                <Tab eventKey = \"register\" title = \"Register\">\r\n                  <br/>\r\n                  <div>\r\n                    <Row style = {{marginBottom: \"5%\"}}>\r\n                      <Col>\r\n                        <Form.Label> <strong> Email </strong> </Form.Label>\r\n                        <Form.Control\r\n                          as = \"input\"\r\n                          name = \"registrationEmail\"\r\n                          value = {registrationEmail}\r\n                          onChange = {(e) => {\r\n                            setRegistrationEmail(e.target.value);\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <Form.Label> <strong> Password </strong> </Form.Label>\r\n                        <Form.Control\r\n                          type = \"password\"\r\n                          name = \"registrationPassword\"\r\n                          value = {registrationPassword}\r\n                          onChange = {(e) => {\r\n                            setRegistrationPassword(e.target.value);\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <Row>\r\n                      <Col>\r\n                        <Button variant = \"secondary\" onClick = {() => {register()}}> Register </Button>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                </Tab>\r\n              </Tabs>\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<h5> Or </h5>\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t{/*TODO: center and make google button responsive */}\r\n\t\t\t\t\t\t\t\t\t<GoogleButton\r\n\t\t\t\t\t\t\t\t\t\ttype = \"light\"\r\n                    onClick = {props.googleSignin}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col></Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n",["165","166"],"C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js",["167","168","169","170","171"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst SSTModel = require('../models/scheduledServiceType.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\nconst DB = require('../controllers/db.js');\r\n\r\nfunction SSTModal(props) {\r\n\r\n  const[cars, setCars] = useState();\r\n  const[sst, setSst] = useState();\r\n  const[show, setShow] = useState(false);\r\n  const[title, setTitle] = useState(\"\");\r\n  const[validated, setValidated] = useState(false);\r\n  const[toggleApply, setToggleApply] = useState(false);\r\n  const[selectedCars, setSelectedCars] = useState({});\r\n  const[globalInterval, setGlobalInterval] = useState();\r\n  const[isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setShow(props.show);\r\n    setTitle(props.title);\r\n    setGlobalInterval(SSTModel.interval);\r\n    initialize(props.sst, props.cars);\r\n  }, [props.sst, props.show, props.title, props.userInfo, props.cars])\r\n\r\n  function initialize(initSst, initCars) {\r\n    if(initSst === undefined || initCars === undefined) {\r\n      return;\r\n    }\r\n    var len = Object.keys(initSst.carsScheduled).length;\r\n    var selected = {};\r\n    for(var i = 0; i < initCars.length; i++) {\r\n      var car = initCars[i];\r\n      selected[car.carId] = false;\r\n      if(initSst.carsScheduled[car.carId] === undefined) {\r\n        initSst.carsScheduled[car.carId] = SSTModel.interval;\r\n      }\r\n    }\r\n    setSelectedCars(selected);\r\n    setSst(initSst);\r\n    setCars(initCars);\r\n  }\r\n\r\n  function handleModalClose() {\r\n    setIsLoading(false);\r\n    props.setShow(false);\r\n    setToggleApply(false);\r\n    setValidated(false);\r\n    setSst();\r\n    setTitle(\"\");\r\n  }\r\n\r\n  function onChangeInterval(e, id, option) {\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    var copy = JSON.parse(JSON.stringify(sst));\r\n    if(name === \"time\") {\r\n      if(option === \"quantity\" && isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.carsScheduled[id].time[option] = value;\r\n    }\r\n    else {\r\n      if(isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.carsScheduled[id].miles = value;\r\n    }\r\n    setSst(copy);\r\n    setValidated(false);\r\n  }\r\n\r\n  function onChangeGlobalInterval(e, option) {\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    var copy = JSON.parse(JSON.stringify(globalInterval));\r\n    if(name === \"time\") {\r\n      if(option === \"quantity\" && isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.time[option] = value;\r\n    }\r\n    else {\r\n      if(isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.miles = value;\r\n    }\r\n    setGlobalInterval(copy);\r\n  }\r\n\r\n  function getNumSelected() {\r\n    var count = 0;\r\n    for(var key in selectedCars) {\r\n      if(selectedCars[key] === true) {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function selectAll() {\r\n    var len = Object.keys(selectedCars).length;\r\n    var selected = {};\r\n    for(var i = 0; i < cars.length; i++) {\r\n      var car = cars[i];\r\n      selected[car.carId] = true;\r\n    }\r\n    setSelectedCars(selected);\r\n  }\r\n\r\n  function unselectAll() {\r\n    var len = Object.keys(selectedCars).length;\r\n    var selected = {};\r\n    for(var i = 0; i < cars.length; i++) {\r\n      var car = cars[i];\r\n      selected[car.carId] = false;\r\n    }\r\n    setSelectedCars(selected);\r\n  }\r\n\r\n  function selectCar(id) {\r\n    var copy = JSON.parse(JSON.stringify(selectedCars));\r\n    copy[id] = !copy[id];\r\n    setSelectedCars(copy);\r\n  }\r\n\r\n  function applyGlobalInterval() {\r\n    var copy = JSON.parse(JSON.stringify(sst));\r\n    for(var key in copy.carsScheduled) {\r\n      if(selectedCars[key]) {\r\n        copy.carsScheduled[key] = globalInterval;\r\n      }\r\n    }\r\n    setSst(copy);\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    setValidated(true);\r\n    var isValid = checkSubmitFields();\r\n    if(isValid) {\r\n      if(props.userCreated !== undefined) {\r\n        sst.userCreated = props.userCreated;\r\n        if(sst.typeId.trim().length === 0) {\r\n          sst.typeId = GENERICFUNCTIONS.generateId();\r\n        }\r\n        saveSst();\r\n      }\r\n      else {\r\n        alert(\"Internal error. Could not add scheduled service type\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function saveSst() {\r\n    trimSst();\r\n    setIsLoading(true);\r\n    DB.writeOne(sst.typeId, sst, \"scheduledServiceTypes\",\r\n      function() {\r\n        handleModalClose();\r\n        updateServiceLog();\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setIsLoading(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  //have to update serviceNames & intervals in scheduled service log if there is a name change or interval change of an sst\r\n  function updateServiceLog() {\r\n    DB.getQuerey(\"userCreated\", props.userCreated, \"serviceLogs\").onSnapshot(quereySnapshot => {\r\n      var logs = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        logs.push(quereySnapshot.docs[i].data());\r\n      }\r\n      for(var i = 0; i < logs.length; i++) {\r\n        var log = logs[i];\r\n        for(var j = 0; j < log.scheduledLog.length; j++) {\r\n          var service = log.scheduledLog[j];\r\n          if(service.sstRefId === sst.typeId) {\r\n            service.serviceName = sst.serviceName;\r\n            var dateObj = new Date(service.datePerformed);\r\n            var timeUnits = sst.carsScheduled[log.carReferenceId].time.units;\r\n            var timeStep = sst.carsScheduled[log.carReferenceId].time.quantity;\r\n            var mileageInterval = sst.carsScheduled[log.carReferenceId].miles;\r\n            var car = findCar(log.carReferenceId);\r\n            if(timeUnits.trim().length === 0 || Number(timeStep) === 0) {\r\n              service.nextServiceDate = \"\";\r\n            }\r\n            else {\r\n              service.nextServiceDate = GENERICFUNCTIONS.incrementDate(dateObj, timeUnits, timeStep).toLocaleDateString();\r\n            }\r\n            if(Number(mileageInterval) === 0 || mileageInterval.toString().trim().length === 0) {\r\n              service.nextServiceMileage = \"\";\r\n            }\r\n            else {\r\n              if(Number(service.mileage) === 0) {\r\n                service.nextServiceMileage = (Number(sst.carsScheduled[log.carReferenceId].miles) + Number(car.mileage));\r\n              }\r\n              else {\r\n                service.nextServiceMileage = (Number(sst.carsScheduled[log.carReferenceId].miles) + Number(service.mileage));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      DB.writeMany(\"logId\", logs, \"serviceLogs\");\r\n    });\r\n  }\r\n\r\n  function findCar(carId) {\r\n    if(carId === undefined || carId === null) {\r\n      return null;\r\n    }\r\n    for(var i = 0; i < cars.length; i++) {\r\n      if(cars[i].carId === carId) {\r\n        return cars[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  function trimSst() {\r\n    sst.serviceName = sst.serviceName.trim();\r\n    for(var key in sst.carsScheduled) {\r\n      var entry = sst.carsScheduled[key];\r\n      entry.miles = Number(entry.miles.toString().trim());\r\n      entry.time.quantity = Number(entry.time.quantity.toString().trim());\r\n      entry.time.units = entry.time.units.trim();\r\n    }\r\n  }\r\n\r\n  function checkSubmitFields() {\r\n    var isValid = true;\r\n    if(sst.serviceName.trim().length === 0) {\r\n      sst.serviceName = \"\";\r\n      isValid = false;\r\n    }\r\n    for(var key in sst.carsScheduled) {\r\n      var entry = sst.carsScheduled[key];\r\n      if(entry.miles.toString().trim().length === 0) {\r\n        sst.carsScheduled[key].miles = 0;\r\n      }\r\n      if(entry.time.quantity.toString().trim().length === 0) {\r\n        sst.carsScheduled[key].time.quantity = 0;\r\n      }\r\n      if(Number(entry.time.quantity.toString().trim()) > 0 && entry.time.units.trim() === \"none\") {\r\n        isValid = false;\r\n      }\r\n      if(entry.time.units.length !== 0 && entry.time.units !== \"none\" && entry.time.quantity === 0) {\r\n        isValid = false;\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  if(sst === undefined || cars === undefined || sst.carsScheduled === undefined) {\r\n    return <div></div>;\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show = {show}\r\n      onHide = {handleModalClose}\r\n      backdrop = \"static\"\r\n      keyboard = {false}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title> {title} </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label> Service Name </Form.Label>\r\n              <Form.Control\r\n                isInvalid = {validated ? sst.serviceName.trim().length === 0 : undefined}\r\n                size = \"sm\"\r\n                as = \"input\"\r\n                name = \"serviceName\"\r\n                value = {sst.serviceName}\r\n                onChange = {(e) => {\r\n                  var copy = JSON.parse(JSON.stringify(sst));\r\n                  var name = [e.target.name][0];\r\n                  var value = e.target.value;\r\n                  copy[name] = value;\r\n                  setSst(copy);\r\n                  setValidated(false);\r\n                }}\r\n              />\r\n              <Form.Control.Feedback type = \"invalid\">\r\n                Required\r\n              </Form.Control.Feedback>\r\n            </Col>\r\n          </Row>\r\n          <hr style = {{border: \"1px solid lightGray\"}} />\r\n          <Row>\r\n            <Col xs = {9}>\r\n              <h5> Vehicles </h5>\r\n            </Col>\r\n            <Col xs = {3} style = {{textAlign: \"right\"}}>\r\n              {!toggleApply ?\r\n                <Button variant = \"outline-dark\" size = \"sm\"\r\n                  onClick = {() => {\r\n                    setToggleApply(true);\r\n                  }}\r\n                >\r\n                  ✏️\r\n                </Button>\r\n                :\r\n                <Button variant = \"outline-dark\" size = \"sm\"\r\n                  onClick = {() => {\r\n                    setToggleApply(false);\r\n                  }}\r\n                >\r\n                  ✔️\r\n                </Button>\r\n              }\r\n            </Col>\r\n          </Row>\r\n          <br/>\r\n          {!toggleApply ?\r\n            <div>\r\n              {cars.map((car) => {\r\n                return (\r\n                  <Row>\r\n                    <Col>\r\n                      <ListGroup horizontal>\r\n                        <ListGroup.Item style = {{width: \"100%\"}}>\r\n                          <Row style = {{marginBottom: \"3%\"}}>\r\n                            <Col>\r\n                              <p> <strong> {car.name} </strong> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col sm = {5} style = {{marginBottom: \"3%\"}}>\r\n                              <Form.Label> 💨 Mile Interval </Form.Label>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = \"input\"\r\n                                name = \"miles\"\r\n                                value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                          sst.carsScheduled[car.carId].miles\r\n                                          :\r\n                                          SSTModel.interval.miles\r\n                                        }\r\n                                onChange = {(e) => {\r\n                                  onChangeInterval(e, car.carId);\r\n                                }}\r\n                              />\r\n                            </Col>\r\n                            <Col sm = {7}>\r\n                              <Form.Label> 🕒 Time Interval </Form.Label>\r\n                              <InputGroup size = \"sm\">\r\n                                <Form.Control\r\n                                  as = \"input\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.quantity\r\n                                            :\r\n                                            SSTModel.interval.time.quantity\r\n                                          }\r\n                                  isInvalid = {validated && sst.carsScheduled[car.carId] !== undefined ? sst.carsScheduled[car.carId].time.units.length !== 0 && sst.carsScheduled[car.carId].time.units !== \"none\" && sst.carsScheduled[car.carId].time.quantity === 0 : undefined}\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"quantity\");\r\n                                  }}\r\n                                  style = {{marginRight: \"2%\"}}\r\n                                />\r\n                                <Form.Control\r\n                                  as = \"select\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.units\r\n                                            :\r\n                                            SSTModel.interval.time.units\r\n                                          }\r\n                                  isInvalid = {validated && sst.carsScheduled[car.carId] !== undefined ? Number(sst.carsScheduled[car.carId].time.quantity.toString().trim()) > 0 && sst.carsScheduled[car.carId].time.units === \"none\"\r\n                                              :\r\n                                              undefined\r\n                                              }\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"units\");\r\n                                  }}\r\n                                >\r\n                                  <option value = \"none\" selected> Select </option>\r\n                                  {SSTModel.timeUnits.map((unit) => {\r\n                                    return (\r\n                                      <option value = {unit.value}> {unit.displayName} </option>\r\n                                    );\r\n                                  })}\r\n                                </Form.Control>\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </ListGroup.Item>\r\n                      </ListGroup>\r\n                    </Col>\r\n                  </Row>\r\n                );\r\n              })}\r\n            </div>\r\n            :\r\n            <div>\r\n              <Row style = {{marginBottom: \"3%\"}}>\r\n                <Col>\r\n                  <InputGroup size = \"sm\">\r\n                    <div style = {{marginRight: \"1%\"}}>\r\n                      Every\r\n                    </div>\r\n                    <div style = {{width: \"15%\", marginRight: \"1%\"}}>\r\n                      <Form.Control\r\n                        size = \"sm\"\r\n                        as = \"input\"\r\n                        name = \"miles\"\r\n                        value = {globalInterval !== undefined ?\r\n                                  globalInterval.miles\r\n                                  :\r\n                                  SSTModel.interval.miles\r\n                                }\r\n                        onChange = {(e) => {\r\n                          onChangeGlobalInterval(e);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div style = {{marginRight: \"1%\"}}>\r\n                      miles or\r\n                    </div>\r\n                    <div style = {{width: \"12%\", marginRight: \"1%\"}}>\r\n                      <Form.Control\r\n                        size = \"sm\"\r\n                        as = \"input\"\r\n                        name = \"time\"\r\n                        value = {globalInterval !== undefined ?\r\n                                  globalInterval.time.quantity\r\n                                  :\r\n                                  SSTModel.interval.time.quantity\r\n                                }\r\n                        onChange = {(e) => {\r\n                          onChangeGlobalInterval(e, \"quantity\");\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <Form.Control\r\n                      as = \"select\"\r\n                      name = \"time\"\r\n                      value = {globalInterval !== undefined ?\r\n                                globalInterval.time.units\r\n                                :\r\n                                SSTModel.interval.time.units\r\n                              }\r\n                      onChange = {(e) => {\r\n                        onChangeGlobalInterval(e, \"units\");\r\n                      }}\r\n                    >\r\n                      <option value = \"\" selected> Select </option>\r\n                      {SSTModel.timeUnits.map((unit) => {\r\n                        return (\r\n                          <option value = {unit.value}> {unit.displayName} </option>\r\n                        );\r\n                      })}\r\n                    </Form.Control>\r\n                  </InputGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row style = {{marginBottom: \"3%\"}}>\r\n                <Col style = {{textAlign: \"right\"}}>\r\n                  <Button size = \"sm\" variant = \"success\" style = {{marginRight: \"2%\"}}\r\n                    onClick = {() => {applyGlobalInterval()}}\r\n                  >\r\n                    Apply\r\n                  </Button>\r\n                  <OverlayTrigger\r\n                    key = \"apply-info\"\r\n                    placement = \"bottom\"\r\n                    overlay = {\r\n                      <Tooltip id = \"apply-info-tooltip\">\r\n                        Enter the desired <strong> mile </strong> and/or <strong> time </strong> interval and click the 'Apply' button\r\n                        to apply it to the selected vehicles.\r\n                      </Tooltip>\r\n                    }\r\n                  >\r\n                    <Button size = \"sm\" variant = \"light\">\r\n                      🛈\r\n                    </Button>\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n              <hr style = {{border: \"1px solid lightGray\"}} />\r\n              <Row style = {{marginBottom: \"2%\"}}>\r\n                <Col>\r\n                  {getNumSelected() !== 0 ?\r\n                    <Button variant = \"secondary\" size = \"sm\"\r\n                      onClick = {() => {unselectAll()}}\r\n                    >\r\n                      Unselect All\r\n                    </Button>\r\n                    :\r\n                    <Button variant = \"secondary\" size = \"sm\"\r\n                      onClick = {() => {selectAll()}}\r\n                    >\r\n                      Select All\r\n                    </Button>\r\n                  }\r\n                </Col>\r\n              </Row>\r\n              {cars.map((car, index) => {\r\n                return (\r\n                  <Row>\r\n                    <Col>\r\n                      <ListGroup horizontal>\r\n                        <ListGroup.Item>\r\n                          <Row style = {{marginBottom: \"3%\"}}>\r\n                            <Col>\r\n                              <Form.Check\r\n                                type = \"checkbox\"\r\n                                checked = {selectedCars[car.carId]}\r\n                                id = {car.carId + index}\r\n                                label = {<p> <strong> {car.name} </strong> </p>}\r\n                                onChange = {() => {selectCar(car.carId)}}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col sm = {5} style = {{marginBottom: \"3%\"}}>\r\n                              <Form.Label> 💨 Mile Interval </Form.Label>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = \"input\"\r\n                                name = \"miles\"\r\n                                value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                          sst.carsScheduled[car.carId].miles\r\n                                          :\r\n                                          SSTModel.interval.miles\r\n                                        }\r\n                                onChange = {(e) => {\r\n                                  onChangeInterval(e, car.carId);\r\n                                }}\r\n                              />\r\n                            </Col>\r\n                            <Col sm = {7}>\r\n                              <Form.Label> 🕒 Time Interval </Form.Label>\r\n                              <InputGroup size = \"sm\">\r\n                                <Form.Control\r\n                                  as = \"input\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.quantity\r\n                                            :\r\n                                            SSTModel.interval.time.quantity\r\n                                          }\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"quantity\");\r\n                                  }}\r\n                                  style = {{marginRight: \"2%\"}}\r\n                                />\r\n                                <Form.Control\r\n                                  as = \"select\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.units\r\n                                            :\r\n                                            SSTModel.interval.time.units\r\n                                          }\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"units\");\r\n                                  }}\r\n                                >\r\n                                  <option value = \"none\" selected> Select </option>\r\n                                  {SSTModel.timeUnits.map((unit) => {\r\n                                    return (\r\n                                      <option value = {unit.value}> {unit.displayName} </option>\r\n                                    );\r\n                                  })}\r\n                                </Form.Control>\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </ListGroup.Item>\r\n                      </ListGroup>\r\n                    </Col>\r\n                  </Row>\r\n                );\r\n              })}\r\n            </div>\r\n          }\r\n      </Modal.Body>\r\n      {!toggleApply ?\r\n        <Modal.Footer>\r\n          <Button disabled = {isLoading} onClick = {() => {onSubmit()}}>\r\n            {isLoading ?\r\n              <Spinner animation = \"border\" size = \"sm\" status = \"role\"/>\r\n              :\r\n              <div></div>\r\n            }\r\n            Save\r\n          </Button>\r\n        </Modal.Footer>\r\n        :\r\n        <div></div>\r\n      }\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default SSTModal;\r\n",["172","173"],"C:\\Users\\domin\\autohub\\src\\models\\car.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\storage.js",[],"C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js",[],"C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js",["174","175","176","177","178"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/AppNavbar.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\nconst AUTH = require('../controllers/auth.js');\r\n\r\nfunction AppNavbar(props) {\r\n  return (\r\n    <Navbar fluid style = {{backgroundColor: \"#A9CCE3\"}}>\r\n      <Navbar.Brand href = \"/\">\r\n        <Row>\r\n          <Col>\r\n            <h4>\r\n              AutoHub\r\n              <Image src = \"/auto.png\" style = {{width: \"25px\", height: \"25px\", marginLeft: \"8px\", marginBottom: \"3%\"}} />\r\n            </h4>\r\n          </Col>\r\n        </Row>\r\n      </Navbar.Brand>\r\n      <Nav className = \"mr-auto\">\r\n      </Nav>\r\n      <Nav className = \"justify-content-end\">\r\n        <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}\r\n          onClick = {() => {\r\n            window.location.pathname = \"/scheduledServiceTypes\";\r\n          }}\r\n        >\r\n          🛎️\r\n        </Button>\r\n        <Dropdown\r\n        >\r\n          <Dropdown.Toggle\r\n            variant = \"light\"\r\n            style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}\r\n          >\r\n            👤\r\n          </Dropdown.Toggle>\r\n          <Dropdown.Menu align = \"right\" style = {{width: \"280px\", height: \"100px\", border: \"1px solid gray\"}}>\r\n            <Row>\r\n              <Col style = {{textAlign: \"center\"}}>\r\n                <Row style = {{marginBottom: \"15px\"}}>\r\n                  <Col>\r\n                    <p>\r\n                      {props.userInfo === undefined ? \"\" : props.userInfo.email}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col style = {{textAlign: \"center\"}}>\r\n                    <Button size = \"sm\"\r\n                      onClick = {() => {AUTH.signout()}}\r\n                    >\r\n                      Signout\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default AppNavbar;\r\n","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\auth.js",["179"],"C:\\Users\\domin\\autohub\\src\\controllers\\db.js",[],"C:\\Users\\domin\\autohub\\src\\App.js",["180","181","182"],"C:\\Users\\domin\\autohub\\src\\components\\CarModal.js",["183","184"],"C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js",[],"C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js",["185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201"],"C:\\Users\\domin\\autohub\\src\\models\\logOptions.js",[],"C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js",["202","203","204","205","206","207","208","209","210","211","212","213","214","215"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Table from 'react-bootstrap/Table';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport DatePicker from \"react-datepicker\";\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\nimport SSTModal from './SSTModal.js';\r\nimport LogFilters from './LogFilters.js';\r\n\r\nconst RSMODEL = require('../models/repairService.js');\r\nconst LOGMODEL = require('../models/logOptions.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\nconst DB = require('../controllers/db.js');\r\nconst SSTModel = require('../models/scheduledServiceType.js');\r\n\r\nfunction RepairLog(props) {\r\n\r\n  const[services, setServices] = useState([]);\r\n  const[isSaved, setIsSaved] = useState(true);\r\n  const[cars, setCars] = useState();\r\n  const[show, setShow] = useState(false);\r\n  const[filtered, setFiltered] = useState([]);\r\n  const[isFiltering, setIsFiltering] = useState(false);\r\n  const[sortToggleValue, setSortToggleValue] = useState(\"\");\r\n  const[sortValue, setSortValue] = useState(\"\");\r\n  const[toggleNotes, setToggleNotes] = useState(\"\");\r\n  const[currMileageId, setCurrMileageId] = useState({serviceId: \"\", mileage: -1});\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n    if(props.serviceLog !== undefined) {\r\n      setServices(props.serviceLog.repairLog);\r\n    }\r\n  }, [props.userInfo, props.serviceLog])\r\n\r\n  function addRow() {\r\n    var newRow = JSON.parse(JSON.stringify(RSMODEL.repairService));\r\n    var arr = services.slice();\r\n    newRow.serviceId = GENERICFUNCTIONS.generateId();\r\n    newRow.userCreated = props.userInfo.email;\r\n    newRow.datePerformed = new Date().toLocaleDateString();\r\n    newRow.mileage = props.car.mileage;\r\n    newRow.carReferenceId = props.car.carId;\r\n    arr.push(newRow);\r\n    setServices(arr);\r\n    setIsSaved(false);\r\n  }\r\n\r\n  function deleteRow(index) {\r\n    var arr = services.slice();\r\n    arr.splice(index, 1);\r\n    setServices(arr);\r\n    setIsSaved(false);\r\n  }\r\n\r\n  function onChangeCol(e, index, type) {\r\n    var arr = services.slice();\r\n    var copy = arr[index];\r\n    var copy = arr[index];\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    if(type === \"number\" && isNaN(value)) {\r\n      return;\r\n    }\r\n    copy[name] = value;\r\n    arr[index] = copy;\r\n    setServices(arr);\r\n    setIsSaved(false);\r\n  }\r\n\r\n  function onChangeDate(date, index) {\r\n    var arr = services.slice();\r\n    //var copy = JSON.parse(JSON.stringify(arr[index]));\r\n    var copy = arr[index];\r\n    if(date === null) {\r\n      copy.datePerformed = new Date().toLocaleDateString();\r\n    }\r\n    else {\r\n      copy.datePerformed = date.toLocaleDateString();\r\n    }\r\n    arr[index] = copy;\r\n    setServices(arr);\r\n    setIsSaved(false);\r\n  }\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  function saveServiceLog() {\r\n    var copy = services.slice();\r\n    for(var i = 0; i < copy.length; i++) {\r\n      if(copy[i].datePerformed === null || copy[i].datePerformed === undefined) {\r\n        copy[i].datePerformed = new Date().toLocaleDateString();\r\n      }\r\n      copy[i] = GENERICFUNCTIONS.trimInputs(copy[i]);\r\n      //copy[i].datePerformed = copy[i].datePerformed.toLocaleDateString();\r\n    }\r\n    var serviceLog = JSON.parse(JSON.stringify(props.serviceLog));\r\n    var car = JSON.parse(JSON.stringify(props.car));\r\n    car.repairCost = calculateScheduledLogCost(copy);\r\n    serviceLog.repairLog = copy;\r\n    DB.writeOne(props.serviceLog.logId, serviceLog, \"serviceLogs\",\r\n      function() {\r\n        if(currMileageId.serviceId.trim().length !== 0) {\r\n          if(currMileageId.mileage.toString().trim().length === 0) {\r\n            car.mileage = 0;\r\n          }\r\n          else {\r\n            car.mileage = Number(currMileageId.mileage.toString().trim());\r\n          }\r\n        }\r\n        DB.writeOne(car.carId, car, \"cars\",\r\n          function() {\r\n            return;\r\n          },\r\n          function(error) {\r\n            alert(error);\r\n          }\r\n        );\r\n        setIsSaved(true);\r\n        setCurrMileageId({serviceId: \"\", mileage: -1})\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  function calculateScheduledLogCost(serviceLog) {\r\n    var costs = {laborCost: 0, partsCost: 0};\r\n    for(var i = 0; i < services.length; i++) {\r\n      costs.laborCost += Number(services[i].laborCost);\r\n      costs.partsCost += Number(services[i].partsCost);\r\n    }\r\n    console.log(costs);\r\n    return costs;\r\n  }\r\n\r\n  //filters the services into another array based on the selected filters\r\n  //passed as props to LogFilters.js (the intended user of this function)\r\n  /*\r\n    filterNames - array of filters to apply (expecting \"date\", \"mileage\", and or \"serviceName\")\r\n    filterValues - JSON object of filter values (ex: {startDate: \"12/26/20\", endDate: \"12/28/20\"} )\r\n  */\r\n  function applyFilters(filterNames, filteredValues) {\r\n    var filtered = services.slice();\r\n    for(var i = 0; i < filterNames.length; i++) {\r\n      var filter = filterNames[i];\r\n      var option = LOGMODEL.filterOptions[filter];\r\n      var isValid = true;\r\n      //if option is range, then check if filter values for the range filter have been satisfied\r\n      //if values have been satisfied, then apply the filter\r\n      //if values have not been satisfied, then do not apply the filter\r\n      if(option !== undefined && option.filterType === \"range\") {\r\n        if(filteredValues[option.rangeOptions[0].name] === LOGMODEL.filterValues[option.rangeOptions[0].name] || filteredValues[option.rangeOptions[1].name] === LOGMODEL.filterValues[option.rangeOptions[1].name]) {\r\n          isValid = false;\r\n        }\r\n        if(isValid) {\r\n          if(filter === \"date\") {\r\n            filtered = filtered.filter(service =>\r\n              new Date(filteredValues[option.rangeOptions[0].name]).getTime() <= new Date(service.datePerformed).getTime() && new Date(service.datePerformed).getTime() <= new Date(filteredValues[option.rangeOptions[1].name]).getTime());\r\n          }\r\n          else {\r\n            filtered = filtered.filter(service =>\r\n              Number(filteredValues[option.rangeOptions[0].name]) <= Number(service[filter]) && Number(service[filter]) <= Number(filteredValues[option.rangeOptions[1].name]));\r\n          }\r\n        }\r\n      }\r\n      //same as above, except for compare filter values\r\n      else if(option !== undefined && option.filterType === \"compare\") {\r\n        if(filteredValues[filter] === undefined || filteredValues[filter].trim().length === 0) {\r\n          isValid = false;\r\n        }\r\n        if(isValid) {\r\n          filtered = filtered.filter(service => filteredValues[filter] === service[filter]);\r\n        }\r\n      }\r\n      setFiltered(filtered);\r\n    }\r\n  }\r\n\r\n  function isInFiltered(id) {\r\n    for(var i = 0; i < filtered.length; i++) {\r\n      if(id === filtered[i].serviceId) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function toggleFiltering(filters) {\r\n    setIsFiltering(filters.length !== 0);\r\n  }\r\n\r\n  function sortAscending(value) {\r\n    var copy = services.slice();\r\n    copy.sort(\r\n      function(serviceA, serviceB) {\r\n        if(value === \"date\") {\r\n          return new Date(serviceA.datePerformed).getTime() - new Date(serviceB.datePerformed).getTime();\r\n        }\r\n        else {\r\n          return Number(serviceA[value]) - Number(serviceB[value]);\r\n        }\r\n      }\r\n    );\r\n    setServices(copy);\r\n  }\r\n\r\n  function sortDescending(value) {\r\n    var copy = services.slice();\r\n    copy.sort(\r\n      function(serviceA, serviceB) {\r\n        if(value === \"date\") {\r\n          return new Date(serviceB.datePerformed).getTime() - new Date(serviceA.datePerformed).getTime();\r\n        }\r\n        else {\r\n          return  Number(serviceB[value]) - Number(serviceA[value]);\r\n        }\r\n      }\r\n    );\r\n    setServices(copy);\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <SSTModal\r\n        userCreated = {props.userInfo.email}\r\n        cars = {cars !== undefined ? cars : []}\r\n        sst = {SSTModel.scheduledServiceType}\r\n        show = {show}\r\n        setShow = {setShow}\r\n        title = \"Add Scheduled Service Type\"\r\n      />\r\n      <Row>\r\n        <Col style = {{textAlign: \"center\"}}>\r\n          <h5>\r\n            {props.car.name + \" \"}\r\n            <Badge variant = \"secondary\"> {props.car.mileage + \" miles\"} </Badge>\r\n          </h5>\r\n        </Col>\r\n      </Row>\r\n      <br style = {{height: \"50%\"}} />\r\n      <Row>\r\n        <Col xs = {6}>\r\n          <DropdownButton variant = \"dark\" size = \"sm\" title = \"Filters\">\r\n            <LogFilters\r\n              applyFilters = {applyFilters}\r\n              toggleFiltering = {toggleFiltering}\r\n            />\r\n          </DropdownButton>\r\n        </Col>\r\n        <Col xs = {6} style = {{textAlign: \"right\"}}>\r\n          <Button variant = \"dark\" size = \"sm\"\r\n            onClick = {() => {addRow()}}\r\n          >\r\n            Add +\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <br style = {{height: \"50%\"}}/>\r\n      <Row>\r\n        <Col xs = {9}>\r\n          <InputGroup size = \"sm\">\r\n            <InputGroup.Prepend size = \"sm\">\r\n              <InputGroup.Text> Sort By </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <div style = {{marginRight: \"1%\"}}>\r\n              <Form.Control\r\n                as = \"select\"\r\n                size = \"sm\"\r\n                name = \"sortBy\"\r\n                value = {sortValue}\r\n                onChange = {(e) => {\r\n                  var value = e.target.value;\r\n                  setSortValue(value);\r\n                  if(value.trim().length !== 0 && sortToggleValue.trim().length !== 0) {\r\n                    if(sortToggleValue === \"ascending\") {\r\n                      sortAscending(value);\r\n                    }\r\n                    else if(sortToggleValue === \"descending\") {\r\n                      sortDescending(value);\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                <option value = \"\" selected> None </option>\r\n                {LOGMODEL.sortOptions.map((option) => {\r\n                  return (\r\n                    <option value = {option.value}> {option.displayName} </option>\r\n                  );\r\n                })}\r\n              </Form.Control>\r\n            </div>\r\n            <ButtonGroup toggle size = \"sm\"\r\n            >\r\n              <ToggleButton\r\n                variant = \"light\"\r\n                value = \"ascending\"\r\n                type = \"checkbox\"\r\n                name = \"checkbox\"\r\n                value = {sortToggleValue}\r\n                checked = {sortToggleValue === \"ascending\"}\r\n                onChange = {() => {\r\n                  if(sortToggleValue === \"ascending\") {\r\n                    setSortToggleValue(\"\");\r\n                  }\r\n                  else {\r\n                    setSortToggleValue(\"ascending\");\r\n                    if(sortValue.trim().length !== 0) {\r\n                      sortAscending(sortValue);\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                ⬆️\r\n              </ToggleButton>\r\n              <ToggleButton\r\n                variant = \"light\"\r\n                value = \"descending\"\r\n                type = \"checkbox\"\r\n                name = \"checkbox\"\r\n                value = {sortToggleValue}\r\n                checked = {sortToggleValue === \"descending\"}\r\n                onChange = {() => {\r\n                  if(sortToggleValue === \"descending\") {\r\n                    setSortToggleValue(\"\");\r\n                  }\r\n                  else {\r\n                    setSortToggleValue(\"descending\");\r\n                    if(sortValue.trim().length !== 0) {\r\n                      sortDescending(sortValue);\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                ⬇️\r\n              </ToggleButton>\r\n            </ButtonGroup>\r\n          </InputGroup>\r\n        </Col>\r\n        <Col xs = {3} style = {{textAlign: \"right\"}}>\r\n          <Button size = \"sm\" variant = \"success\" disabled = {isSaved}\r\n            onClick = {() => {saveServiceLog()}}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <br/>\r\n      <Table responsive>\r\n        <thead>\r\n          <tr>\r\n            <th style = {{minWidth: \"50px\"}}> # </th>\r\n            {RSMODEL.publicFields.map((field, index) => {\r\n              return (\r\n                <th style = {{minWidth: field.tableWidth}} key = {index.toString() + field.value}>\r\n                  {field.displayName}\r\n                </th>\r\n              );\r\n            })}\r\n          </tr>\r\n        </thead>\r\n        {!isFiltering ?\r\n          <tbody>\r\n            {services.map((service, index) => {\r\n              return (\r\n                <tr key = {service.serviceId}>\r\n                  <td style = {{minWidth: \"50px\"}}>\r\n                    <Button size = \"sm\" variant = \"outline-dark\"\r\n                      onClick = {() => {deleteRow(index)}}\r\n                    >\r\n                      🗑️\r\n                    </Button>\r\n                  </td>\r\n                  {RSMODEL.publicFields.map((field) => {\r\n                    if(field.inputType === \"input\") {\r\n                      if(field.value === \"mileage\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {services[index][field.value]}\r\n                              onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                              disabled = {field.disabled}\r\n                            />\r\n                            <Form.Check\r\n                              size = \"sm\"\r\n                              type = \"checkbox\"\r\n                              id = {service.serviceId}\r\n                              onChange = {() => {\r\n                                setIsSaved(false);\r\n                                if(service.serviceId === currMileageId.serviceId) {\r\n                                  setCurrMileageId({serviceId: \"\", mileage: -1});\r\n                                }\r\n                                else {\r\n                                  setCurrMileageId({serviceId: service.serviceId, mileage: service.mileage});\r\n                                }\r\n                              }}\r\n                              label = {<small> Use as current mileage </small>}\r\n                              checked = {service.serviceId === currMileageId.serviceId}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"datePerformed\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <DatePicker\r\n                              selected = {typeof(services[index].datePerformed) === \"string\" ? new Date(services[index].datePerformed) : services[index].datePerformed}\r\n                              onChange = {(date) => {onChangeDate(date, index)}}\r\n                              customInput = {<Form.Control as = \"input\" size = \"sm\"/>}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"notes\") {\r\n                        const popover = (\r\n                          <Popover id = {\"notes-popover\" + service.serviceId} style = {{height: \"100%\"}}>\r\n                            <Modal.Header closeButton style = {{backgroundColor: \"#F2F4F4\"}}>\r\n                              Notes\r\n                            </Modal.Header>\r\n                            <Popover.Content>\r\n                              Testing the popover component to display the notes for this service fjsdkfjsdklfjskdlfjsdklfjsdklfjskldfjslkdfjskldfjslkdfjskldfjkldsfjksldfjksldfjsdklfjskldfjsdfkjksldfjskdlfjsdklfjskdlfjdsklfdjslfjsdklfjsdlfjsdlkfjksldfjsdlfjskdlfjsldfjskdlfjsdklfjsdklfjsdklfjsdkljlkjfkdlsfjdkslfjslkdfjskldfjlskfjskldfjlsdjfljklfjdsklfjsdlkfjdlfjsdljfklj\r\n                            </Popover.Content>\r\n                          </Popover>\r\n                        );\r\n                        if(toggleNotes === service.serviceId) {\r\n                          return (\r\n                            <td style = {{minWidth: field.tableWidth}}>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = \"textarea\"\r\n                                name = {field.value}\r\n                                value = {services[index][field.value]}\r\n                                onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                                disabled = {field.disabled}\r\n                                style = {{height: \"150px\"}}\r\n                              />\r\n                              <Button variant = \"link\" size = \"sm\" style = {{float: \"right\"}}\r\n                                onClick = {() => {\r\n                                  setToggleNotes(\"\");\r\n                                }}\r\n                              >\r\n                                Done\r\n                              </Button>\r\n                            </td>\r\n                          );\r\n                        }\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {services[index][field.value]}\r\n                              onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                              disabled = {field.disabled}\r\n                              readOnly\r\n                            />\r\n                            <Button variant = \"link\" size = \"sm\" style = {{float: \"right\"}}\r\n                              onClick = {() => {\r\n                                setToggleNotes(service.serviceId);\r\n                              }}\r\n                            >\r\n                              Edit\r\n                            </Button>\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.containsPrepend) {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <InputGroup size = \"sm\">\r\n                              <InputGroup.Prepend>\r\n                                <InputGroup.Text> {field.prependValue} </InputGroup.Text>\r\n                              </InputGroup.Prepend>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = {field.inputType}\r\n                                name = {field.value}\r\n                                value = {services[index][field.value]}\r\n                                onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                              />\r\n                            </InputGroup>\r\n                          </td>\r\n                        );\r\n                      }\r\n                      return (\r\n                        <td style = {{minWidth: field.tableWidth}}>\r\n                          <Form.Control\r\n                            size = \"sm\"\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {services[index][field.value]}\r\n                            onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                          />\r\n                        </td>\r\n                      );\r\n                    }\r\n                    else if(field.inputType === \"select\") {\r\n                      return (\r\n                        <td style = {{minWidth: field.tableWidth}}>\r\n                          <Form.Control\r\n                            size = \"sm\"\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {services[index][field.value]}\r\n                            onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                          >\r\n                            <option value = \"\" selected> Select </option>\r\n                            {props.ssts.map((sst, index) => {\r\n                              return (\r\n                                <option value = {sst.serviceName}> {sst.serviceName} </option>\r\n                              );\r\n                            })}\r\n                          </Form.Control>\r\n                        </td>\r\n                      );\r\n                    }\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n          :\r\n          <tbody>\r\n            {services.map((service, index) => {\r\n              if(!isInFiltered(service.serviceId)) {\r\n                return null;\r\n              }\r\n              return (\r\n                <tr key = {service.serviceId}>\r\n                  <td style = {{minWidth: \"50px\"}}>\r\n                    <Button size = \"sm\" variant = \"outline-dark\"\r\n                      onClick = {() => {deleteRow(index)}}\r\n                    >\r\n                      🗑️\r\n                    </Button>\r\n                  </td>\r\n                  {RSMODEL.publicFields.map((field) => {\r\n                    if(field.inputType === \"input\") {\r\n                      if(field.value === \"mileage\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {services[index][field.value]}\r\n                              onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                              disabled = {field.disabled}\r\n                            />\r\n                            <Form.Check\r\n                              size = \"sm\"\r\n                              type = \"checkbox\"\r\n                              id = {service.serviceId}\r\n                              onChange = {() => {\r\n                                setIsSaved(false);\r\n                                if(service.serviceId === currMileageId.serviceId) {\r\n                                  setCurrMileageId({serviceId: \"\", mileage: -1});\r\n                                }\r\n                                else {\r\n                                  setCurrMileageId({serviceId: service.serviceId, mileage: service.mileage});\r\n                                }\r\n                              }}\r\n                              label = {<small> Use as current mileage </small>}\r\n                              checked = {service.serviceId === currMileageId.serviceId}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"datePerformed\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <DatePicker\r\n                              selected = {typeof(services[index].datePerformed) === \"string\" ? new Date(services[index].datePerformed) : services[index].datePerformed}\r\n                              onChange = {(date) => {onChangeDate(date, index)}}\r\n                              customInput = {<Form.Control as = \"input\" size = \"sm\"/>}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"notes\") {\r\n                        const popover = (\r\n                          <Popover id = {\"notes-popover\" + service.serviceId} style = {{height: \"100%\"}}>\r\n                            <Modal.Header closeButton style = {{backgroundColor: \"#F2F4F4\"}}>\r\n                              Notes\r\n                            </Modal.Header>\r\n                            <Popover.Content>\r\n                              Testing the popover component to display the notes for this service fjsdkfjsdklfjskdlfjsdklfjsdklfjskldfjslkdfjskldfjslkdfjskldfjkldsfjksldfjksldfjsdklfjskldfjsdfkjksldfjskdlfjsdklfjskdlfjdsklfdjslfjsdklfjsdlfjsdlkfjksldfjsdlfjskdlfjsldfjskdlfjsdklfjsdklfjsdklfjsdkljlkjfkdlsfjdkslfjslkdfjskldfjlskfjskldfjlsdjfljklfjdsklfjsdlkfjdlfjsdljfklj\r\n                            </Popover.Content>\r\n                          </Popover>\r\n                        );\r\n                        if(toggleNotes === service.serviceId) {\r\n                          return (\r\n                            <td style = {{minWidth: field.tableWidth}}>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = \"textarea\"\r\n                                name = {field.value}\r\n                                value = {services[index][field.value]}\r\n                                onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                                disabled = {field.disabled}\r\n                                style = {{height: \"150px\"}}\r\n                              />\r\n                              <Button variant = \"link\" size = \"sm\" style = {{float: \"right\"}}\r\n                                onClick = {() => {\r\n                                  setToggleNotes(\"\");\r\n                                }}\r\n                              >\r\n                                Done\r\n                              </Button>\r\n                            </td>\r\n                          );\r\n                        }\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {services[index][field.value]}\r\n                              onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                              disabled = {field.disabled}\r\n                              readOnly\r\n                            />\r\n                            <Button variant = \"link\" size = \"sm\" style = {{float: \"right\"}}\r\n                              onClick = {() => {\r\n                                setToggleNotes(service.serviceId);\r\n                              }}\r\n                            >\r\n                              Edit\r\n                            </Button>\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.containsPrepend) {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <InputGroup size = \"sm\">\r\n                              <InputGroup.Prepend>\r\n                                <InputGroup.Text> {field.prependValue} </InputGroup.Text>\r\n                              </InputGroup.Prepend>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = {field.inputType}\r\n                                name = {field.value}\r\n                                value = {services[index][field.value]}\r\n                                onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                              />\r\n                            </InputGroup>\r\n                          </td>\r\n                        );\r\n                      }\r\n                      return (\r\n                        <td style = {{minWidth: field.tableWidth}}>\r\n                          <Form.Control\r\n                            size = \"sm\"\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {services[index][field.value]}\r\n                            onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                          />\r\n                        </td>\r\n                      );\r\n                    }\r\n                    else if(field.inputType === \"select\") {\r\n                      return (\r\n                        <td style = {{minWidth: field.tableWidth}}>\r\n                          <Form.Control\r\n                            size = \"sm\"\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {services[index][field.value]}\r\n                            onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                          >\r\n                            <option value = \"\" selected> Select </option>\r\n                            {props.ssts.map((sst, index) => {\r\n                              return (\r\n                                <option value = {sst.serviceName}> {sst.serviceName} </option>\r\n                              );\r\n                            })}\r\n                          </Form.Control>\r\n                        </td>\r\n                      );\r\n                    }\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        }\r\n      </Table>\r\n      {services.length === 0 ?\r\n        <div>\r\n          <Row>\r\n            <Col>\r\n              <br/>\r\n              <br/>\r\n              <br/>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col style = {{textAlign: \"center\"}}>\r\n              <h4> No Repair Services have been logged 👨‍🔧 </h4>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        :\r\n        <div></div>\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default RepairLog;\r\n",["216","217"],"C:\\Users\\domin\\autohub\\src\\models\\repairService.js",[],"C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js",[],"C:\\Users\\domin\\autohub\\src\\components\\LogFilters.js",["218","219","220","221","222","223","224","225"],"C:\\Users\\domin\\autohub\\src\\components\\UpcomingMaintenance.js",["226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Calendar from 'react-calendar';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nconst DB = require('../controllers/db.js');\r\n\r\nfunction UpcomingMaintenance(props) {\r\n\r\n  const [serviceLogs, setServiceLogs] = useState([]);\r\n  const[isLoading, setIsLoading] = useState(false);\r\n  const[upcomingServices, setUpcomingServices] = useState();\r\n  const[overdueServices, setOverdueServices] = useState();\r\n\r\n  useEffect(() => {\r\n    getServiceLogs(props.cars);\r\n  }, [props.cars])\r\n\r\n  function getServiceLogs(cars) {\r\n    if(cars === undefined) {\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    if(cars.length === 1) {\r\n      DB.getQuerey(\"carReferenceId\", cars[0].carId, \"serviceLogs\").onSnapshot(quereySnapshot => {\r\n        var logs = [];\r\n        if(quereySnapshot.docs.length > 1 || quereySnapshot.docs[0] === undefined) {\r\n          return;\r\n        }\r\n        else {\r\n          var serviceLog = quereySnapshot.docs[0].data();\r\n          if(serviceLog !== undefined) {\r\n            logs.push(serviceLog);\r\n            setServiceLogs(logs);\r\n            setIsLoading(false);\r\n          }\r\n        }\r\n        var upcoming = [];\r\n        var overdue = [];\r\n        for(var i = 0; i < logs.length; i++) {\r\n          var log = logs[i]\r\n          var u = getUpcomingServices(log)\r\n          var o = getOverdueServices(log)\r\n          for(var j = 0; j < u.length; j++) {\r\n            upcoming.push(u[j]);\r\n          }\r\n          for(var n = 0; n < o.length; n++) {\r\n            overdue.push(o[n]);\r\n          }\r\n        }\r\n        setUpcomingServices(upcoming);\r\n        setOverdueServices(overdue);\r\n      });\r\n    }\r\n    else {\r\n      DB.getQuerey(\"userCreated\", props.userCreated, \"serviceLogs\").onSnapshot(quereySnapshot => {\r\n        var logs = [];\r\n        if(quereySnapshot.docs === undefined) {\r\n          return;\r\n        }\r\n        else {\r\n          if(serviceLogs !== undefined) {\r\n            for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n              logs.push(quereySnapshot.docs[i].data());\r\n            }\r\n            setServiceLogs(logs);\r\n            setIsLoading(false);\r\n          }\r\n        }\r\n        var upcoming = [];\r\n        var overdue = [];\r\n        for(var i = 0; i < logs.length; i++) {\r\n          var log = logs[i]\r\n          var u = getUpcomingServices(log)\r\n          var o = getOverdueServices(log)\r\n          for(var j = 0; j < u.length; j++) {\r\n            upcoming.push(u[j]);\r\n          }\r\n          for(var n = 0; n < o.length; n++) {\r\n            overdue.push(o[n]);\r\n          }\r\n        }\r\n        setUpcomingServices(upcoming);\r\n        setOverdueServices(overdue);\r\n      });\r\n    }\r\n  }\r\n\r\n  function findCar(carId) {\r\n    if(carId === undefined || carId === null) {\r\n      return null;\r\n    }\r\n    for(var i = 0; i < props.cars.length; i++) {\r\n      if(props.cars[i].carId === carId) {\r\n        return props.cars[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  function getOverdueServices(log) {\r\n    if(log === undefined || log === null) {\r\n      return [];\r\n    }\r\n    var overdue = [];\r\n    var sstIds = [];\r\n    var today = new Date();\r\n    var car = findCar(log.carReferenceId);\r\n    if(car === null || car === undefined) {\r\n      return [];\r\n    }\r\n    var currMileage = Number(car.mileage);\r\n    for(var i = 0; i < log.scheduledLog.length; i++) {\r\n      if(!sstIds.includes(log.scheduledLog[i].sstRefId)) {\r\n        sstIds.push(log.scheduledLog[i].sstRefId);\r\n      }\r\n    }\r\n    for(var i = 0; i < sstIds.length; i++) {\r\n      var sstId = sstIds[i];\r\n      var mostRecentDate = 0;\r\n      var mostRecentService = null;\r\n      for(var j = 0; j < log.scheduledLog.length; j++) {\r\n        var service = log.scheduledLog[j];\r\n        var datePerformed = new Date(service.datePerformed).getTime()\r\n        if(service.sstRefId === sstId && datePerformed > mostRecentDate) {\r\n          mostRecentDate = datePerformed;\r\n          mostRecentService = service;\r\n        }\r\n      }\r\n      if(mostRecentService !== null && new Date(mostRecentService.nextServiceDate).getTime() < today.getTime() || mostRecentService !== null && Number(mostRecentService.nextServiceMileage) < currMileage) {\r\n        //same as saying: if the next service date and next service mileage are blank/empty, then they aren't overdue\r\n        if(mostRecentService.nextServiceDate.toString().trim().length === 0 && mostRecentService.nextServiceMileage.toString().trim().length === 0) {\r\n          continue;\r\n        }\r\n        overdue.push(mostRecentService);\r\n      }\r\n    }\r\n    return overdue;\r\n  }\r\n\r\n  function getUpcomingServices(log) {\r\n    if(log === undefined || log === null) {\r\n      return [];\r\n    }\r\n    var upcoming = [];\r\n    var sstIds = [];\r\n    var today = new Date();\r\n    var car = findCar(log.carReferenceId);\r\n    if(car === null || car === undefined) {\r\n      return [];\r\n    }\r\n    var currMileage = Number(car.mileage);\r\n    for(var i = 0; i < log.scheduledLog.length; i++) {\r\n      if(!sstIds.includes(log.scheduledLog[i].sstRefId)) {\r\n        sstIds.push(log.scheduledLog[i].sstRefId);\r\n      }\r\n    }\r\n    for(var i = 0; i < sstIds.length; i++) {\r\n      var sstId = sstIds[i];\r\n      var mostRecentDate = 0;\r\n      var mostRecentService = null;\r\n      for(var j = 0; j < log.scheduledLog.length; j++) {\r\n        var service = log.scheduledLog[j];\r\n        var datePerformed = new Date(service.datePerformed).getTime();\r\n        if(service.sstRefId === sstId && datePerformed >= mostRecentDate) {\r\n          mostRecentDate = datePerformed;\r\n          mostRecentService = service;\r\n        }\r\n      }\r\n      if(mostRecentService !== null && new Date(mostRecentService.nextServiceDate).getTime() >= today.getTime() || mostRecentService !== null && Number(mostRecentService.nextServiceMileage) >= currMileage) {\r\n        //same as saying: if the mostRecentService is included within the overdue list, then don't add it to the upcoming list\r\n        if(new Date(mostRecentService.nextServiceDate).getTime() < today.getTime() || mostRecentService !== null && Number(mostRecentService.nextServiceMileage) < currMileage) {\r\n          continue;\r\n        }\r\n        upcoming.push(mostRecentService);\r\n      }\r\n    }\r\n    return upcoming;\r\n  }\r\n\r\n  function getCarName(carId) {\r\n    for(var i = 0; i < props.cars.length; i++) {\r\n      var car = props.cars[i];\r\n      if(car.carId === carId) {\r\n        return car.name;\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  function getDueText(service, carId) {\r\n    var text = \"Due:\";\r\n    var isDate = false;\r\n    var currMileage = Number(findCar(carId).mileage);\r\n    var today = new Date();\r\n    if(service.nextServiceDate.trim().length !== 0) {\r\n      text = text + \" \" + service.nextServiceDate.trim();\r\n      isDate = true;\r\n    }\r\n    if(Number(service.nextServiceMileage.toString().trim()) !== 0 && service.nextServiceMileage.toString().trim().length !== 0) {\r\n      if(isDate) {\r\n        text = text + \" or \" + service.nextServiceMileage.toString().trim() + \" miles\";\r\n      }\r\n      else {\r\n        text = text + \" \" + service.nextServiceMileage.toString().trim() + \" miles\";\r\n      }\r\n    }\r\n    return text;\r\n  }\r\n\r\n  if(props.cars === undefined || upcomingServices === undefined || overdueServices === undefined) {\r\n    if(isLoading) {\r\n      return (\r\n        <Container fluid>\r\n          <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n            <Spinner animation = \"border\"/>\r\n          </div>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      <Row>\r\n        <Col>\r\n          <Card>\r\n            <Card.Header>\r\n              Upcoming Maintenance 🛠️\r\n            </Card.Header>\r\n            <Card.Body>\r\n              Error occurred in finding upcoming maintenance\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <Accordion defaultActiveKey = \"upcoming-maintenance\">\r\n          <Card>\r\n            <Accordion.Toggle as = {Card.Header} eventKey = \"upcoming-maintenance\">\r\n              <Row>\r\n                <Col xs = {10}>\r\n                  Upcoming Maintenance 🛠️\r\n                </Col>\r\n                <Col xs = {2} style = {{textAlign: \"right\"}}>\r\n                  <Image src = \"/expand_collapse.png\" style = {{width: \"15px\", height: \"15px\"}} />\r\n                </Col>\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey = \"upcoming-maintenance\">\r\n              <Card.Body>\r\n                {serviceLogs.length === 0 ?\r\n                  <div> You have nothing scheduled for your cars. </div>\r\n                  :\r\n                  <Row>\r\n                    <Col>\r\n                      <Row>\r\n                        <Col>\r\n                          <div>\r\n                            {overdueServices.map((service) => {\r\n                              return (\r\n                                <div style = {{border: \"1px solid white\"}}>\r\n                                  <Row>\r\n                                    <Col xs = {8}>\r\n                                      <h6>\r\n                                        {getCarName(service.carReferenceId) + \" - \" + service.serviceName}\r\n                                      </h6>\r\n                                    </Col>\r\n                                    <Col xs = {4} style = {{textAlign: \"right\"}}>\r\n                                      <Badge variant = \"danger\">\r\n                                        ! Overdue\r\n                                      </Badge>\r\n                                    </Col>\r\n                                  </Row>\r\n                                  <Row>\r\n                                    <Col style = {{textIndent: \"2%\"}}>\r\n                                      <small> ⌛ {getDueText(service, service.carReferenceId)} </small>\r\n                                    </Col>\r\n                                  </Row>\r\n                                  <hr style = {{border: \"1px solid lightGray\", height: \"50%\"}} />\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col>\r\n                          <div>\r\n                            {upcomingServices.map((service) => {\r\n                              return (\r\n                                <div style = {{border: \"1px solid white\"}}>\r\n                                  <Row>\r\n                                    <Col>\r\n                                      <h6> {getCarName(service.carReferenceId) + \" - \" + service.serviceName} </h6>\r\n                                    </Col>\r\n                                  </Row>\r\n                                  <Row>\r\n                                    <Col style = {{textIndent: \"2%\"}}>\r\n                                      <small> ⌛ {getDueText(service, service.carReferenceId)} </small>\r\n                                    </Col>\r\n                                  </Row>\r\n                                  <hr style = {{border: \"1px solid lightGray\", height: \"50%\"}} />\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </div>\r\n                          {upcomingServices.length === 0 && overdueServices.length === 0 ?\r\n                            <div> You have nothing scheduled for your cars. </div>\r\n                            :\r\n                            <div> </div>\r\n                          }\r\n                        </Col>\r\n                      </Row>\r\n                    </Col>\r\n                  </Row>\r\n                }\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default UpcomingMaintenance;\r\n","C:\\Users\\domin\\autohub\\src\\components\\ErrorHandler.js",["244","245"],"C:\\Users\\domin\\autohub\\src\\controllers\\errorLog.js",[],{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":6,"column":8,"nodeType":"252","messageId":"253","endLine":6,"endColumn":12},{"ruleId":"250","severity":1,"message":"254","line":11,"column":8,"nodeType":"252","messageId":"253","endLine":11,"endColumn":22},{"ruleId":"250","severity":1,"message":"255","line":12,"column":8,"nodeType":"252","messageId":"253","endLine":12,"endColumn":16},{"ruleId":"250","severity":1,"message":"256","line":13,"column":8,"nodeType":"252","messageId":"253","endLine":13,"endColumn":13},{"ruleId":"250","severity":1,"message":"257","line":17,"column":8,"nodeType":"252","messageId":"253","endLine":17,"endColumn":14},{"ruleId":"250","severity":1,"message":"258","line":19,"column":16,"nodeType":"252","messageId":"253","endLine":19,"endColumn":22},{"ruleId":"250","severity":1,"message":"259","line":26,"column":7,"nodeType":"252","messageId":"253","endLine":26,"endColumn":14},{"ruleId":"250","severity":1,"message":"260","line":27,"column":7,"nodeType":"252","messageId":"253","endLine":27,"endColumn":23},{"ruleId":"261","severity":1,"message":"262","line":37,"column":6,"nodeType":"263","endLine":37,"endColumn":22,"suggestions":"264"},{"ruleId":"265","severity":1,"message":"266","line":121,"column":21,"nodeType":"252","messageId":"267","endLine":121,"endColumn":26},{"ruleId":"268","severity":1,"message":"269","line":129,"column":65,"nodeType":"270","messageId":"271","endLine":129,"endColumn":66},{"ruleId":"268","severity":1,"message":"269","line":141,"column":61,"nodeType":"270","messageId":"271","endLine":141,"endColumn":62},{"ruleId":"272","severity":1,"message":"273","line":166,"column":21,"nodeType":"274","endLine":170,"endColumn":22},{"ruleId":"268","severity":1,"message":"269","line":168,"column":63,"nodeType":"270","messageId":"271","endLine":168,"endColumn":64},{"ruleId":"268","severity":1,"message":"269","line":185,"column":59,"nodeType":"270","messageId":"271","endLine":185,"endColumn":60},{"ruleId":"246","replacedBy":"275"},{"ruleId":"248","replacedBy":"276"},{"ruleId":"250","severity":1,"message":"251","line":6,"column":8,"nodeType":"252","messageId":"253","endLine":6,"endColumn":12},{"ruleId":"250","severity":1,"message":"254","line":11,"column":8,"nodeType":"252","messageId":"253","endLine":11,"endColumn":22},{"ruleId":"250","severity":1,"message":"255","line":12,"column":8,"nodeType":"252","messageId":"253","endLine":12,"endColumn":16},{"ruleId":"250","severity":1,"message":"256","line":13,"column":8,"nodeType":"252","messageId":"253","endLine":13,"endColumn":13},{"ruleId":"250","severity":1,"message":"258","line":18,"column":16,"nodeType":"252","messageId":"253","endLine":18,"endColumn":22},{"ruleId":"250","severity":1,"message":"259","line":24,"column":7,"nodeType":"252","messageId":"253","endLine":24,"endColumn":14},{"ruleId":"250","severity":1,"message":"260","line":26,"column":7,"nodeType":"252","messageId":"253","endLine":26,"endColumn":23},{"ruleId":"261","severity":1,"message":"262","line":36,"column":6,"nodeType":"263","endLine":36,"endColumn":22,"suggestions":"277"},{"ruleId":"265","severity":1,"message":"266","line":114,"column":21,"nodeType":"252","messageId":"267","endLine":114,"endColumn":26},{"ruleId":"268","severity":1,"message":"269","line":122,"column":65,"nodeType":"270","messageId":"271","endLine":122,"endColumn":66},{"ruleId":"268","severity":1,"message":"269","line":134,"column":61,"nodeType":"270","messageId":"271","endLine":134,"endColumn":62},{"ruleId":"272","severity":1,"message":"273","line":159,"column":21,"nodeType":"274","endLine":163,"endColumn":22},{"ruleId":"268","severity":1,"message":"269","line":161,"column":63,"nodeType":"270","messageId":"271","endLine":161,"endColumn":64},{"ruleId":"268","severity":1,"message":"269","line":178,"column":59,"nodeType":"270","messageId":"271","endLine":178,"endColumn":60},{"ruleId":"250","severity":1,"message":"278","line":18,"column":8,"nodeType":"252","messageId":"253","endLine":18,"endColumn":17},{"ruleId":"250","severity":1,"message":"260","line":28,"column":7,"nodeType":"252","messageId":"253","endLine":28,"endColumn":23},{"ruleId":"261","severity":1,"message":"279","line":45,"column":6,"nodeType":"263","endLine":45,"endColumn":48,"suggestions":"280"},{"ruleId":"281","severity":1,"message":"282","line":76,"column":9,"nodeType":"283","messageId":"284","endLine":98,"endColumn":35},{"ruleId":"250","severity":1,"message":"285","line":85,"column":13,"nodeType":"252","messageId":"253","endLine":85,"endColumn":16},{"ruleId":"246","replacedBy":"286"},{"ruleId":"248","replacedBy":"287"},{"ruleId":"261","severity":1,"message":"288","line":33,"column":6,"nodeType":"263","endLine":33,"endColumn":22,"suggestions":"289"},{"ruleId":"250","severity":1,"message":"290","line":1,"column":27,"nodeType":"252","messageId":"253","endLine":1,"endColumn":36},{"ruleId":"246","replacedBy":"291"},{"ruleId":"248","replacedBy":"292"},{"ruleId":"250","severity":1,"message":"293","line":5,"column":8,"nodeType":"252","messageId":"253","endLine":5,"endColumn":17},{"ruleId":"250","severity":1,"message":"285","line":42,"column":9,"nodeType":"252","messageId":"253","endLine":42,"endColumn":12},{"ruleId":"250","severity":1,"message":"285","line":115,"column":9,"nodeType":"252","messageId":"253","endLine":115,"endColumn":12},{"ruleId":"250","severity":1,"message":"285","line":125,"column":9,"nodeType":"252","messageId":"253","endLine":125,"endColumn":12},{"ruleId":"265","severity":1,"message":"294","line":189,"column":15,"nodeType":"252","messageId":"267","endLine":189,"endColumn":16},{"ruleId":"246","replacedBy":"295"},{"ruleId":"248","replacedBy":"296"},{"ruleId":"250","severity":1,"message":"297","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"250","severity":1,"message":"290","line":1,"column":27,"nodeType":"252","messageId":"253","endLine":1,"endColumn":36},{"ruleId":"250","severity":1,"message":"254","line":6,"column":8,"nodeType":"252","messageId":"253","endLine":6,"endColumn":22},{"ruleId":"250","severity":1,"message":"298","line":13,"column":8,"nodeType":"252","messageId":"253","endLine":13,"endColumn":22},{"ruleId":"250","severity":1,"message":"299","line":14,"column":8,"nodeType":"252","messageId":"253","endLine":14,"endColumn":15},{"ruleId":"250","severity":1,"message":"300","line":4,"column":7,"nodeType":"252","messageId":"253","endLine":4,"endColumn":15},{"ruleId":"250","severity":1,"message":"301","line":7,"column":8,"nodeType":"252","messageId":"253","endLine":7,"endColumn":11},{"ruleId":"250","severity":1,"message":"302","line":8,"column":8,"nodeType":"252","messageId":"253","endLine":8,"endColumn":11},{"ruleId":"250","severity":1,"message":"303","line":21,"column":7,"nodeType":"252","messageId":"253","endLine":21,"endColumn":23},{"ruleId":"250","severity":1,"message":"293","line":5,"column":8,"nodeType":"252","messageId":"253","endLine":5,"endColumn":17},{"ruleId":"250","severity":1,"message":"258","line":9,"column":16,"nodeType":"252","messageId":"253","endLine":9,"endColumn":22},{"ruleId":"250","severity":1,"message":"254","line":11,"column":8,"nodeType":"252","messageId":"253","endLine":11,"endColumn":22},{"ruleId":"250","severity":1,"message":"258","line":14,"column":16,"nodeType":"252","messageId":"253","endLine":14,"endColumn":22},{"ruleId":"250","severity":1,"message":"298","line":19,"column":8,"nodeType":"252","messageId":"253","endLine":19,"endColumn":22},{"ruleId":"250","severity":1,"message":"304","line":44,"column":9,"nodeType":"252","messageId":"253","endLine":44,"endColumn":21},{"ruleId":"250","severity":1,"message":"305","line":44,"column":23,"nodeType":"252","messageId":"253","endLine":44,"endColumn":38},{"ruleId":"261","severity":1,"message":"262","line":61,"column":6,"nodeType":"263","endLine":61,"endColumn":40,"suggestions":"306"},{"ruleId":"250","severity":1,"message":"307","line":63,"column":9,"nodeType":"252","messageId":"253","endLine":63,"endColumn":13},{"ruleId":"308","severity":1,"message":"309","line":274,"column":40,"nodeType":"310","messageId":"311","endLine":275,"endColumn":235},{"ruleId":"308","severity":1,"message":"312","line":278,"column":40,"nodeType":"310","messageId":"311","endLine":279,"endColumn":175},{"ruleId":"308","severity":1,"message":"313","line":289,"column":38,"nodeType":"310","messageId":"311","endLine":289,"endColumn":91},{"ruleId":"314","severity":1,"message":"315","line":421,"column":17,"nodeType":"316","endLine":421,"endColumn":42},{"ruleId":"314","severity":1,"message":"315","line":442,"column":17,"nodeType":"316","endLine":442,"endColumn":42},{"ruleId":"317","severity":1,"message":"318","line":509,"column":53,"nodeType":"310","messageId":"319","endLine":509,"endColumn":55},{"ruleId":"250","severity":1,"message":"320","line":579,"column":31,"nodeType":"252","messageId":"253","endLine":579,"endColumn":38},{"ruleId":"317","severity":1,"message":"318","line":705,"column":53,"nodeType":"310","messageId":"319","endLine":705,"endColumn":55},{"ruleId":"250","severity":1,"message":"320","line":775,"column":31,"nodeType":"252","messageId":"253","endLine":775,"endColumn":38},{"ruleId":"250","severity":1,"message":"321","line":873,"column":35,"nodeType":"252","messageId":"253","endLine":873,"endColumn":43},{"ruleId":"250","severity":1,"message":"255","line":12,"column":8,"nodeType":"252","messageId":"253","endLine":12,"endColumn":16},{"ruleId":"250","severity":1,"message":"258","line":14,"column":16,"nodeType":"252","messageId":"253","endLine":14,"endColumn":22},{"ruleId":"250","severity":1,"message":"298","line":19,"column":8,"nodeType":"252","messageId":"253","endLine":19,"endColumn":22},{"ruleId":"261","severity":1,"message":"262","line":50,"column":6,"nodeType":"263","endLine":50,"endColumn":40,"suggestions":"322"},{"ruleId":"265","severity":1,"message":"323","line":75,"column":9,"nodeType":"252","messageId":"267","endLine":75,"endColumn":13},{"ruleId":"308","severity":1,"message":"309","line":187,"column":40,"nodeType":"310","messageId":"311","endLine":188,"endColumn":235},{"ruleId":"308","severity":1,"message":"312","line":191,"column":40,"nodeType":"310","messageId":"311","endLine":192,"endColumn":175},{"ruleId":"308","severity":1,"message":"313","line":202,"column":38,"nodeType":"310","messageId":"311","endLine":202,"endColumn":91},{"ruleId":"314","severity":1,"message":"315","line":329,"column":17,"nodeType":"316","endLine":329,"endColumn":42},{"ruleId":"314","severity":1,"message":"315","line":350,"column":17,"nodeType":"316","endLine":350,"endColumn":42},{"ruleId":"317","severity":1,"message":"318","line":403,"column":53,"nodeType":"310","messageId":"319","endLine":403,"endColumn":55},{"ruleId":"250","severity":1,"message":"320","line":447,"column":31,"nodeType":"252","messageId":"253","endLine":447,"endColumn":38},{"ruleId":"317","severity":1,"message":"318","line":570,"column":53,"nodeType":"310","messageId":"319","endLine":570,"endColumn":55},{"ruleId":"250","severity":1,"message":"320","line":614,"column":31,"nodeType":"252","messageId":"253","endLine":614,"endColumn":38},{"ruleId":"246","replacedBy":"324"},{"ruleId":"248","replacedBy":"325"},{"ruleId":"250","severity":1,"message":"326","line":19,"column":20,"nodeType":"252","messageId":"253","endLine":19,"endColumn":32},{"ruleId":"250","severity":1,"message":"327","line":20,"column":18,"nodeType":"252","messageId":"253","endLine":20,"endColumn":28},{"ruleId":"250","severity":1,"message":"328","line":22,"column":23,"nodeType":"252","messageId":"253","endLine":22,"endColumn":38},{"ruleId":"250","severity":1,"message":"329","line":23,"column":21,"nodeType":"252","messageId":"253","endLine":23,"endColumn":34},{"ruleId":"250","severity":1,"message":"330","line":25,"column":22,"nodeType":"252","messageId":"253","endLine":25,"endColumn":36},{"ruleId":"250","severity":1,"message":"331","line":34,"column":12,"nodeType":"252","messageId":"253","endLine":34,"endColumn":25},{"ruleId":"250","severity":1,"message":"332","line":45,"column":12,"nodeType":"252","messageId":"253","endLine":45,"endColumn":28},{"ruleId":"250","severity":1,"message":"333","line":55,"column":12,"nodeType":"252","messageId":"253","endLine":55,"endColumn":29},{"ruleId":"250","severity":1,"message":"334","line":8,"column":8,"nodeType":"252","messageId":"253","endLine":8,"endColumn":17},{"ruleId":"250","severity":1,"message":"335","line":10,"column":8,"nodeType":"252","messageId":"253","endLine":10,"endColumn":16},{"ruleId":"261","severity":1,"message":"336","line":27,"column":6,"nodeType":"263","endLine":27,"endColumn":18,"suggestions":"337"},{"ruleId":"265","severity":1,"message":"294","line":82,"column":17,"nodeType":"252","messageId":"267","endLine":82,"endColumn":18},{"ruleId":"265","severity":1,"message":"294","line":127,"column":13,"nodeType":"252","messageId":"267","endLine":127,"endColumn":14},{"ruleId":"338","severity":1,"message":"339","line":139,"column":37,"nodeType":"340","messageId":"341","endLine":139,"endColumn":39},{"ruleId":"338","severity":1,"message":"339","line":139,"column":112,"nodeType":"340","messageId":"341","endLine":139,"endColumn":114},{"ruleId":"338","severity":1,"message":"342","line":139,"column":112,"nodeType":"340","messageId":"341","endLine":139,"endColumn":114},{"ruleId":"338","severity":1,"message":"342","line":139,"column":142,"nodeType":"340","messageId":"341","endLine":139,"endColumn":144},{"ruleId":"265","severity":1,"message":"294","line":167,"column":13,"nodeType":"252","messageId":"267","endLine":167,"endColumn":14},{"ruleId":"338","severity":1,"message":"339","line":179,"column":37,"nodeType":"340","messageId":"341","endLine":179,"endColumn":39},{"ruleId":"338","severity":1,"message":"339","line":179,"column":113,"nodeType":"340","messageId":"341","endLine":179,"endColumn":115},{"ruleId":"338","severity":1,"message":"342","line":179,"column":113,"nodeType":"340","messageId":"341","endLine":179,"endColumn":115},{"ruleId":"338","severity":1,"message":"342","line":179,"column":143,"nodeType":"340","messageId":"341","endLine":179,"endColumn":145},{"ruleId":"338","severity":1,"message":"342","line":181,"column":84,"nodeType":"340","messageId":"341","endLine":181,"endColumn":86},{"ruleId":"338","severity":1,"message":"342","line":181,"column":114,"nodeType":"340","messageId":"341","endLine":181,"endColumn":116},{"ruleId":"250","severity":1,"message":"343","line":203,"column":9,"nodeType":"252","messageId":"253","endLine":203,"endColumn":20},{"ruleId":"250","severity":1,"message":"344","line":204,"column":9,"nodeType":"252","messageId":"253","endLine":204,"endColumn":14},{"ruleId":"250","severity":1,"message":"297","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":25},{"ruleId":"250","severity":1,"message":"290","line":1,"column":27,"nodeType":"252","messageId":"253","endLine":1,"endColumn":36},"no-native-reassign",["345"],"no-negated-in-lhs",["346"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'Modal' is defined but never used.","'Figure' is defined but never used.","'uuidv4' is defined but never used.","'STORAGE' is assigned a value but never used.","'GENERICFUNCTIONS' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCars'. Either include it or remove the dependency array.","ArrayExpression",["347"],"no-redeclare","'style' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["345"],["346"],["348"],"'Accordion' is defined but never used.","React Hook useEffect has a missing dependency: 'getSsts'. Either include it or remove the dependency array.",["349"],"no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","'len' is assigned a value but never used.",["345"],["346"],"React Hook useEffect has missing dependencies: 'getCars' and 'getSsts'. Either include them or remove the dependency array.",["350"],"'useEffect' is defined but never used.",["345"],["346"],"'Container' is defined but never used.","'i' is already defined.",["345"],["346"],"'useState' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'ERRORLOG' is assigned a value but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'MOBILEBREAKPOINT' is assigned a value but never used.","'notSavedShow' is assigned a value but never used.","'setNotSavedShow' is assigned a value but never used.",["351"],"'test' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'option', 'option'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'option', 'filter', 'filter', 'option'.","Function declared in a loop contains unsafe references to variable(s) 'filter', 'filter'.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'popover' is assigned a value but never used.","'strIndex' is assigned a value but never used.",["352"],"'copy' is already defined.",["345"],["346"],"'setStartDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.","'setStartMileage' is assigned a value but never used.","'setEndMileage' is assigned a value but never used.","'setServiceName' is assigned a value but never used.","'isInDateRange' is defined but never used.","'isInMileageRange' is defined but never used.","'isSameServiceName' is defined but never used.","'ListGroup' is defined but never used.","'Calendar' is defined but never used.","React Hook useEffect has a missing dependency: 'getServiceLogs'. Either include it or remove the dependency array.",["353"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'currMileage' is assigned a value but never used.","'today' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"354","fix":"355"},{"desc":"354","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"361","fix":"363"},{"desc":"364","fix":"365"},"Update the dependencies array to be: [getCars, props.userInfo]",{"range":"366","text":"367"},{"range":"368","text":"367"},"Update the dependencies array to be: [getSsts, props.match.params.carId, props.userInfo]",{"range":"369","text":"370"},"Update the dependencies array to be: [getCars, getSsts, props.userInfo]",{"range":"371","text":"372"},"Update the dependencies array to be: [props.userInfo, props.serviceLog, getCars]",{"range":"373","text":"374"},{"range":"375","text":"374"},"Update the dependencies array to be: [getServiceLogs, props.cars]",{"range":"376","text":"377"},[1439,1455],"[getCars, props.userInfo]",[1388,1404],[1879,1921],"[getSsts, props.match.params.carId, props.userInfo]",[1111,1127],"[getCars, getSsts, props.userInfo]",[2353,2387],"[props.userInfo, props.serviceLog, getCars]",[2019,2053],[936,948],"[getServiceLogs, props.cars]"]