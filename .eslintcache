[{"C:\\Users\\domin\\autohub\\src\\index.js":"1","C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js":"2","C:\\Users\\domin\\autohub\\src\\components\\Home.js":"3","C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js":"4","C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js":"5","C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js":"6","C:\\Users\\domin\\autohub\\src\\components\\Login.js":"7","C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js":"8","C:\\Users\\domin\\autohub\\src\\models\\car.js":"9","C:\\Users\\domin\\autohub\\src\\controllers\\storage.js":"10","C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js":"11","C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js":"12","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js":"13","C:\\Users\\domin\\autohub\\src\\controllers\\auth.js":"14","C:\\Users\\domin\\autohub\\src\\controllers\\db.js":"15","C:\\Users\\domin\\autohub\\src\\App.js":"16","C:\\Users\\domin\\autohub\\src\\components\\CarModal.js":"17","C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js":"18","C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js":"19","C:\\Users\\domin\\autohub\\src\\models\\logOptions.js":"20","C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js":"21","C:\\Users\\domin\\autohub\\src\\models\\repairService.js":"22","C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js":"23","C:\\Users\\domin\\autohub\\src\\components\\LogFilters.js":"24"},{"size":338,"mtime":1606338417443,"results":"25","hashOfConfig":"26"},{"size":7995,"mtime":1608345883915,"results":"27","hashOfConfig":"26"},{"size":8139,"mtime":1608345144912,"results":"28","hashOfConfig":"26"},{"size":15453,"mtime":1609657969468,"results":"29","hashOfConfig":"26"},{"size":539,"mtime":1606122737011,"results":"30","hashOfConfig":"26"},{"size":9936,"mtime":1609408551279,"results":"31","hashOfConfig":"26"},{"size":2397,"mtime":1606206533045,"results":"32","hashOfConfig":"26"},{"size":21549,"mtime":1609408165992,"results":"33","hashOfConfig":"26"},{"size":1936,"mtime":1609654719171,"results":"34","hashOfConfig":"26"},{"size":1576,"mtime":1609575749606,"results":"35","hashOfConfig":"26"},{"size":867,"mtime":1608752122438,"results":"36","hashOfConfig":"26"},{"size":2186,"mtime":1608367481330,"results":"37","hashOfConfig":"26"},{"size":1918,"mtime":1609655756967,"results":"38","hashOfConfig":"26"},{"size":855,"mtime":1606124166902,"results":"39","hashOfConfig":"26"},{"size":1715,"mtime":1608533024978,"results":"40","hashOfConfig":"26"},{"size":3162,"mtime":1609606013275,"results":"41","hashOfConfig":"26"},{"size":10358,"mtime":1609572903397,"results":"42","hashOfConfig":"26"},{"size":2629,"mtime":1609648938627,"results":"43","hashOfConfig":"26"},{"size":32160,"mtime":1609659095862,"results":"44","hashOfConfig":"26"},{"size":1000,"mtime":1609045158505,"results":"45","hashOfConfig":"26"},{"size":26427,"mtime":1609656261538,"results":"46","hashOfConfig":"26"},{"size":1678,"mtime":1609649000215,"results":"47","hashOfConfig":"26"},{"size":127,"mtime":1608533923889,"results":"48","hashOfConfig":"26"},{"size":9292,"mtime":1609191448838,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"8mgafs",{"filePath":"53","messages":"54","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},"C:\\Users\\domin\\autohub\\src\\index.js",[],["114","115"],"C:\\Users\\domin\\autohub\\src\\components\\HomeMobile.js",["116","117","118","119","120","121","122","123","124","125","126","127","128","129","130"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport CarModal from './CarModal.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction HomeMobile(props) {\r\n\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[isListView, setIsListView] = useState(true); //flag to toggle the mode of displaying cars (list vs. grid)\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      console.log(cars);\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {showCarModal}\r\n        setShow = {setShowCarModal}\r\n        title = \"Add Car\"\r\n        car = {CARMODEL.car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Row style = {{marginTop: \"5%\"}}>\r\n        <Col>\r\n          <Row>\r\n            <Button variant = \"outline-dark\" style = {{marginRight: \"3%\"}}\r\n              onClick = {() => {setShowCarModal(true)}}\r\n            >\r\n              +\r\n            </Button>\r\n            <h4 style = {{marginTop: \"0.5%\"}}> Your Cars </h4>\r\n          </Row>\r\n          {cars.length === 0 ?\r\n            <div></div>\r\n          :\r\n            <div>\r\n              <br/>\r\n              <Row style = {{textAlign: \"center\"}}>\r\n                <Col>\r\n                  <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                    onClick = {() => {setIsListView(true)}}\r\n                  >\r\n                    <i class = \"fa fa-bars\"> </i> List\r\n                  </Button>\r\n                </Col>\r\n                <Col>\r\n                  <Button variant = \"light\"\r\n                    onClick = {() => {setIsListView(false)}}\r\n                  >\r\n                    <i class = \"fa fa-th-large\"> </i> Grid\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          }\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any cars. Click the + button to add a car 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col xs = {5}>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Image src = \"car-holder.png\" style = {{width: \"100%\", height: \"100px\"}} />\r\n                              :\r\n                              <Image src = {car.imageUrl} style = {{width: \"100%\", height: \"100px\"}} />\r\n                            }\r\n                          </Col>\r\n                          <Col xs = {7} style = {{float: \"right\"}}>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <b> {car.name} </b> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col md = {3} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img style = {{width: \"100%\", height: \"175px\"}}id = {car.carId} variant = \"top\" src = \"car-holder.png\" />\r\n                          :\r\n                          <Card.Img style = {{width: \"100%\", height: \"175px\"}} id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <Card.Header>\r\n                  Upcoming Maintenance 🛠️\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  You have nothing scheduled for your cars.\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HomeMobile;\r\n","C:\\Users\\domin\\autohub\\src\\components\\Home.js",["131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport '../component-css/Home.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport CarModal from './CarModal.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction Home(props) {\r\n\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[cars, setCars] = useState(); //user's Cars\r\n  const[isListView, setIsListView] = useState(false); //flag to toggle the mode of displaying cars (list vs. grid)\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n  }, [props.userInfo])\r\n\r\n  //CAR FUNCTIONS\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  if(cars === undefined) {\r\n    return (\r\n      <Container fluid>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {showCarModal}\r\n        setShow = {setShowCarModal}\r\n        title = \"Add Car\"\r\n        car = {CARMODEL.car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Row style = {{marginTop: \"2%\"}}>\r\n        <Col lg = {7}>\r\n          <Row>\r\n            <Col xs = {6}>\r\n              <Button variant = \"outline-dark\" style = {{float: \"left\", marginRight: \"3%\"}}\r\n                onClick = {() => {setShowCarModal(true)}}\r\n              >\r\n                +\r\n              </Button>\r\n              <h4 style = {{marginTop: \"0.5%\"}}> Your Cars </h4>\r\n            </Col>\r\n            {cars.length === 0 ?\r\n              <div></div>\r\n              :\r\n              <Col xs = {6} style = {{textAlign: \"right\"}}>\r\n                <Button variant = \"light\" style = {{marginRight: \"1%\"}}\r\n                  onClick = {() => {setIsListView(true)}}\r\n                >\r\n                  <i class = \"fa fa-bars\"> </i> List\r\n                </Button>\r\n                <Button variant = \"light\"\r\n                  onClick = {() => {setIsListView(false)}}\r\n                >\r\n                  <i class = \"fa fa-th-large\"> </i> Grid\r\n                </Button>\r\n              </Col>\r\n            }\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n          {cars.length === 0 ?\r\n            <Col style = {{marginBottom: \"10%\"}}>\r\n              <h6> You have not added any cars. Click the + button to add a car 🚗 </h6>\r\n            </Col>\r\n            :\r\n            <div></div>\r\n          }\r\n          </Row>\r\n          <Row>\r\n            {cars.map((car, index) => {\r\n              var style = {};\r\n              if(index === cars.length - 1) {\r\n                var style = {marginBottom: \"5%\"};\r\n              }\r\n              if(isListView) {\r\n                return (\r\n                  <Col xs = {12} style = {style}>\r\n                    <ListGroup horizontal>\r\n                      <ListGroup.Item action style = {{width: \"100%\"}}\r\n                        onClick = {() => {\r\n                          window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col xs = {3}>\r\n                            {car.imageId.toString().trim().length === 0 ?\r\n                              <Image src = \"car-holder.png\" style = {{width: \"100%\", height: \"125px\"}} />\r\n                              :\r\n                              <Image src = {car.imageUrl} style = {{width: \"100%\", height: \"125px\"}} />\r\n                            }\r\n                          </Col>\r\n                          <Col xs = {9}>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <b> {car.name} </b> </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col>\r\n                                <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    </ListGroup>\r\n                  </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                  <Col md = {3} style = {{marginBottom: \"5%\"}}>\r\n                    <a style = {{cursor: \"pointer\"}}\r\n                      onClick = {() => {\r\n                        window.location.pathname = \"/carInfo\" + \"/\" + car.carId\r\n                      }}\r\n                    >\r\n                      <Card border = \"dark\">\r\n                        {car.imageId.toString().trim().length === 0 ?\r\n                          <Card.Img style = {{width: \"100%\", height: \"125px\"}}id = {car.carId} variant = \"top\" src = \"car-holder.png\" />\r\n                          :\r\n                          <Card.Img style = {{width: \"100%\", height: \"125px\"}} id = {car.carId} variant = \"top\" src = {car.imageUrl}/>\r\n                        }\r\n                        <Card.Body>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <b> {car.name} </b> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> {car.year + \" \" + \" \" + car.make + \" \" + car.model} </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <p> <Badge pills variant = \"light\"> {car.mileage + \" miles\"} </Badge> </p>\r\n                            </Col>\r\n                          </Row>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    </a>\r\n                  </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n        </Col>\r\n        <Col lg = {5}>\r\n          <Row>\r\n            <Col>\r\n              <Card>\r\n                <Card.Header>\r\n                  Upcoming Maintenance 🛠️\r\n                  {/*\r\n                  <Button\r\n                    variant = \"outline-dark\"\r\n                    style = {{float: \"right\"}}\r\n                    size = \"sm\"\r\n                    disabled = {cars.length === 0}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                  */}\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  You have nothing scheduled for your cars.\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n",["145","146"],"C:\\Users\\domin\\autohub\\src\\pages\\CarInfo.js",["147","148"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Image from 'react-bootstrap/Image';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport CarModal from '../components/CarModal.js';\r\nimport ScheduledLog from '../components/ScheduledLog.js';\r\nimport RepairLog from '../components/RepairLog.js';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\n\r\nfunction CarInfo(props) {\r\n\r\n  const[car, setCar] = useState();\r\n  const[serviceLog, setServiceLog] = useState();\r\n  const[ssts, setSsts] = useState();\r\n  const[show, setShow] = useState(false);\r\n  const[deleteShow, setDeleteShow] = useState(false);\r\n  const[deleteCarShow, setDeleteCarShow] = useState(false);\r\n  const[showEmpty, setShowEmpty] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getCar(props.match.params.carId);\r\n    getSsts();\r\n    getServiceLog(props.match.params.carId);\r\n  }, [props.match.params.carId, props.userInfo])\r\n\r\n  function getCar(carId) {\r\n    if(carId === undefined || carId === null) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"carId\", carId, \"cars\").onSnapshot(quereySnapshot => {\r\n      if(quereySnapshot.docs.length > 1 || quereySnapshot.docs[0] === undefined) {\r\n        //alert(\"Internal error. Could not find car in database.\");\r\n        setShowEmpty(true);\r\n      }\r\n      else {\r\n        setCar(quereySnapshot.docs[0].data());\r\n      }\r\n    });\r\n  }\r\n\r\n  function getServiceLog(carId) {\r\n    if(carId === undefined || carId === null) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"carReferenceId\", carId, \"serviceLogs\").onSnapshot(quereySnapshot => {\r\n      if(quereySnapshot.docs.length > 1 || quereySnapshot.docs[0] === undefined) {\r\n        //alert(\"Internal error. Could not find car's service log in database.\");\r\n        setShowEmpty(true);\r\n      }\r\n      else {\r\n        var serviceLog = quereySnapshot.docs[0].data();\r\n        if(serviceLog !== undefined) {\r\n          var len;\r\n          var repairLen = serviceLog.repairLog.length;\r\n          var scheduledLen = serviceLog.scheduledLog.length;\r\n          if(repairLen > scheduledLen) {\r\n            len = serviceLog.repairLog.length;\r\n          }\r\n          else {\r\n            len = serviceLog.scheduledLog.length;\r\n          }\r\n          /*\r\n          for(var i = 0; i < len; i++) {\r\n            if(i < repairLen && repairLen !== 0) {\r\n              serviceLog.repairLog[i].datePerformed = new Date(serviceLog.repairLog[i].datePerformed);\r\n            }\r\n            if(i < scheduledLen && scheduledLen !== 0) {\r\n              serviceLog.scheduledLog[i].datePerformed = new Date(serviceLog.scheduledLog[i].datePerformed);\r\n            }\r\n          }\r\n          */\r\n        }\r\n        setServiceLog(serviceLog);\r\n      }\r\n    });\r\n  }\r\n\r\n  function getSsts() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"scheduledServiceTypes\").onSnapshot(quereySnapshot => {\r\n      var ssts = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        ssts.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setSsts(ssts);\r\n    });\r\n  }\r\n\r\n  function resetCarImageFields() {\r\n    var copy = JSON.parse(JSON.stringify(car));\r\n    copy.imageId = \"\";\r\n    copy.imageUrl = \"\";\r\n    DB.writeOne(copy.carId, copy, \"cars\",\r\n      function(data) {\r\n        setCar(data);\r\n        setDeleteShow(false);\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setDeleteShow(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  function deleteCarImage() {\r\n    if(car === undefined) {\r\n      alert(\"Internal error. Could not delete car image\");\r\n      return;\r\n    }\r\n    STORAGE.deleteFile(car.imageUrl,\r\n      function() {\r\n        setDeleteShow(false);\r\n        if(showEmpty || deleteCarShow) {\r\n          return;\r\n        }\r\n        resetCarImageFields();\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setDeleteShow(false);\r\n        setDeleteCarShow(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  function deleteServiceLog() {\r\n    DB.deleteOne(serviceLog.logId, \"serviceLogs\",\r\n      function() {\r\n        return;\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  //deletes car and all other objects associated with it\r\n  function deleteCar() {\r\n    DB.deleteOne(car.carId, \"cars\",\r\n      function() {\r\n        removeCarFromSsts();\r\n        deleteServiceLog();\r\n        if(car.imageId.length !== 0 && car.imageUrl.length !== 0) {\r\n          deleteCarImage();\r\n        }\r\n        setDeleteCarShow(false);\r\n        setShowEmpty(true);\r\n      },\r\n      function(error) {\r\n        setDeleteCarShow(false);\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  function removeCarFromSsts() {\r\n    for(var i = 0; i < ssts.length; i++) {\r\n      var sst = ssts[i];\r\n      if(sst.carsScheduled[car.carId] !== undefined) {\r\n        delete sst.carsScheduled[car.carId];\r\n        DB.writeOne(sst.typeId, sst, \"scheduledServiceTypes\",\r\n          function() {\r\n            return;\r\n          },\r\n          function(error) {\r\n            setDeleteCarShow(false);\r\n            alert(error);\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if(car === undefined || ssts === undefined || serviceLog === undefined || showEmpty) {\r\n    if(showEmpty) {\r\n      return (\r\n        <Container>\r\n          <br/>\r\n          <Row>\r\n            <Col style = {{textAlign: \"center\"}}>\r\n              <h5> This car does not exist 😯 </h5>\r\n            </Col>\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n            <Col style = {{textAlign: \"center\"}}>\r\n              <Button onClick = {() => {window.location.pathname = \"/\"}}>\r\n                Return home\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n    return (\r\n      <Container>\r\n        <div style = {{textAlign: \"center\", marginTop: \"3%\"}}>\r\n          <Spinner animation = \"grow\"/>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <CarModal\r\n        show = {show}\r\n        setShow = {setShow}\r\n        title = \"Edit Car\"\r\n        car = {car}\r\n        userInfo = {props.userInfo}\r\n      />\r\n      <Modal\r\n        show = {deleteShow}\r\n        onHide = {() => {setDeleteShow(false)}}\r\n        backdrop = \"static\"\r\n        keyboard = {false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> Delete Car Image </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Row>\r\n            <Col lg = {6} style = {{marginBottom: \"5%\"}}>\r\n              Are you sure you want to delete this image?\r\n            </Col>\r\n            <Col lg = {6} style = {{textAlign: \"center\"}}>\r\n              <Image src = {car.imageUrl} style = {{width: \"175px\", height: \"175px\"}} />\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {deleteCarImage()}}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {setDeleteShow(false)}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        show = {deleteCarShow}\r\n        onHide = {() => {setDeleteCarShow(false)}}\r\n        backdrop = \"static\"\r\n        keyboard = {false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title> Delete Car </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Alert variant = \"danger\">\r\n            <Alert.Heading>\r\n              Warning\r\n            </Alert.Heading>\r\n            Are you sure you want to delete this car? (all of this car's data will be lost)\r\n          </Alert>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick = {() => {deleteCar()}}\r\n          >\r\n            Yes\r\n          </Button>\r\n          <Button variant = \"secondary\"\r\n            onClick = {() => {setDeleteCarShow(false)}}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <br/>\r\n      <Row>\r\n        <Col>\r\n          <Tabs defaultActiveKey = \"info\" id = {car.carId}>\r\n            <Tab eventKey = \"info\" title = \"Info\">\r\n              <br/>\r\n              <Row>\r\n                <Col md = {6}>\r\n                  <Row>\r\n                    <Col>\r\n                      <Row>\r\n                        <Col style = {{textAlign: \"right\"}}>\r\n                          <DropdownButton title = \"⚙️\" variant = \"outline-dark\">\r\n                            <Dropdown.Item onClick = {() => {setShow(true)}}> Edit </Dropdown.Item>\r\n                            <Dropdown.Item> Export Data </Dropdown.Item>\r\n                            <Dropdown.Item disabled = {car.imageUrl.trim().length === 0} onClick = {() => {setDeleteShow(true)}}> Delete Image </Dropdown.Item>\r\n                            <Dropdown.Item onClick = {() => {setDeleteCarShow(true)}}> Delete Car </Dropdown.Item>\r\n                          </DropdownButton>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md = {12}>\r\n                          <Row>\r\n                            <Col xl = {4} style = {{marginBottom: \"2%\", textAlign: \"center\"}}>\r\n                              {car.imageUrl.trim().length === 0 ?\r\n                                <Image src = \"/noImage.png\" style = {{width: \"175px\", height: \"175px\"}} />\r\n                                :\r\n                                <Image src = {car.imageUrl} style = {{width: \"175px\", height: \"175px\"}} />\r\n                              }\r\n                            </Col>\r\n                            <Col xl = {8}>\r\n                              <Row>\r\n                                <Col md = {12}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[0].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[0].value]}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                              <Row>\r\n                                <Col md = {12}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[1].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[1].value]}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                              <Row>\r\n                                <Col sm = {4}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[2].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[2].value]}\r\n                                  />\r\n                                </Col>\r\n                                <Col sm = {4}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[3].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[3].value]}\r\n                                  />\r\n                                </Col>\r\n                                <Col sm = {4}>\r\n                                  <div style = {{marginBottom: \"1%\"}}> {CARMODEL.publicFields[4].displayName} </div>\r\n                                  <Form.Control\r\n                                    as = \"input\"\r\n                                    size = \"sm\"\r\n                                    readOnly\r\n                                    style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                    value = {car[CARMODEL.publicFields[4].value]}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                            </Col>\r\n                          </Row>\r\n                        </Col>\r\n                        {CARMODEL.publicFields.map((field, index) => {\r\n                          if(index < 5) {\r\n                            return (\r\n                              <div></div>\r\n                            );\r\n                          }\r\n                          return (\r\n                            <Col md = {field.modalColSpan}>\r\n                              <div style = {{marginBottom: \"1%\"}}> {field.displayName} </div>\r\n                              <Form.Control\r\n                                as = {field.inputType === \"select\" ? \"input\" : field.inputType}\r\n                                size = \"sm\"\r\n                                readOnly\r\n                                style = {{backgroundColor: \"#F4F6F6\"}}\r\n                                value = {car[field.value]}\r\n                              />\r\n                            </Col>\r\n                          );\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Tab>\r\n            <Tab eventKey = \"scheduled-maintenance-log\" title = \"Scheduled Log\">\r\n              <br/>\r\n              <ScheduledLog\r\n                userInfo = {props.userInfo}\r\n                serviceLog = {serviceLog}\r\n                ssts = {ssts}\r\n                car = {car}\r\n                carId = {props.match.params.carId}\r\n              />\r\n            </Tab>\r\n            <Tab eventKey = \"repair-maintenance-log\" title = \"Repair Log\">\r\n              <br/>\r\n              <RepairLog\r\n                userInfo = {props.userInfo}\r\n                serviceLog = {serviceLog}\r\n                ssts = {ssts}\r\n                car = {car}\r\n                carId = {props.match.params.carId}\r\n              />\r\n            </Tab>\r\n          </Tabs>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CarInfo;\r\n","C:\\Users\\domin\\autohub\\src\\controllers\\firebaseapp.js",[],["149","150"],"C:\\Users\\domin\\autohub\\src\\pages\\ScheduledServiceTypes.js",["151"],"C:\\Users\\domin\\autohub\\src\\components\\Login.js",["152","153","154"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport GoogleButton from 'react-google-button';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst AUTH = require('../controllers/auth.js');\r\n\r\nfunction Login(props) {\r\n\r\n  const[registering, toggleRegistering] = useState(false);\r\n  const[email, setEmail] = useState(\"\");\r\n  const[password, setPassword] = useState(\"\");\r\n\r\n  return (\r\n    <Container>\r\n      <Row style = {{height: \"10%\"}}>\r\n      </Row>\r\n\t\t\t<Row style = {{float: \"center\"}}>\r\n\t\t\t\t<Col></Col>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t<Card.Title\r\n\t\t\t\t\t\t\tstyle = {{textAlign: \"center\"}}\r\n\t\t\t\t\t\t>\r\n              AutoHub\r\n\t\t\t\t\t\t</Card.Title>\r\n\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t{/*TODO: add register form */}\r\n\t\t\t\t\t\t\t{!registering ?\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t{/*TODO: add email & password authentication service */}\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label> Email </Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\tas = \"input\"\r\n\t\t\t\t\t\t\t\t\t\t\tname = \"email\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue = {email}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange = {(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetEmail(e.target.value);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Label> Password </Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\t\t\ttype = \"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tname = \"password\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue = {password}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange = {(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetPassword(e.target.value);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t<Button variant = \"secondary\"> Login </Button>\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t*non-Google login in progress*\r\n\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<h5> Or </h5>\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t{/*TODO: center and make google button responsive */}\r\n\t\t\t\t\t\t\t\t\t<GoogleButton\r\n\t\t\t\t\t\t\t\t\t\ttype = \"light\"\r\n                    onClick = {props.googleSignin}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col></Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n",["155","156"],"C:\\Users\\domin\\autohub\\src\\components\\SSTModal.js",["157","158","159","160"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst SSTModel = require('../models/scheduledServiceType.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\nconst DB = require('../controllers/db.js');\r\n\r\nfunction SSTModal(props) {\r\n\r\n  const[cars, setCars] = useState();\r\n  const[sst, setSst] = useState();\r\n  const[show, setShow] = useState(false);\r\n  const[title, setTitle] = useState(\"\");\r\n  const[validated, setValidated] = useState(false);\r\n  const[toggleApply, setToggleApply] = useState(false);\r\n  const[selectedCars, setSelectedCars] = useState({});\r\n  const[globalInterval, setGlobalInterval] = useState();\r\n  const[isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setShow(props.show);\r\n    setTitle(props.title);\r\n    setGlobalInterval(SSTModel.interval);\r\n    initialize(props.sst, props.cars);\r\n  }, [props.sst, props.show, props.title, props.userInfo, props.cars])\r\n\r\n  function initialize(initSst, initCars) {\r\n    if(initSst === undefined || initCars === undefined) {\r\n      return;\r\n    }\r\n    var len = Object.keys(initSst.carsScheduled).length;\r\n    var selected = {};\r\n    for(var i = 0; i < initCars.length; i++) {\r\n      var car = initCars[i];\r\n      selected[car.carId] = false;\r\n      if(initSst.carsScheduled[car.carId] === undefined) {\r\n        initSst.carsScheduled[car.carId] = SSTModel.interval;\r\n      }\r\n    }\r\n    setSelectedCars(selected);\r\n    setSst(initSst);\r\n    setCars(initCars);\r\n  }\r\n\r\n  function handleModalClose() {\r\n    setIsLoading(false);\r\n    props.setShow(false);\r\n    setToggleApply(false);\r\n    setValidated(false);\r\n    setSst();\r\n    setTitle(\"\");\r\n  }\r\n\r\n  function onChangeInterval(e, id, option) {\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    var copy = JSON.parse(JSON.stringify(sst));\r\n    if(name === \"time\") {\r\n      if(option === \"quantity\" && isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.carsScheduled[id].time[option] = value;\r\n    }\r\n    else {\r\n      if(isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.carsScheduled[id].miles = value;\r\n    }\r\n    setSst(copy);\r\n    setValidated(false);\r\n  }\r\n\r\n  function onChangeGlobalInterval(e, option) {\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    var copy = JSON.parse(JSON.stringify(globalInterval));\r\n    if(name === \"time\") {\r\n      if(option === \"quantity\" && isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.time[option] = value;\r\n    }\r\n    else {\r\n      if(isNaN(value)) {\r\n        return;\r\n      }\r\n      copy.miles = value;\r\n    }\r\n    setGlobalInterval(copy);\r\n  }\r\n\r\n  function getNumSelected() {\r\n    var count = 0;\r\n    for(var key in selectedCars) {\r\n      if(selectedCars[key] === true) {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function selectAll() {\r\n    var len = Object.keys(selectedCars).length;\r\n    var selected = {};\r\n    for(var i = 0; i < cars.length; i++) {\r\n      var car = cars[i];\r\n      selected[car.carId] = true;\r\n    }\r\n    setSelectedCars(selected);\r\n  }\r\n\r\n  function unselectAll() {\r\n    var len = Object.keys(selectedCars).length;\r\n    var selected = {};\r\n    for(var i = 0; i < cars.length; i++) {\r\n      var car = cars[i];\r\n      selected[car.carId] = false;\r\n    }\r\n    setSelectedCars(selected);\r\n  }\r\n\r\n  function selectCar(id) {\r\n    var copy = JSON.parse(JSON.stringify(selectedCars));\r\n    copy[id] = !copy[id];\r\n    setSelectedCars(copy);\r\n  }\r\n\r\n  function applyGlobalInterval() {\r\n    var copy = JSON.parse(JSON.stringify(sst));\r\n    for(var key in copy.carsScheduled) {\r\n      if(selectedCars[key]) {\r\n        copy.carsScheduled[key] = globalInterval;\r\n      }\r\n    }\r\n    setSst(copy);\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    setValidated(true);\r\n    var isValid = checkSubmitFields();\r\n    if(isValid) {\r\n      if(props.userCreated !== undefined) {\r\n        sst.userCreated = props.userCreated;\r\n        if(sst.typeId.trim().length === 0) {\r\n          sst.typeId = GENERICFUNCTIONS.generateId();\r\n        }\r\n        saveSst();\r\n      }\r\n      else {\r\n        alert(\"Internal error. Could not add scheduled service type\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function saveSst() {\r\n    trimSst();\r\n    setIsLoading(true);\r\n    DB.writeOne(sst.typeId, sst, \"scheduledServiceTypes\",\r\n      function() {\r\n        handleModalClose();\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setIsLoading(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  function trimSst() {\r\n    sst.serviceName = sst.serviceName.trim();\r\n    for(var key in sst.carsScheduled) {\r\n      var entry = sst.carsScheduled[key];\r\n      entry.miles = Number(entry.miles.toString().trim());\r\n      entry.time.quantity = Number(entry.time.quantity.toString().trim());\r\n      entry.time.units = entry.time.units.trim();\r\n    }\r\n  }\r\n\r\n  function checkSubmitFields() {\r\n    var isValid = true;\r\n    if(sst.serviceName.trim().length === 0) {\r\n      sst.serviceName = \"\";\r\n      isValid = false;\r\n    }\r\n    for(var key in sst.carsScheduled) {\r\n      var entry = sst.carsScheduled[key];\r\n      if(entry.miles.toString().trim().length === 0) {\r\n        sst.carsScheduled[key].miles = 0;\r\n      }\r\n      if(entry.time.quantity.toString().trim().length === 0) {\r\n        sst.carsScheduled[key].time.quantity = 0;\r\n      }\r\n      if(Number(entry.time.quantity.toString().trim()) > 0 && entry.time.units.trim() === \"none\") {\r\n        isValid = false;\r\n      }\r\n      if(entry.time.units.length !== 0 && entry.time.units !== \"none\" && entry.time.quantity === 0) {\r\n        isValid = false;\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  if(sst === undefined || cars === undefined || sst.carsScheduled === undefined) {\r\n    return <div></div>;\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show = {show}\r\n      onHide = {handleModalClose}\r\n      backdrop = \"static\"\r\n      keyboard = {false}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title> {title} </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label> Service Name </Form.Label>\r\n              <Form.Control\r\n                isInvalid = {validated ? sst.serviceName.trim().length === 0 : undefined}\r\n                size = \"sm\"\r\n                as = \"input\"\r\n                name = \"serviceName\"\r\n                value = {sst.serviceName}\r\n                onChange = {(e) => {\r\n                  var copy = JSON.parse(JSON.stringify(sst));\r\n                  var name = [e.target.name][0];\r\n                  var value = e.target.value;\r\n                  copy[name] = value;\r\n                  setSst(copy);\r\n                  setValidated(false);\r\n                }}\r\n              />\r\n              <Form.Control.Feedback type = \"invalid\">\r\n                Required\r\n              </Form.Control.Feedback>\r\n            </Col>\r\n          </Row>\r\n          <hr style = {{border: \"1px solid lightGray\"}} />\r\n          <Row>\r\n            <Col xs = {9}>\r\n              <h5> Cars </h5>\r\n            </Col>\r\n            <Col xs = {3} style = {{textAlign: \"right\"}}>\r\n              {!toggleApply ?\r\n                <Button variant = \"outline-dark\" size = \"sm\"\r\n                  onClick = {() => {\r\n                    setToggleApply(true);\r\n                  }}\r\n                >\r\n                  ✏️\r\n                </Button>\r\n                :\r\n                <Button variant = \"outline-dark\" size = \"sm\"\r\n                  onClick = {() => {\r\n                    setToggleApply(false);\r\n                  }}\r\n                >\r\n                  ✔️\r\n                </Button>\r\n              }\r\n            </Col>\r\n          </Row>\r\n          <br/>\r\n          {!toggleApply ?\r\n            <div>\r\n              {cars.map((car) => {\r\n                return (\r\n                  <Row>\r\n                    <Col>\r\n                      <ListGroup horizontal>\r\n                        <ListGroup.Item style = {{width: \"100%\"}}>\r\n                          <Row style = {{marginBottom: \"3%\"}}>\r\n                            <Col>\r\n                              <p> <strong> {car.name} </strong> </p>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col sm = {5} style = {{marginBottom: \"3%\"}}>\r\n                              <Form.Label> 💨 Mile Interval </Form.Label>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = \"input\"\r\n                                name = \"miles\"\r\n                                value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                          sst.carsScheduled[car.carId].miles\r\n                                          :\r\n                                          SSTModel.interval.miles\r\n                                        }\r\n                                onChange = {(e) => {\r\n                                  onChangeInterval(e, car.carId);\r\n                                }}\r\n                              />\r\n                            </Col>\r\n                            <Col sm = {7}>\r\n                              <Form.Label> 🕒 Time Interval </Form.Label>\r\n                              <InputGroup size = \"sm\">\r\n                                <Form.Control\r\n                                  as = \"input\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.quantity\r\n                                            :\r\n                                            SSTModel.interval.time.quantity\r\n                                          }\r\n                                  isInvalid = {validated && sst.carsScheduled[car.carId] !== undefined ? sst.carsScheduled[car.carId].time.units.length !== 0 && sst.carsScheduled[car.carId].time.units !== \"none\" && sst.carsScheduled[car.carId].time.quantity === 0 : undefined}\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"quantity\");\r\n                                  }}\r\n                                  style = {{marginRight: \"2%\"}}\r\n                                />\r\n                                <Form.Control\r\n                                  as = \"select\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.units\r\n                                            :\r\n                                            SSTModel.interval.time.units\r\n                                          }\r\n                                  isInvalid = {validated && sst.carsScheduled[car.carId] !== undefined ? Number(sst.carsScheduled[car.carId].time.quantity.toString().trim()) > 0 && sst.carsScheduled[car.carId].time.units === \"none\"\r\n                                              :\r\n                                              undefined\r\n                                              }\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"units\");\r\n                                  }}\r\n                                >\r\n                                  <option value = \"none\" selected> Select </option>\r\n                                  {SSTModel.timeUnits.map((unit) => {\r\n                                    return (\r\n                                      <option value = {unit.value}> {unit.displayName} </option>\r\n                                    );\r\n                                  })}\r\n                                </Form.Control>\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </ListGroup.Item>\r\n                      </ListGroup>\r\n                    </Col>\r\n                  </Row>\r\n                );\r\n              })}\r\n            </div>\r\n            :\r\n            <div>\r\n              <Row style = {{marginBottom: \"3%\"}}>\r\n                <Col>\r\n                  <InputGroup size = \"sm\">\r\n                    <div style = {{marginRight: \"1%\"}}>\r\n                      Every\r\n                    </div>\r\n                    <div style = {{width: \"15%\", marginRight: \"1%\"}}>\r\n                      <Form.Control\r\n                        size = \"sm\"\r\n                        as = \"input\"\r\n                        name = \"miles\"\r\n                        value = {globalInterval !== undefined ?\r\n                                  globalInterval.miles\r\n                                  :\r\n                                  SSTModel.interval.miles\r\n                                }\r\n                        onChange = {(e) => {\r\n                          onChangeGlobalInterval(e);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div style = {{marginRight: \"1%\"}}>\r\n                      miles or\r\n                    </div>\r\n                    <div style = {{width: \"12%\", marginRight: \"1%\"}}>\r\n                      <Form.Control\r\n                        size = \"sm\"\r\n                        as = \"input\"\r\n                        name = \"time\"\r\n                        value = {globalInterval !== undefined ?\r\n                                  globalInterval.time.quantity\r\n                                  :\r\n                                  SSTModel.interval.time.quantity\r\n                                }\r\n                        onChange = {(e) => {\r\n                          onChangeGlobalInterval(e, \"quantity\");\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <Form.Control\r\n                      as = \"select\"\r\n                      name = \"time\"\r\n                      value = {globalInterval !== undefined ?\r\n                                globalInterval.time.units\r\n                                :\r\n                                SSTModel.interval.time.units\r\n                              }\r\n                      onChange = {(e) => {\r\n                        onChangeGlobalInterval(e, \"units\");\r\n                      }}\r\n                    >\r\n                      <option value = \"\" selected> Select </option>\r\n                      {SSTModel.timeUnits.map((unit) => {\r\n                        return (\r\n                          <option value = {unit.value}> {unit.displayName} </option>\r\n                        );\r\n                      })}\r\n                    </Form.Control>\r\n                  </InputGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row style = {{marginBottom: \"3%\"}}>\r\n                <Col style = {{textAlign: \"right\"}}>\r\n                  <Button size = \"sm\" variant = \"success\" style = {{marginRight: \"2%\"}}\r\n                    onClick = {() => {applyGlobalInterval()}}\r\n                  >\r\n                    Apply\r\n                  </Button>\r\n                  <OverlayTrigger\r\n                    key = \"apply-info\"\r\n                    placement = \"bottom\"\r\n                    overlay = {\r\n                      <Tooltip id = \"apply-info-tooltip\">\r\n                        Enter the desired <strong> mile </strong> and/or <strong> time </strong> interval and click the 'Apply' button\r\n                        to apply it to the selected cars.\r\n                      </Tooltip>\r\n                    }\r\n                  >\r\n                    <Button size = \"sm\" variant = \"light\">\r\n                      🛈\r\n                    </Button>\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n              <hr style = {{border: \"1px solid lightGray\"}} />\r\n              <Row style = {{marginBottom: \"2%\"}}>\r\n                <Col>\r\n                  {getNumSelected() !== 0 ?\r\n                    <Button variant = \"secondary\" size = \"sm\"\r\n                      onClick = {() => {unselectAll()}}\r\n                    >\r\n                      Unselect All\r\n                    </Button>\r\n                    :\r\n                    <Button variant = \"secondary\" size = \"sm\"\r\n                      onClick = {() => {selectAll()}}\r\n                    >\r\n                      Select All\r\n                    </Button>\r\n                  }\r\n                </Col>\r\n              </Row>\r\n              {cars.map((car, index) => {\r\n                return (\r\n                  <Row>\r\n                    <Col>\r\n                      <ListGroup horizontal>\r\n                        <ListGroup.Item>\r\n                          <Row style = {{marginBottom: \"3%\"}}>\r\n                            <Col>\r\n                              <Form.Check\r\n                                type = \"checkbox\"\r\n                                checked = {selectedCars[car.carId]}\r\n                                id = {car.carId + index}\r\n                                label = {<p> <strong> {car.name} </strong> </p>}\r\n                                onChange = {() => {selectCar(car.carId)}}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col sm = {5} style = {{marginBottom: \"3%\"}}>\r\n                              <Form.Label> 💨 Mile Interval </Form.Label>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = \"input\"\r\n                                name = \"miles\"\r\n                                value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                          sst.carsScheduled[car.carId].miles\r\n                                          :\r\n                                          SSTModel.interval.miles\r\n                                        }\r\n                                onChange = {(e) => {\r\n                                  onChangeInterval(e, car.carId);\r\n                                }}\r\n                              />\r\n                            </Col>\r\n                            <Col sm = {7}>\r\n                              <Form.Label> 🕒 Time Interval </Form.Label>\r\n                              <InputGroup size = \"sm\">\r\n                                <Form.Control\r\n                                  as = \"input\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.quantity\r\n                                            :\r\n                                            SSTModel.interval.time.quantity\r\n                                          }\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"quantity\");\r\n                                  }}\r\n                                  style = {{marginRight: \"2%\"}}\r\n                                />\r\n                                <Form.Control\r\n                                  as = \"select\"\r\n                                  name = \"time\"\r\n                                  value = {sst.carsScheduled[car.carId] !== undefined ?\r\n                                            sst.carsScheduled[car.carId].time.units\r\n                                            :\r\n                                            SSTModel.interval.time.units\r\n                                          }\r\n                                  onChange = {(e) => {\r\n                                    onChangeInterval(e, car.carId, \"units\");\r\n                                  }}\r\n                                >\r\n                                  <option value = \"none\" selected> Select </option>\r\n                                  {SSTModel.timeUnits.map((unit) => {\r\n                                    return (\r\n                                      <option value = {unit.value}> {unit.displayName} </option>\r\n                                    );\r\n                                  })}\r\n                                </Form.Control>\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </ListGroup.Item>\r\n                      </ListGroup>\r\n                    </Col>\r\n                  </Row>\r\n                );\r\n              })}\r\n            </div>\r\n          }\r\n      </Modal.Body>\r\n      {!toggleApply ?\r\n        <Modal.Footer>\r\n          <Button disabled = {isLoading} onClick = {() => {onSubmit()}}>\r\n            {isLoading ?\r\n              <Spinner animation = \"border\" size = \"sm\" status = \"role\"/>\r\n              :\r\n              <div></div>\r\n            }\r\n            Save\r\n          </Button>\r\n        </Modal.Footer>\r\n        :\r\n        <div></div>\r\n      }\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default SSTModal;\r\n",["161","162"],"C:\\Users\\domin\\autohub\\src\\models\\car.js",[],["163","164"],"C:\\Users\\domin\\autohub\\src\\controllers\\storage.js",[],"C:\\Users\\domin\\autohub\\src\\models\\scheduledServiceType.js",[],["165","166"],"C:\\Users\\domin\\autohub\\src\\components\\AppNavbar.js",["167","168","169"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\nfunction AppNavbar() {\r\n  return (\r\n    <Navbar fluid style = {{backgroundColor: \"#A9CCE3\"}}>\r\n      <Navbar.Brand href = \"/\">\r\n        <Row>\r\n          <Col>\r\n            <h4> AutoHub </h4>\r\n          </Col>\r\n        </Row>\r\n      </Navbar.Brand>\r\n      <Nav className = \"mr-auto\">\r\n      </Nav>\r\n      <Nav className = \"justify-content-end\">\r\n        <OverlayTrigger\r\n          key = \"scheduled-service-types\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"scheduled-service-type\">\r\n              Scheduled Service Types\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}\r\n            onClick = {() => {\r\n              window.location.pathname = \"/scheduledServiceTypes\";\r\n            }}\r\n          >\r\n            🛎️\r\n          </Button>\r\n        </OverlayTrigger>\r\n        <OverlayTrigger\r\n          key = \"messages\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"message\">\r\n              Messages\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}>\r\n            ✉️\r\n          </Button>\r\n        </OverlayTrigger>\r\n        <OverlayTrigger\r\n          key = \"profile\"\r\n          placement = \"bottom\"\r\n          overlay = {\r\n            <Tooltip id = \"my-profile\">\r\n              Profile\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant = \"light\" style = {{backgroundColor: \"#A9CCE3\", margin: \"1%\", float: \"right\"}}>\r\n            👤\r\n          </Button>\r\n        </OverlayTrigger>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default AppNavbar;\r\n","C:\\Users\\domin\\autohub\\src\\controllers\\genericFunctions.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\auth.js",[],"C:\\Users\\domin\\autohub\\src\\controllers\\db.js",[],"C:\\Users\\domin\\autohub\\src\\App.js",["170","171","172"],"C:\\Users\\domin\\autohub\\src\\components\\CarModal.js",["173","174"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst DB = require('../controllers/db.js');\r\nconst LOGMODEL = require('../models/serviceLog.js');\r\nconst STORAGE = require('../controllers/storage.js');\r\nconst CARMODEL = require('../models/car.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\n\r\nfunction CarModal(props) {\r\n\r\n  const[isLoading, setIsLoading] = useState(false); //flag to toggle spinner\r\n  const[showCarModal, setShowCarModal] = useState(false); //flag to display car modal\r\n  const[car, setNewCar] = useState(); //state object for creating a new car\r\n  const[carImage, setCarImage] = useState(); //temp holder for car image upload\r\n  const[carModalFormValidated, setCarModalFormValidated] = useState(false); //flag to toggle form validation of the car modal\r\n  const[title, setTitle] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewCar(props.car);\r\n    setShowCarModal(props.show);\r\n    setTitle(props.title);\r\n  }, [props.show, props.title, props.car])\r\n\r\n  //adds a car to the cars db collectionName\r\n  function saveCar() {\r\n    if(props.userInfo === undefined) {\r\n      //TODO: handle this error more elegantly\r\n      alert(\"User data undefined. Cannot add new car\");\r\n      setCarModalFormValidated(false);\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    var userCreated = props.userInfo.email;\r\n    var isNew = false;\r\n    if(car.carId.trim().length === 0) {\r\n      car.carId = GENERICFUNCTIONS.generateId();\r\n      isNew = true;\r\n    }\r\n    car.userCreated = userCreated;\r\n    if(carImage !== undefined) {\r\n      var extension = carImage.name.split('.').pop();\r\n      var imageId = GENERICFUNCTIONS.generateId();\r\n      var fileType = carImage.type;\r\n      var prevImageUrl = \"\";\r\n      if(car.imageUrl.trim().length !== 0) {\r\n        prevImageUrl = car.imageUrl;\r\n      }\r\n      car.imageId = imageId;\r\n      var renamedFile = new File([carImage], imageId + \".\" + extension, {\r\n        type: fileType\r\n      });\r\n      STORAGE.uploadFile(renamedFile, \"images/\"+props.userInfo.uid+\"/\"+carImage.name, prevImageUrl,\r\n        function(url) {\r\n          car.imageUrl = url;\r\n          DB.writeOne(car.carId, car, \"cars\",\r\n            function() {\r\n              if(isNew) {\r\n                saveNewServiceLog(car.carId);\r\n              }\r\n              else {\r\n                handleCarModalClose();\r\n              }\r\n            },\r\n            function(error) {\r\n              //TODO: handle this error more elegantly\r\n              alert(error.toString());\r\n              setIsLoading(false);\r\n            }\r\n          );\r\n        }\r\n      );\r\n    }\r\n    else {\r\n      DB.writeOne(car.carId, car, \"cars\",\r\n        function() {\r\n          if(isNew) {\r\n            saveNewServiceLog(car.carId);\r\n          }\r\n          else {\r\n            handleCarModalClose();\r\n          }\r\n        },\r\n        function(error) {\r\n          //TODO: handle this error more elegantly\r\n          alert(error.toString());\r\n          setIsLoading(false);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  function saveNewServiceLog(carId) {\r\n    var serviceLog = JSON.parse(JSON.stringify(LOGMODEL.serviceLog));\r\n    serviceLog.userCreated = props.userInfo.email;\r\n    serviceLog.logId = GENERICFUNCTIONS.generateId();\r\n    serviceLog.carReferenceId = carId;\r\n    DB.writeOne(serviceLog.logId, serviceLog, \"serviceLogs\",\r\n      function() {\r\n        handleCarModalClose();\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n        setIsLoading(false);\r\n      });\r\n  }\r\n\r\n  //function to handle car modal closing\r\n  function handleCarModalClose() {\r\n    setIsLoading(false);\r\n    props.setShow(false);\r\n    setNewCar(CARMODEL.car);\r\n    setCarImage();\r\n    setShowCarModal(false);\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //function to handle adding values to car\r\n  function onChangeNewCar(e, type) {\r\n    var carCopy = JSON.parse(JSON.stringify(car));\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    if(type === \"number\" && isNaN(value)) {\r\n      return;\r\n    }\r\n    carCopy[name] = value;\r\n    setNewCar(carCopy);\r\n    setCarModalFormValidated(false);\r\n  }\r\n\r\n  //handle submit for car modal form\r\n  function handleCarModalSubmit(e) {\r\n    setCarModalFormValidated(true);\r\n    if(checkNewCarFields() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n    else {\r\n      saveCar();\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  //check if required fields have been filled\r\n  function checkNewCarFields() {\r\n    var isValid = true;\r\n    for(var i = 0; i < CARMODEL.publicFields.length; i++) {\r\n      var field = CARMODEL.publicFields[i];\r\n      if(field.required && car[field.value].toString().trim().length === 0) {\r\n        car[field.value] = \"\";\r\n        isValid = false;\r\n      }\r\n      if(field.type === \"number\") {\r\n        car[field.value] = Number(car[field.value].toString().trim());\r\n      }\r\n      else {\r\n        car[field.value] = car[field.value].trim();\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  if(car === undefined) {\r\n    return <div></div>;\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show = {showCarModal}\r\n      onHide = {handleCarModalClose}\r\n      backdrop = \"static\"\r\n      keyboard = {false}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title> {title} </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form noValidate validated = {carModalFormValidated} onSubmit = {handleCarModalSubmit}>\r\n          <Row style = {{marginLeft: \"3%\", marginRight: \"3%\"}}>\r\n            {CARMODEL.publicFields.map((field) => {\r\n              if(field.inputType === \"input\") {\r\n                return (\r\n                    <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                      <Form.Label> {field.displayName} </Form.Label>\r\n                      <Form.Control\r\n                        required = {field.required}\r\n                        as = {field.inputType}\r\n                        name = {field.value}\r\n                        value = {car[field.value]}\r\n                        onChange = {(e) => {\r\n                          onChangeNewCar(e, field.type);\r\n                        }}\r\n                      />\r\n                      <Form.Control.Feedback type = \"invalid\">\r\n                        Required\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                );\r\n              }\r\n              else if(field.inputType === \"select\") {\r\n                console.log(car);\r\n                return (\r\n                    <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                      <Form.Label> {field.displayName} </Form.Label>\r\n                      <Form.Control\r\n                        required = {field.required}\r\n                        as = {field.inputType}\r\n                        name = {field.value}\r\n                        onChange = {(e) => {\r\n                          onChangeNewCar(e, field.type);\r\n                        }}\r\n                      >\r\n                        {car.year.trim().length === 0 ?\r\n                          <option value = \"\" selected disabled hidden> Select </option>\r\n                          :\r\n                          <div></div>\r\n                        }\r\n                        {field.modalSelectData.map((data) => {\r\n                          if(data === Number(car.year)) {\r\n                            return (\r\n                              <option value = {data} selected> {data} </option>\r\n                            )\r\n                          }\r\n                          return (\r\n                            <option value = {data}> {data} </option>\r\n                          );\r\n                        })}\r\n                      </Form.Control>\r\n                      <Form.Control.Feedback type = \"invalid\">\r\n                        Required\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                );\r\n              }\r\n              else {\r\n                return (\r\n                    <Col md = {field.modalColSpan} style = {{marginBottom: \"1%\"}}>\r\n                      <Form.Label> {field.displayName} </Form.Label>\r\n                      <Form.Control\r\n                        required = {field.required}\r\n                        as = {field.inputType}\r\n                        name = {field.value}\r\n                        value = {car[field.value]}\r\n                        onChange = {(e) => {\r\n                          onChangeNewCar(e, field.type);\r\n                        }}\r\n                      />\r\n                    </Col>\r\n                );\r\n              }\r\n            })}\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form>\r\n                <Form.Group>\r\n                  <Form.Label> Image </Form.Label>\r\n                  <Form.File\r\n                    id = \"image\"\r\n                    onChange = {(e) => {\r\n                      var carCopy = JSON.parse(JSON.stringify(car));\r\n                      var file = e.target.files[0];\r\n                      if(file) {\r\n                        setCarImage(file);\r\n                        setNewCar(carCopy);\r\n                      }\r\n                      else {\r\n                        setCarImage();\r\n                        carCopy.imageId = \"\";\r\n                        setNewCar(carCopy);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Form.Group>\r\n              </Form>\r\n            </Col>\r\n            <Col>\r\n              <Button type = \"submit\" variant = \"success\" disabled = {isLoading} style = {{float: \"right\", marginTop: \"10%\"}}>\r\n                {isLoading ?\r\n                  <Spinner animation = \"border\" size = \"sm\" status = \"role\"/>\r\n                  :\r\n                  <div></div>\r\n                }\r\n                Save\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CarModal;\r\n","C:\\Users\\domin\\autohub\\src\\models\\scheduledService.js",[],"C:\\Users\\domin\\autohub\\src\\components\\ScheduledLog.js",["175","176","177","178","179","180","181","182","183","184","185","186","187","188"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Table from 'react-bootstrap/Table';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport DatePicker from \"react-datepicker\";\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\nimport SSTModal from './SSTModal.js';\r\nimport LogFilters from './LogFilters.js';\r\n\r\nconst SSMODEL = require('../models/scheduledService.js');\r\nconst LOGMODEL = require('../models/logOptions.js');\r\nconst GENERICFUNCTIONS = require('../controllers/genericFunctions.js');\r\nconst DB = require('../controllers/db.js');\r\nconst SSTModel = require('../models/scheduledServiceType.js');\r\n\r\nfunction ScheduledLog(props) {\r\n\r\n  const[services, setServices] = useState([]);\r\n  const[isSaved, setIsSaved] = useState(true);\r\n  const[cars, setCars] = useState();\r\n  const[show, setShow] = useState(false);\r\n  const[filtered, setFiltered] = useState([]);\r\n  const[isFiltering, setIsFiltering] = useState(false);\r\n  const[sortToggleValue, setSortToggleValue] = useState(\"\");\r\n  const[sortValue, setSortValue] = useState(\"\");\r\n  const[toggleNotes, setToggleNotes] = useState(\"\");\r\n  const[currMileageId, setCurrMileageId] = useState({serviceId: \"\", mileage: -1});\r\n\r\n  useEffect(() => {\r\n    getCars();\r\n    if(props.serviceLog !== undefined) {\r\n      setServices(props.serviceLog.scheduledLog);\r\n    }\r\n  }, [props.userInfo, props.serviceLog])\r\n\r\n  function addRow() {\r\n    var newRow = JSON.parse(JSON.stringify(SSMODEL.scheduledService));\r\n    var arr = services.slice();\r\n    newRow.serviceId = GENERICFUNCTIONS.generateId();\r\n    newRow.userCreated = props.userInfo.email;\r\n    newRow.datePerformed = new Date().toLocaleDateString();\r\n    newRow.mileage = props.car.mileage;\r\n    arr.push(newRow);\r\n    setServices(arr);\r\n    setIsSaved(false);\r\n  }\r\n\r\n  function deleteRow(index) {\r\n    var arr = services.slice();\r\n    arr.splice(index, 1);\r\n    setServices(arr);\r\n    setIsSaved(false);\r\n  }\r\n\r\n  function onChangeCol(e, index, type) {\r\n    var arr = services.slice();\r\n    var copy = arr[index];\r\n    var name = [e.target.name][0];\r\n    var value = e.target.value;\r\n    if(type === \"number\" && isNaN(value)) {\r\n      return;\r\n    }\r\n    if(name === \"serviceName\") {\r\n      if(value.length === 0) {\r\n        copy.sstRefId = value;\r\n        copy.serviceName = \"\";\r\n      }\r\n      else {\r\n        for(var i = 0; i < props.ssts.length; i++) {\r\n          if(props.ssts[i].typeId === value) {\r\n            copy.sstRefId = value;\r\n            copy.serviceName = props.ssts[i].serviceName;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      copy[name] = value;\r\n      if(name === \"mileage\" && copy.serviceId === currMileageId.serviceId) {\r\n        setCurrMileageId({serviceId: currMileageId.serviceId, mileage: value});\r\n      }\r\n    }\r\n    //copy[name] = value;\r\n    arr[index] = copy;\r\n    setServices(arr);\r\n    setIsSaved(false);\r\n  }\r\n\r\n  function onChangeDate(date, index) {\r\n    var arr = services.slice();\r\n    //var copy = JSON.parse(JSON.stringify(arr[index]));\r\n    var copy = arr[index];\r\n    copy.datePerformed = date.toLocaleDateString();\r\n    arr[index] = copy;\r\n    setServices(arr);\r\n    setIsSaved(false);\r\n  }\r\n\r\n  //gets all of the user's cars from db & sets a listener on the car collection with documents matching the user's email\r\n  function getCars() {\r\n    if(props.userInfo === undefined) {\r\n      return;\r\n    }\r\n    DB.getQuerey(\"userCreated\", props.userInfo.email, \"cars\").onSnapshot(quereySnapshot => {\r\n      var cars = [];\r\n      for(var i = 0; i < quereySnapshot.docs.length; i++) {\r\n        cars.push(quereySnapshot.docs[i].data());\r\n      }\r\n      setCars(cars);\r\n    });\r\n  }\r\n\r\n  function saveServiceLog() {\r\n    var copy = services.slice();\r\n    for(var i = 0; i < copy.length; i++) {\r\n      if(copy[i].datePerformed === null || copy[i].datePerformed === undefined) {\r\n        copy[i].datePerformed = new Date().toLocaleDateString();\r\n      }\r\n      copy[i] = GENERICFUNCTIONS.trimInputs(copy[i]);\r\n      //copy[i].datePerformed = copy[i].datePerformed.toLocaleDateString();\r\n    }\r\n    var serviceLog = JSON.parse(JSON.stringify(props.serviceLog));\r\n    var car = JSON.parse(JSON.stringify(props.car));\r\n    car.scheduledCost = calculateScheduledLogCost(copy);\r\n    serviceLog.scheduledLog = copy;\r\n    DB.writeOne(props.serviceLog.logId, serviceLog, \"serviceLogs\",\r\n      function() {\r\n        if(currMileageId.serviceId.trim().length !== 0) {\r\n          if(currMileageId.mileage.toString().trim().length === 0) {\r\n            car.mileage = 0;\r\n          }\r\n          else {\r\n            car.mileage = Number(currMileageId.mileage.toString().trim());\r\n          }\r\n        }\r\n        DB.writeOne(car.carId, car, \"cars\",\r\n          function() {\r\n            return;\r\n          },\r\n          function(error) {\r\n            alert(error);\r\n          }\r\n        );\r\n        setIsSaved(true);\r\n        setCurrMileageId({serviceId: \"\", mileage: -1})\r\n      },\r\n      function(error) {\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  function calculateScheduledLogCost(serviceLog) {\r\n    var costs = {laborCost: 0, partsCost: 0};\r\n    for(var i = 0; i < services.length; i++) {\r\n      costs.laborCost += Number(services[i].laborCost);\r\n      costs.partsCost += Number(services[i].partsCost);\r\n    }\r\n    console.log(costs);\r\n    return costs;\r\n  }\r\n\r\n  function getNextServiceMileage(sstId, serviceIndex) {\r\n    for(var i = 0; i < props.ssts.length; i++) {\r\n      if(props.ssts[i].typeId === sstId) {\r\n        if(props.ssts[i].carsScheduled[props.carId] === undefined) {\r\n          props.ssts[i].carsScheduled[props.carId] = SSTModel.interval;\r\n        }\r\n        if(Object.keys(props.ssts[i].carsScheduled).length !== 0 && Number(props.ssts[i].carsScheduled[props.carId].miles) !== 0) {\r\n          if(Number(services[serviceIndex].mileage) === 0) {\r\n            return (Number(props.ssts[i].carsScheduled[props.carId].miles) + Number(props.car.mileage));\r\n          }\r\n          return (Number(props.ssts[i].carsScheduled[props.carId].miles) + Number(services[serviceIndex].mileage));\r\n        }\r\n      }\r\n    }\r\n    return \"None\";\r\n  }\r\n\r\n  function getNextServiceDate(sstId, serviceIndex) {\r\n    for(var i = 0; i < props.ssts.length; i++) {\r\n      if(props.ssts[i].typeId === sstId) {\r\n        if(props.ssts[i].carsScheduled[props.carId] === undefined) {\r\n          props.ssts[i].carsScheduled[props.carId] = SSTModel.interval;\r\n        }\r\n        if(Object.keys(props.ssts[i].carsScheduled).length !== 0 && Number(props.ssts[i].carsScheduled[props.carId].time.quantity !== 0)) {\r\n          var dateObj = new Date(services[serviceIndex].datePerformed);\r\n          var timeUnits = props.ssts[i].carsScheduled[props.carId].time.units;\r\n          var timeStep = Number(props.ssts[i].carsScheduled[props.carId].time.quantity);\r\n          return GENERICFUNCTIONS.incrementDate(dateObj,timeUnits, timeStep).toLocaleDateString();\r\n        }\r\n      }\r\n    }\r\n    return \"None\";\r\n  }\r\n\r\n  //filters the services into another array based on the selected filters\r\n  //passed as props to LogFilters.js (the intended user of this function)\r\n  /*\r\n    filterNames - array of filters to apply (expecting \"date\", \"mileage\", and or \"serviceName\")\r\n    filterValues - JSON object of filter values (ex: {startDate: \"12/26/20\", endDate: \"12/28/20\"} )\r\n  */\r\n  function applyFilters(filterNames, filteredValues) {\r\n    var filtered = services.slice();\r\n    for(var i = 0; i < filterNames.length; i++) {\r\n      var filter = filterNames[i];\r\n      var option = LOGMODEL.filterOptions[filter];\r\n      var isValid = true;\r\n      //if option is range, then check if filter values for the range filter have been satisfied\r\n      //if values have been satisfied, then apply the filter\r\n      //if values have not been satisfied, then do not apply the filter\r\n      if(option !== undefined && option.filterType === \"range\") {\r\n        if(filteredValues[option.rangeOptions[0].name] === LOGMODEL.filterValues[option.rangeOptions[0].name] || filteredValues[option.rangeOptions[1].name] === LOGMODEL.filterValues[option.rangeOptions[1].name]) {\r\n          isValid = false;\r\n        }\r\n        if(isValid) {\r\n          if(filter === \"date\") {\r\n            filtered = filtered.filter(service =>\r\n              new Date(filteredValues[option.rangeOptions[0].name]).getTime() <= new Date(service.datePerformed).getTime() && new Date(service.datePerformed).getTime() <= new Date(filteredValues[option.rangeOptions[1].name]).getTime());\r\n          }\r\n          else {\r\n            filtered = filtered.filter(service =>\r\n              Number(filteredValues[option.rangeOptions[0].name]) <= Number(service[filter]) && Number(service[filter]) <= Number(filteredValues[option.rangeOptions[1].name]));\r\n          }\r\n        }\r\n      }\r\n      //same as above, except for compare filter values\r\n      else if(option !== undefined && option.filterType === \"compare\") {\r\n        if(filteredValues[filter] === undefined || filteredValues[filter].trim().length === 0) {\r\n          isValid = false;\r\n        }\r\n        if(isValid) {\r\n          filtered = filtered.filter(service => filteredValues[filter] === service[filter]);\r\n        }\r\n      }\r\n      setFiltered(filtered);\r\n    }\r\n  }\r\n\r\n  function isInFiltered(id) {\r\n    for(var i = 0; i < filtered.length; i++) {\r\n      if(id === filtered[i].serviceId) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function toggleFiltering(filters) {\r\n    setIsFiltering(filters.length !== 0);\r\n  }\r\n\r\n  function sortAscending(value) {\r\n    var copy = services.slice();\r\n    copy.sort(\r\n      function(serviceA, serviceB) {\r\n        if(value === \"date\") {\r\n          return new Date(serviceA.datePerformed).getTime() - new Date(serviceB.datePerformed).getTime();\r\n        }\r\n        else {\r\n          return Number(serviceA[value]) - Number(serviceB[value]);\r\n        }\r\n      }\r\n    );\r\n    setServices(copy);\r\n  }\r\n\r\n  function sortDescending(value) {\r\n    var copy = services.slice();\r\n    copy.sort(\r\n      function(serviceA, serviceB) {\r\n        if(value === \"date\") {\r\n          return new Date(serviceB.datePerformed).getTime() - new Date(serviceA.datePerformed).getTime();\r\n        }\r\n        else {\r\n          return Number(serviceB[value]) - Number(serviceA[value]);\r\n        }\r\n      }\r\n    );\r\n    setServices(copy);\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <SSTModal\r\n        userCreated = {props.userInfo.email}\r\n        cars = {cars !== undefined ? cars : []}\r\n        sst = {SSTModel.scheduledServiceType}\r\n        show = {show}\r\n        setShow = {setShow}\r\n        title = \"Add Scheduled Service Type\"\r\n      />\r\n      <Row>\r\n        <Col style = {{textAlign: \"center\"}}>\r\n          <h5>\r\n            {props.car.name + \" \"}\r\n            <Badge variant = \"secondary\"> {props.car.mileage + \" miles\"} </Badge>\r\n          </h5>\r\n        </Col>\r\n      </Row>\r\n      <br style = {{height: \"50%\"}} />\r\n      <Row>\r\n        <Col xs = {6}>\r\n          <DropdownButton variant = \"dark\" size = \"sm\" title = \"Filter By\">\r\n            <LogFilters\r\n              applyFilters = {applyFilters}\r\n              toggleFiltering = {toggleFiltering}\r\n            />\r\n          </DropdownButton>\r\n        </Col>\r\n        <Col xs = {6} style = {{textAlign: \"right\"}}>\r\n          <Button variant = \"dark\" size = \"sm\"\r\n            onClick = {() => {addRow()}}\r\n          >\r\n            Add Row\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <br style = {{height: \"50%\"}}/>\r\n      <Row>\r\n        <Col xs = {8}>\r\n          <InputGroup size = \"sm\">\r\n            <InputGroup.Prepend size = \"sm\">\r\n              <InputGroup.Text> Sort By </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <div style = {{marginRight: \"1%\"}}>\r\n              <Form.Control\r\n                as = \"select\"\r\n                size = \"sm\"\r\n                name = \"sortBy\"\r\n                value = {sortValue}\r\n                onChange = {(e) => {\r\n                  var value = e.target.value;\r\n                  setSortValue(value);\r\n                  if(value.trim().length !== 0 && sortToggleValue.trim().length !== 0) {\r\n                    if(sortToggleValue === \"ascending\") {\r\n                      sortAscending(value);\r\n                    }\r\n                    else if(sortToggleValue === \"descending\") {\r\n                      sortDescending(value);\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                <option value = \"\" selected> None </option>\r\n                {LOGMODEL.sortOptions.map((option) => {\r\n                  return (\r\n                    <option value = {option.value}> {option.displayName} </option>\r\n                  );\r\n                })}\r\n              </Form.Control>\r\n            </div>\r\n            <ButtonGroup toggle size = \"sm\"\r\n            >\r\n              <ToggleButton\r\n                variant = \"light\"\r\n                value = \"ascending\"\r\n                type = \"checkbox\"\r\n                name = \"checkbox\"\r\n                value = {sortToggleValue}\r\n                checked = {sortToggleValue === \"ascending\"}\r\n                onChange = {() => {\r\n                  if(sortToggleValue === \"ascending\") {\r\n                    setSortToggleValue(\"\");\r\n                  }\r\n                  else {\r\n                    setSortToggleValue(\"ascending\");\r\n                    if(sortValue.trim().length !== 0) {\r\n                      sortAscending(sortValue);\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                ⬆️\r\n              </ToggleButton>\r\n              <ToggleButton\r\n                variant = \"light\"\r\n                value = \"descending\"\r\n                type = \"checkbox\"\r\n                name = \"checkbox\"\r\n                value = {sortToggleValue}\r\n                checked = {sortToggleValue === \"descending\"}\r\n                onChange = {() => {\r\n                  if(sortToggleValue === \"descending\") {\r\n                    setSortToggleValue(\"\");\r\n                  }\r\n                  else {\r\n                    setSortToggleValue(\"descending\");\r\n                    if(sortValue.trim().length !== 0) {\r\n                      sortDescending(sortValue);\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                ⬇️\r\n              </ToggleButton>\r\n            </ButtonGroup>\r\n          </InputGroup>\r\n        </Col>\r\n        <Col xs = {4} style = {{textAlign: \"right\"}}>\r\n          <Button size = \"sm\" variant = \"success\" disabled = {isSaved}\r\n            onClick = {() => {\r\n              saveServiceLog();\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <br/>\r\n      <Table responsive>\r\n        <thead>\r\n          <tr>\r\n            <th style = {{minWidth: \"50px\"}}> # </th>\r\n            {SSMODEL.publicFields.map((field, index) => {\r\n              if(field.headerButtonValue.trim().length !== 0) {\r\n                return (\r\n                  <th style = {{minWidth: field.tableWidth}}>\r\n                    <Button size = \"sm\" variant = \"outline-dark\" style = {{marginRight: \"3%\"}}\r\n                      onClick = {() => {setShow(true)}}\r\n                    >\r\n                      {field.headerButtonValue}\r\n                    </Button>\r\n                    {field.displayName}\r\n                  </th>\r\n                );\r\n              }\r\n              return (\r\n                <th style = {{minWidth: field.tableWidth}}>\r\n                  {field.displayName}\r\n                </th>\r\n              );\r\n            })}\r\n          </tr>\r\n        </thead>\r\n        {!isFiltering ?\r\n          <tbody>\r\n            {services.map((service, index) => {\r\n              return (\r\n                <tr key = {service.serviceId}>\r\n                  <td style = {{minWidth: \"50px\"}}>\r\n                    <Button size = \"sm\" variant = \"outline-dark\"\r\n                      onClick = {() => {deleteRow(index)}}\r\n                    >\r\n                      🗑️\r\n                    </Button>\r\n                  </td>\r\n                  {SSMODEL.publicFields.map((field) => {\r\n                    if(field.inputType === \"input\") {\r\n                      if(field.value === \"mileage\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {services[index][field.value]}\r\n                              onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                              disabled = {field.disabled}\r\n                            />\r\n                            <Form.Check\r\n                              size = \"sm\"\r\n                              type = \"checkbox\"\r\n                              id = \"apply-mileage\"\r\n                              onChange = {() => {\r\n                                setIsSaved(false);\r\n                                if(service.serviceId === currMileageId.serviceId) {\r\n                                  setCurrMileageId({serviceId: \"\", mileage: -1});\r\n                                }\r\n                                else {\r\n                                  setCurrMileageId({serviceId: service.serviceId, mileage: service.mileage});\r\n                                }\r\n                              }}\r\n                              label = {<small> Use as current mileage </small>}\r\n                              checked = {service.serviceId === currMileageId.serviceId}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"nextServiceMileage\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {getNextServiceMileage(service.sstRefId, index)}\r\n                              disabled = {field.disabled}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"nextServiceDate\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {getNextServiceDate(service.sstRefId, index)}\r\n                              disabled = {field.disabled}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"datePerformed\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <DatePicker\r\n                              selected = {typeof(services[index].datePerformed) === \"string\" ? new Date(services[index].datePerformed) : services[index].datePerformed}\r\n                              onChange = {(date) => {onChangeDate(date, index)}}\r\n                              customInput = {<Form.Control as = \"input\" size = \"sm\"/>}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"notes\") {\r\n                        const popover = (\r\n                          <Popover id = {\"notes-popover\" + service.serviceId} style = {{height: \"100%\"}}>\r\n                            <Modal.Header closeButton style = {{backgroundColor: \"#F2F4F4\"}}>\r\n                              Notes\r\n                            </Modal.Header>\r\n                            <Popover.Content>\r\n                              Testing the popover component to display the notes for this service fjsdkfjsdklfjskdlfjsdklfjsdklfjskldfjslkdfjskldfjslkdfjskldfjkldsfjksldfjksldfjsdklfjskldfjsdfkjksldfjskdlfjsdklfjskdlfjdsklfdjslfjsdklfjsdlfjsdlkfjksldfjsdlfjskdlfjsldfjskdlfjsdklfjsdklfjsdklfjsdkljlkjfkdlsfjdkslfjslkdfjskldfjlskfjskldfjlsdjfljklfjdsklfjsdlkfjdlfjsdljfklj\r\n                            </Popover.Content>\r\n                          </Popover>\r\n                        );\r\n                        if(toggleNotes === service.serviceId) {\r\n                          return (\r\n                            <td style = {{minWidth: field.tableWidth}}>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = \"textarea\"\r\n                                name = {field.value}\r\n                                value = {services[index][field.value]}\r\n                                onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                                disabled = {field.disabled}\r\n                                style = {{height: \"150px\"}}\r\n                              />\r\n                              <Button variant = \"link\" size = \"sm\" style = {{float: \"right\"}}\r\n                                onClick = {() => {\r\n                                  setToggleNotes(\"\");\r\n                                }}\r\n                              >\r\n                                Done\r\n                              </Button>\r\n                            </td>\r\n                          );\r\n                        }\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {services[index][field.value]}\r\n                              onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                              disabled = {field.disabled}\r\n                              readOnly\r\n                            />\r\n                            <Button variant = \"link\" size = \"sm\" style = {{float: \"right\"}}\r\n                              onClick = {() => {\r\n                                setToggleNotes(service.serviceId);\r\n                              }}\r\n                            >\r\n                              Edit\r\n                            </Button>\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.containsPrepend) {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <InputGroup size = \"sm\">\r\n                              <InputGroup.Prepend>\r\n                                <InputGroup.Text> {field.prependValue} </InputGroup.Text>\r\n                              </InputGroup.Prepend>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = {field.inputType}\r\n                                name = {field.value}\r\n                                value = {services[index][field.value]}\r\n                                onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                                disabled = {field.disabled}\r\n                              />\r\n                            </InputGroup>\r\n                          </td>\r\n                        );\r\n                      }\r\n                      return (\r\n                        <td style = {{minWidth: field.tableWidth}}>\r\n                          <Form.Control\r\n                            size = \"sm\"\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {services[index][field.value]}\r\n                            onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                            disabled = {field.disabled}\r\n                          />\r\n                        </td>\r\n                      );\r\n                    }\r\n                    else if(field.inputType === \"select\") {\r\n                      return (\r\n                        <td style = {{minWidth: field.tableWidth}}>\r\n                          <Form.Control\r\n                            size = \"sm\"\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {services[index].sstRefId}\r\n                            onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                            disabled = {field.disabled}\r\n                          >\r\n                            <option value = \"\" selected> Select </option>\r\n                            {props.ssts.map((sst, sstIndex) => {\r\n                              var strIndex = sstIndex.toString();\r\n                              return (\r\n                                <option value = {sst.typeId}> {sst.serviceName} </option>\r\n                              );\r\n                            })}\r\n                          </Form.Control>\r\n                        </td>\r\n                      );\r\n                    }\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n          :\r\n          <tbody>\r\n            {services.map((service, index) => {\r\n              if(!isInFiltered(service.serviceId)) {\r\n                return null;\r\n              }\r\n              return (\r\n                <tr key = {service.serviceId}>\r\n                  <td style = {{minWidth: \"50px\"}}>\r\n                    <Button size = \"sm\" variant = \"outline-dark\"\r\n                      onClick = {() => {deleteRow(index)}}\r\n                    >\r\n                      🗑️\r\n                    </Button>\r\n                  </td>\r\n                  {SSMODEL.publicFields.map((field) => {\r\n                    if(field.inputType === \"input\") {\r\n                      if(field.value === \"nextServiceMileage\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {getNextServiceMileage(service.sstRefId, index)}\r\n                              disabled = {field.disabled}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"nextServiceDate\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <Form.Control\r\n                              size = \"sm\"\r\n                              as = {field.inputType}\r\n                              name = {field.value}\r\n                              value = {getNextServiceDate(service.sstRefId, index)}\r\n                              disabled = {field.disabled}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.value === \"datePerformed\") {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <DatePicker\r\n                              selected = {typeof(services[index].datePerformed) === \"string\" ? new Date(services[index].datePerformed) : services[index].datePerformed}\r\n                              onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                              customInput = {<Form.Control as = \"input\" size = \"sm\"/>}\r\n                            />\r\n                          </td>\r\n                        );\r\n                      }\r\n                      if(field.containsPrepend) {\r\n                        return (\r\n                          <td style = {{minWidth: field.tableWidth}}>\r\n                            <InputGroup size = \"sm\">\r\n                              <InputGroup.Prepend>\r\n                                <InputGroup.Text> {field.prependValue} </InputGroup.Text>\r\n                              </InputGroup.Prepend>\r\n                              <Form.Control\r\n                                size = \"sm\"\r\n                                as = {field.inputType}\r\n                                name = {field.value}\r\n                                value = {services[index][field.value]}\r\n                                onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                                disabled = {field.disabled}\r\n                              />\r\n                            </InputGroup>\r\n                          </td>\r\n                        );\r\n                      }\r\n                      return (\r\n                        <td style = {{minWidth: field.tableWidth}}>\r\n                          <Form.Control\r\n                            size = \"sm\"\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {services[index][field.value]}\r\n                            onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                            disabled = {field.disabled}\r\n                          />\r\n                        </td>\r\n                      );\r\n                    }\r\n                    else if(field.inputType === \"select\") {\r\n                      return (\r\n                        <td style = {{minWidth: field.tableWidth}}>\r\n                          <Form.Control\r\n                            size = \"sm\"\r\n                            as = {field.inputType}\r\n                            name = {field.value}\r\n                            value = {services[index].sstRefId}\r\n                            onChange = {(e) => {onChangeCol(e, index, field.type)}}\r\n                            disabled = {field.disabled}\r\n                          >\r\n                            <option value = \"\" selected> Select </option>\r\n                            {props.ssts.map((sst, sstIndex) => {\r\n                              var strIndex = sstIndex.toString();\r\n                              return (\r\n                                <option value = {sst.typeId}> {sst.serviceName} </option>\r\n                              );\r\n                            })}\r\n                          </Form.Control>\r\n                        </td>\r\n                      );\r\n                    }\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        }\r\n      </Table>\r\n      {services.length === 0 ?\r\n        <div>\r\n          <Row>\r\n            <Col>\r\n              <br/>\r\n              <br/>\r\n              <br/>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col style = {{textAlign: \"center\"}}>\r\n              <h4> No Scheduled Services have been logged 👨‍🔧 </h4>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        :\r\n        <div></div>\r\n      }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ScheduledLog;\r\n","C:\\Users\\domin\\autohub\\src\\models\\logOptions.js",[],"C:\\Users\\domin\\autohub\\src\\components\\RepairLog.js",["189","190","191","192","193","194","195","196","197","198","199","200","201"],"C:\\Users\\domin\\autohub\\src\\models\\repairService.js",[],"C:\\Users\\domin\\autohub\\src\\models\\serviceLog.js",[],"C:\\Users\\domin\\autohub\\src\\components\\LogFilters.js",["202","203","204","205","206","207","208","209"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport DatePicker from \"react-datepicker\";\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst LOGMODEL = require('../models/logOptions.js');\r\n\r\nfunction LogFilters(props) {\r\n\r\n  const[selectedFilters, setSelectedFilters] = useState([]);\r\n  const[filterValues, setFilterValues] = useState(LOGMODEL.filterValues);\r\n\r\n  const[startDate, setStartDate] = useState(null);\r\n  const[endDate, setEndDate] = useState(null);\r\n\r\n  const[startMileage, setStartMileage] = useState(0);\r\n  const[endMileage, setEndMileage] = useState(0);\r\n\r\n  const[serviceName, setServiceName] = useState(\"\");\r\n  const[names, setNames] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(props.serviceNames !== undefined) {\r\n      setNames(props.serviceNames);\r\n    }\r\n  }, [props.serviceNames]);\r\n\r\n  function isInDateRange(date) {\r\n    if(startDate === null || startDate === undefined || endDate === null || endDate === undefined) {\r\n      return false;\r\n    }\r\n    var time = date.getTime();\r\n    if(startDate.getTime() <= time && time <= endDate.getTime()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function isInMileageRange(mileage) {\r\n    if(startMileage === undefined || endMileage === undefined) {\r\n      return false;\r\n    }\r\n    if(startMileage <= mileage && mileage <= endMileage) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function isSameServiceName(name) {\r\n    if(name.trim() === serviceName.trim()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //TODO: make this dynamic based off the model\r\n  function renderFilterOptions() {\r\n    return (\r\n      <Row>\r\n        <Col>\r\n          <Row style = {{marginBottom: \"2%\"}}>\r\n            <Col style = {{textAlign: \"left\"}}>\r\n              <div> <strong> Date </strong> </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm = {6}>\r\n              <DatePicker\r\n                placeholderText = \"Start\"\r\n                selected = {typeof(filterValues.startDate) === \"string\" ? new Date(filterValues.startDate) : filterValues.startDate}\r\n                onChange = {(date) => {\r\n                  var values = JSON.parse(JSON.stringify(filterValues));\r\n                  var filters = selectedFilters.slice();\r\n                  values.startDate = date;\r\n                  setFilterValues(values);\r\n                  if(values.startDate === null && values.endDate === null) {\r\n                    if(filters.includes(\"date\")) {\r\n                      filters.splice(filters.indexOf(\"date\"), 1);\r\n                    }\r\n                  }\r\n                  else if(!filters.includes(\"date\")) {\r\n                    filters.push(\"date\");\r\n                  }\r\n                  setSelectedFilters(filters);\r\n                }}\r\n                customInput = {\r\n                  <Form.Control\r\n                    as = \"input\"\r\n                    size = \"sm\"\r\n                  />\r\n                }\r\n              />\r\n            </Col>\r\n            <Col sm = {6}>\r\n              <DatePicker\r\n                placeholderText = \"End\"\r\n                selected = {typeof(filterValues.endDate) === \"string\" ? new Date(filterValues.endDate) : filterValues.endDate}\r\n                onChange = {(date) => {\r\n                  var values = JSON.parse(JSON.stringify(filterValues));\r\n                  var filters = selectedFilters.slice();\r\n                  values.endDate = date;\r\n                  setFilterValues(values);\r\n                  if(values.startDate === null && values.endDate === null) {\r\n                    if(filters.includes(\"date\")) {\r\n                      filters.splice(filters.indexOf(\"date\"), 1);\r\n                    }\r\n                  }\r\n                  else if(!filters.includes(\"date\")) {\r\n                    filters.push(\"date\");\r\n                  }\r\n                  setSelectedFilters(filters);\r\n                }}\r\n                customInput = {\r\n                  <Form.Control\r\n                    as = \"input\"\r\n                    size = \"sm\"\r\n                  />\r\n                }\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <br style = {{height: \"50%\"}} />\r\n          <Row style = {{marginBottom: \"2%\"}}>\r\n            <Col style = {{textAlign: \"left\"}}>\r\n              <div> <strong> Mileage </strong> </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm = {6}>\r\n              <Form.Control\r\n                placeholder = \"Start\"\r\n                as = \"input\"\r\n                size = \"sm\"\r\n                value = {filterValues.startMileage}\r\n                onChange = {(e) => {\r\n                  if(!isNaN(e.target.value)) {\r\n                    var values = JSON.parse(JSON.stringify(filterValues));\r\n                    var filters = selectedFilters.slice();\r\n                    values.startMileage = e.target.value;\r\n                    setFilterValues(values);\r\n                    if(values.startMileage.trim().length === 0 && values.endMileage.trim().length === 0) {\r\n                      if(filters.includes(\"mileage\")) {\r\n                        filters.splice(filters.indexOf(\"mileage\"), 1);\r\n                      }\r\n                    }\r\n                    else if(!filters.includes(\"mileage\")) {\r\n                      filters.push(\"mileage\");\r\n                    }\r\n                    setSelectedFilters(filters);\r\n                  }\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col sm = {6}>\r\n              <Form.Control\r\n                placeholder = \"End\"\r\n                as = \"input\"\r\n                size = \"sm\"\r\n                value = {filterValues.endMileage}\r\n                onChange = {(e) => {\r\n                  if(!isNaN(e.target.value)) {\r\n                    var values = JSON.parse(JSON.stringify(filterValues));\r\n                    var filters = selectedFilters.slice();\r\n                    values.endMileage = e.target.value;\r\n                    setFilterValues(values);\r\n                    if(values.startMileage.trim().length === 0 && values.endMileage.trim().length === 0) {\r\n                      if(filters.includes(\"mileage\")) {\r\n                        filters.splice(filters.indexOf(\"mileage\"), 1);\r\n                      }\r\n                    }\r\n                    else if(!filters.includes(\"mileage\")) {\r\n                      filters.push(\"mileage\");\r\n                    }\r\n                    setSelectedFilters(filters);\r\n                  }\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <br style = {{height: \"50%\"}} />\r\n          <Row>\r\n            <Col>\r\n            <Row style = {{marginBottom: \"2%\"}}>\r\n              <Col style = {{textAlign: \"left\"}}>\r\n                <div> <strong> Service Name </strong> </div>\r\n              </Col>\r\n            </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Control\r\n                    placeholder = \"e.g. Oil Change\"\r\n                    as = \"input\"\r\n                    size = \"sm\"\r\n                    name = \"serviceName\"\r\n                    value = {filterValues.serviceName}\r\n                    onChange = {(e) => {\r\n                      var values = JSON.parse(JSON.stringify(filterValues));\r\n                      var filters = selectedFilters.slice();\r\n                      values.serviceName = e.target.value;\r\n                      setFilterValues(values);\r\n                      if(values.serviceName.trim().length === 0) {\r\n                        if(filters.includes(\"serviceName\")) {\r\n                          filters.splice(filters.indexOf(\"serviceName\"), 1);\r\n                        }\r\n                      }\r\n                      else if(!filters.includes(\"serviceName\")) {\r\n                        filters.push(\"serviceName\");\r\n                      }\r\n                      setSelectedFilters(filters);\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <br style = {{height: \"50%\"}} />\r\n              <Row>\r\n                <Col>\r\n                  {names.map((name) => {\r\n                    return (\r\n                      <ListGroup flush>\r\n                        <ListGroup.Item> {name} </ListGroup.Item>\r\n                      </ListGroup>\r\n                    );\r\n                  })}\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col style = {{textAlign: \"right\"}}>\r\n              <Button variant = \"success\" size = \"sm\"\r\n                onClick = {() => {\r\n                  props.applyFilters(selectedFilters, filterValues);\r\n                  props.toggleFiltering(selectedFilters);\r\n                }}\r\n              >\r\n                Apply\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style = {{margin: \"2%\"}}>\r\n      <Row>\r\n        <Col>\r\n          {renderFilterOptions()}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LogFilters;\r\n",{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":12},{"ruleId":"214","severity":1,"message":"218","line":11,"column":8,"nodeType":"216","messageId":"217","endLine":11,"endColumn":22},{"ruleId":"214","severity":1,"message":"219","line":12,"column":8,"nodeType":"216","messageId":"217","endLine":12,"endColumn":16},{"ruleId":"214","severity":1,"message":"220","line":13,"column":8,"nodeType":"216","messageId":"217","endLine":13,"endColumn":13},{"ruleId":"214","severity":1,"message":"221","line":17,"column":8,"nodeType":"216","messageId":"217","endLine":17,"endColumn":14},{"ruleId":"214","severity":1,"message":"222","line":19,"column":16,"nodeType":"216","messageId":"217","endLine":19,"endColumn":22},{"ruleId":"214","severity":1,"message":"223","line":25,"column":7,"nodeType":"216","messageId":"217","endLine":25,"endColumn":14},{"ruleId":"214","severity":1,"message":"224","line":26,"column":7,"nodeType":"216","messageId":"217","endLine":26,"endColumn":23},{"ruleId":"225","severity":1,"message":"226","line":36,"column":6,"nodeType":"227","endLine":36,"endColumn":22,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":120,"column":21,"nodeType":"216","messageId":"231","endLine":120,"endColumn":26},{"ruleId":"232","severity":1,"message":"233","line":128,"column":65,"nodeType":"234","messageId":"235","endLine":128,"endColumn":66},{"ruleId":"232","severity":1,"message":"233","line":147,"column":53,"nodeType":"234","messageId":"235","endLine":147,"endColumn":54},{"ruleId":"236","severity":1,"message":"237","line":165,"column":21,"nodeType":"238","endLine":169,"endColumn":22},{"ruleId":"232","severity":1,"message":"233","line":167,"column":63,"nodeType":"234","messageId":"235","endLine":167,"endColumn":64},{"ruleId":"232","severity":1,"message":"233","line":184,"column":51,"nodeType":"234","messageId":"235","endLine":184,"endColumn":52},{"ruleId":"214","severity":1,"message":"215","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":12},{"ruleId":"214","severity":1,"message":"218","line":11,"column":8,"nodeType":"216","messageId":"217","endLine":11,"endColumn":22},{"ruleId":"214","severity":1,"message":"219","line":12,"column":8,"nodeType":"216","messageId":"217","endLine":12,"endColumn":16},{"ruleId":"214","severity":1,"message":"220","line":13,"column":8,"nodeType":"216","messageId":"217","endLine":13,"endColumn":13},{"ruleId":"214","severity":1,"message":"222","line":18,"column":16,"nodeType":"216","messageId":"217","endLine":18,"endColumn":22},{"ruleId":"214","severity":1,"message":"223","line":23,"column":7,"nodeType":"216","messageId":"217","endLine":23,"endColumn":14},{"ruleId":"214","severity":1,"message":"224","line":25,"column":7,"nodeType":"216","messageId":"217","endLine":25,"endColumn":23},{"ruleId":"225","severity":1,"message":"226","line":35,"column":6,"nodeType":"227","endLine":35,"endColumn":22,"suggestions":"239"},{"ruleId":"229","severity":1,"message":"230","line":113,"column":21,"nodeType":"216","messageId":"231","endLine":113,"endColumn":26},{"ruleId":"232","severity":1,"message":"233","line":121,"column":65,"nodeType":"234","messageId":"235","endLine":121,"endColumn":66},{"ruleId":"232","severity":1,"message":"233","line":140,"column":53,"nodeType":"234","messageId":"235","endLine":140,"endColumn":54},{"ruleId":"236","severity":1,"message":"237","line":158,"column":21,"nodeType":"238","endLine":162,"endColumn":22},{"ruleId":"232","severity":1,"message":"233","line":160,"column":63,"nodeType":"234","messageId":"235","endLine":160,"endColumn":64},{"ruleId":"232","severity":1,"message":"233","line":177,"column":51,"nodeType":"234","messageId":"235","endLine":177,"endColumn":52},{"ruleId":"210","replacedBy":"240"},{"ruleId":"212","replacedBy":"241"},{"ruleId":"225","severity":1,"message":"242","line":39,"column":6,"nodeType":"227","endLine":39,"endColumn":48,"suggestions":"243"},{"ruleId":"214","severity":1,"message":"244","line":75,"column":13,"nodeType":"216","messageId":"217","endLine":75,"endColumn":16},{"ruleId":"210","replacedBy":"245"},{"ruleId":"212","replacedBy":"246"},{"ruleId":"225","severity":1,"message":"247","line":33,"column":6,"nodeType":"227","endLine":33,"endColumn":22,"suggestions":"248"},{"ruleId":"214","severity":1,"message":"249","line":1,"column":27,"nodeType":"216","messageId":"217","endLine":1,"endColumn":36},{"ruleId":"214","severity":1,"message":"250","line":11,"column":7,"nodeType":"216","messageId":"217","endLine":11,"endColumn":11},{"ruleId":"214","severity":1,"message":"251","line":15,"column":22,"nodeType":"216","messageId":"217","endLine":15,"endColumn":39},{"ruleId":"210","replacedBy":"252"},{"ruleId":"212","replacedBy":"253"},{"ruleId":"214","severity":1,"message":"254","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":17},{"ruleId":"214","severity":1,"message":"244","line":42,"column":9,"nodeType":"216","messageId":"217","endLine":42,"endColumn":12},{"ruleId":"214","severity":1,"message":"244","line":115,"column":9,"nodeType":"216","messageId":"217","endLine":115,"endColumn":12},{"ruleId":"214","severity":1,"message":"244","line":125,"column":9,"nodeType":"216","messageId":"217","endLine":125,"endColumn":12},{"ruleId":"210","replacedBy":"255"},{"ruleId":"212","replacedBy":"256"},{"ruleId":"210","replacedBy":"257"},{"ruleId":"212","replacedBy":"258"},{"ruleId":"210","replacedBy":"259"},{"ruleId":"212","replacedBy":"260"},{"ruleId":"214","severity":1,"message":"261","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":25},{"ruleId":"214","severity":1,"message":"249","line":1,"column":27,"nodeType":"216","messageId":"217","endLine":1,"endColumn":36},{"ruleId":"214","severity":1,"message":"262","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":13},{"ruleId":"214","severity":1,"message":"263","line":7,"column":8,"nodeType":"216","messageId":"217","endLine":7,"endColumn":11},{"ruleId":"214","severity":1,"message":"264","line":8,"column":8,"nodeType":"216","messageId":"217","endLine":8,"endColumn":11},{"ruleId":"214","severity":1,"message":"265","line":19,"column":7,"nodeType":"216","messageId":"217","endLine":19,"endColumn":23},{"ruleId":"214","severity":1,"message":"254","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":17},{"ruleId":"214","severity":1,"message":"222","line":9,"column":16,"nodeType":"216","messageId":"217","endLine":9,"endColumn":22},{"ruleId":"214","severity":1,"message":"219","line":12,"column":8,"nodeType":"216","messageId":"217","endLine":12,"endColumn":16},{"ruleId":"214","severity":1,"message":"222","line":14,"column":16,"nodeType":"216","messageId":"217","endLine":14,"endColumn":22},{"ruleId":"214","severity":1,"message":"266","line":19,"column":8,"nodeType":"216","messageId":"217","endLine":19,"endColumn":22},{"ruleId":"225","severity":1,"message":"226","line":50,"column":6,"nodeType":"227","endLine":50,"endColumn":40,"suggestions":"267"},{"ruleId":"268","severity":1,"message":"269","line":235,"column":40,"nodeType":"270","messageId":"271","endLine":236,"endColumn":235},{"ruleId":"268","severity":1,"message":"272","line":239,"column":40,"nodeType":"270","messageId":"271","endLine":240,"endColumn":175},{"ruleId":"268","severity":1,"message":"273","line":250,"column":38,"nodeType":"270","messageId":"271","endLine":250,"endColumn":91},{"ruleId":"274","severity":1,"message":"275","line":377,"column":17,"nodeType":"276","endLine":377,"endColumn":42},{"ruleId":"274","severity":1,"message":"275","line":398,"column":17,"nodeType":"276","endLine":398,"endColumn":42},{"ruleId":"277","severity":1,"message":"278","line":465,"column":53,"nodeType":"270","messageId":"279","endLine":465,"endColumn":55},{"ruleId":"214","severity":1,"message":"280","line":535,"column":31,"nodeType":"216","messageId":"217","endLine":535,"endColumn":38},{"ruleId":"214","severity":1,"message":"281","line":633,"column":35,"nodeType":"216","messageId":"217","endLine":633,"endColumn":43},{"ruleId":"277","severity":1,"message":"278","line":662,"column":53,"nodeType":"270","messageId":"279","endLine":662,"endColumn":55},{"ruleId":"214","severity":1,"message":"281","line":746,"column":35,"nodeType":"216","messageId":"217","endLine":746,"endColumn":43},{"ruleId":"214","severity":1,"message":"219","line":12,"column":8,"nodeType":"216","messageId":"217","endLine":12,"endColumn":16},{"ruleId":"214","severity":1,"message":"222","line":14,"column":16,"nodeType":"216","messageId":"217","endLine":14,"endColumn":22},{"ruleId":"214","severity":1,"message":"266","line":19,"column":8,"nodeType":"216","messageId":"217","endLine":19,"endColumn":22},{"ruleId":"225","severity":1,"message":"226","line":50,"column":6,"nodeType":"227","endLine":50,"endColumn":40,"suggestions":"282"},{"ruleId":"229","severity":1,"message":"283","line":74,"column":9,"nodeType":"216","messageId":"231","endLine":74,"endColumn":13},{"ruleId":"268","severity":1,"message":"269","line":181,"column":40,"nodeType":"270","messageId":"271","endLine":182,"endColumn":235},{"ruleId":"268","severity":1,"message":"272","line":185,"column":40,"nodeType":"270","messageId":"271","endLine":186,"endColumn":175},{"ruleId":"268","severity":1,"message":"273","line":196,"column":38,"nodeType":"270","messageId":"271","endLine":196,"endColumn":91},{"ruleId":"274","severity":1,"message":"275","line":323,"column":17,"nodeType":"276","endLine":323,"endColumn":42},{"ruleId":"274","severity":1,"message":"275","line":344,"column":17,"nodeType":"276","endLine":344,"endColumn":42},{"ruleId":"277","severity":1,"message":"278","line":397,"column":53,"nodeType":"270","messageId":"279","endLine":397,"endColumn":55},{"ruleId":"214","severity":1,"message":"280","line":441,"column":31,"nodeType":"216","messageId":"217","endLine":441,"endColumn":38},{"ruleId":"277","severity":1,"message":"278","line":564,"column":53,"nodeType":"270","messageId":"279","endLine":564,"endColumn":55},{"ruleId":"214","severity":1,"message":"284","line":19,"column":20,"nodeType":"216","messageId":"217","endLine":19,"endColumn":32},{"ruleId":"214","severity":1,"message":"285","line":20,"column":18,"nodeType":"216","messageId":"217","endLine":20,"endColumn":28},{"ruleId":"214","severity":1,"message":"286","line":22,"column":23,"nodeType":"216","messageId":"217","endLine":22,"endColumn":38},{"ruleId":"214","severity":1,"message":"287","line":23,"column":21,"nodeType":"216","messageId":"217","endLine":23,"endColumn":34},{"ruleId":"214","severity":1,"message":"288","line":25,"column":22,"nodeType":"216","messageId":"217","endLine":25,"endColumn":36},{"ruleId":"214","severity":1,"message":"289","line":34,"column":12,"nodeType":"216","messageId":"217","endLine":34,"endColumn":25},{"ruleId":"214","severity":1,"message":"290","line":45,"column":12,"nodeType":"216","messageId":"217","endLine":45,"endColumn":28},{"ruleId":"214","severity":1,"message":"291","line":55,"column":12,"nodeType":"216","messageId":"217","endLine":55,"endColumn":29},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'Modal' is defined but never used.","'Figure' is defined but never used.","'uuidv4' is defined but never used.","'STORAGE' is assigned a value but never used.","'GENERICFUNCTIONS' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCars'. Either include it or remove the dependency array.","ArrayExpression",["294"],"no-redeclare","'style' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["295"],["292"],["293"],"React Hook useEffect has a missing dependency: 'getSsts'. Either include it or remove the dependency array.",["296"],"'len' is assigned a value but never used.",["292"],["293"],"React Hook useEffect has missing dependencies: 'getCars' and 'getSsts'. Either include them or remove the dependency array.",["297"],"'useEffect' is defined but never used.","'AUTH' is assigned a value but never used.","'toggleRegistering' is assigned a value but never used.",["292"],["293"],"'Container' is defined but never used.",["292"],["293"],["292"],["293"],["292"],["293"],"'useState' is defined but never used.","'Image' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'MOBILEBREAKPOINT' is assigned a value but never used.","'OverlayTrigger' is defined but never used.",["298"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'option', 'option'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'option', 'filter', 'filter', 'option'.","Function declared in a loop contains unsafe references to variable(s) 'filter', 'filter'.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'popover' is assigned a value but never used.","'strIndex' is assigned a value but never used.",["299"],"'copy' is already defined.","'setStartDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.","'setStartMileage' is assigned a value but never used.","'setEndMileage' is assigned a value but never used.","'setServiceName' is assigned a value but never used.","'isInDateRange' is defined but never used.","'isInMileageRange' is defined but never used.","'isSameServiceName' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"300","fix":"301"},{"desc":"300","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"307","fix":"309"},"Update the dependencies array to be: [getCars, props.userInfo]",{"range":"310","text":"311"},{"range":"312","text":"311"},"Update the dependencies array to be: [getSsts, props.match.params.carId, props.userInfo]",{"range":"313","text":"314"},"Update the dependencies array to be: [getCars, getSsts, props.userInfo]",{"range":"315","text":"316"},"Update the dependencies array to be: [props.userInfo, props.serviceLog, getCars]",{"range":"317","text":"318"},{"range":"319","text":"318"},[1378,1394],"[getCars, props.userInfo]",[1328,1344],[1459,1501],"[getSsts, props.match.params.carId, props.userInfo]",[1111,1127],"[getCars, getSsts, props.userInfo]",[2028,2062],"[props.userInfo, props.serviceLog, getCars]",[2019,2053]]